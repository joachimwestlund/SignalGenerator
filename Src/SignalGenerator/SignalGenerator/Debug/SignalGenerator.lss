
SignalGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  0000030e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9b  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f9  00000000  00000000  00000e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054c  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000378  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:
uint8_t I2C_ReadNACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
	while ((TWCR & (1<<TWINT)) == 0);
	return TWDR;
}
  a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  aa:	88 e9       	ldi	r24, 0x98	; 152
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b6:	08 95       	ret

000000b8 <I2C_Start>:
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <I2C_Start+0x6>
  c6:	08 95       	ret

000000c8 <I2C_Stop>:
  c8:	84 e9       	ldi	r24, 0x94	; 148
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ce:	08 95       	ret

000000d0 <I2C_Write>:
  d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	88 23       	and	r24, r24
  e0:	e4 f7       	brge	.-8      	; 0xda <I2C_Write+0xa>
  e2:	08 95       	ret

000000e4 <I2C_GetStatus>:
*/
uint8_t I2C_GetStatus(void)
{
	uint8_t status;
	//mask status
	status = TWSR & 0xF8;
  e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	return status;
}
  e8:	88 7f       	andi	r24, 0xF8	; 248
  ea:	08 95       	ret

000000ec <I2C_WriteByte>:
/**
*	7-bit addressing mode
*	Returns 0 on success and status code on failure
*/
uint8_t I2C_WriteByte(uint8_t addr, uint8_t data)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	c8 2f       	mov	r28, r24
  f2:	d6 2f       	mov	r29, r22
	uint8_t status = 0;
	
	I2C_Start();
  f4:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
	status = I2C_GetStatus();
  f8:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_GetStatus>
	if (status != 0x08)
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	91 f4       	brne	.+36     	; 0x124 <I2C_WriteByte+0x38>
		return(status);
	
	addr &= 0b11111110;		// setting LSB to 0 Write mode.
	
	I2C_Write(addr);
 100:	8c 2f       	mov	r24, r28
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	status = I2C_GetStatus();
 108:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_GetStatus>
	if (status != 0x18)
 10c:	88 31       	cpi	r24, 0x18	; 24
 10e:	51 f4       	brne	.+20     	; 0x124 <I2C_WriteByte+0x38>
		return(status);	
		
	I2C_Write(data);
 110:	8d 2f       	mov	r24, r29
 112:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	status = I2C_GetStatus();
 116:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_GetStatus>
	if (status != 0x28)
 11a:	88 32       	cpi	r24, 0x28	; 40
 11c:	19 f4       	brne	.+6      	; 0x124 <I2C_WriteByte+0x38>
		return(status);
	
	I2C_Stop();
 11e:	0e 94 64 00 	call	0xc8	; 0xc8 <I2C_Stop>
	
	return(0);	
 122:	80 e0       	ldi	r24, 0x00	; 0
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <I2C_WriteString>:
/**
*	7-bit addressing mode
*	Returns 0 on success and status code on failure
*/
uint8_t I2C_WriteString(uint8_t addr, uint8_t *data, uint8_t size)
{
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	c8 2f       	mov	r28, r24
 13a:	8b 01       	movw	r16, r22
 13c:	f4 2e       	mov	r15, r20
	uint8_t status = 0;
	uint8_t i = 0;
	
	I2C_Start();
 13e:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
	status = I2C_GetStatus();
 142:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_GetStatus>
	if (status != 0x08)
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	f9 f4       	brne	.+62     	; 0x188 <I2C_WriteString+0x5e>
		return(status);

	addr &= 0b11111110;		// write mode
	
	I2C_Write(addr);
 14a:	8c 2f       	mov	r24, r28
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	status = I2C_GetStatus();
 152:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_GetStatus>
 156:	c8 2f       	mov	r28, r24
	if (status != 0x18)
 158:	88 31       	cpi	r24, 0x18	; 24
 15a:	a1 f4       	brne	.+40     	; 0x184 <I2C_WriteString+0x5a>
 15c:	d0 e0       	ldi	r29, 0x00	; 0
 15e:	0c c0       	rjmp	.+24     	; 0x178 <I2C_WriteString+0x4e>
		return(status);
	
	for (i = 0; i < size; i++)
	{
		I2C_Write(*data++);
 160:	68 01       	movw	r12, r16
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	c8 1a       	sub	r12, r24
 166:	d8 0a       	sbc	r13, r24
 168:	f8 01       	movw	r30, r16
 16a:	80 81       	ld	r24, Z
 16c:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
		if (status != 0x18)
 170:	c8 31       	cpi	r28, 0x18	; 24
 172:	49 f4       	brne	.+18     	; 0x186 <I2C_WriteString+0x5c>
	I2C_Write(addr);
	status = I2C_GetStatus();
	if (status != 0x18)
		return(status);
	
	for (i = 0; i < size; i++)
 174:	df 5f       	subi	r29, 0xFF	; 255
	{
		I2C_Write(*data++);
 176:	86 01       	movw	r16, r12
	I2C_Write(addr);
	status = I2C_GetStatus();
	if (status != 0x18)
		return(status);
	
	for (i = 0; i < size; i++)
 178:	df 15       	cp	r29, r15
 17a:	90 f3       	brcs	.-28     	; 0x160 <I2C_WriteString+0x36>
		I2C_Write(*data++);
		if (status != 0x18)
			return(status);
	}
	
	I2C_Stop();
 17c:	0e 94 64 00 	call	0xc8	; 0xc8 <I2C_Stop>
	
	return(0);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <I2C_WriteString+0x5e>
 184:	01 c0       	rjmp	.+2      	; 0x188 <I2C_WriteString+0x5e>
	
	for (i = 0; i < size; i++)
	{
		I2C_Write(*data++);
		if (status != 0x18)
			return(status);
 186:	8c 2f       	mov	r24, r28
	}
	
	I2C_Stop();
	
	return(0);
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	df 90       	pop	r13
 194:	cf 90       	pop	r12
 196:	08 95       	ret

00000198 <main>:
int main(void)
{	
	uint8_t status = 0;
	uint8_t *str = (uint8_t*)"Jocke";
	
	DDRD |= 0xff;
 198:	8a b1       	in	r24, 0x0a	; 10
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 19e:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	81 ee       	ldi	r24, 0xE1	; 225
 1a4:	94 e0       	ldi	r25, 0x04	; 4
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0xe>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x18>
 1b0:	00 00       	nop
		
	_delay_ms(100);		// delay so the LCD can initialize
	
	I2C_Init();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
	
	if ((status = I2C_WriteString(0x50, str, 0x05)) != 0)	// send an 'A' to LCD
 1b6:	45 e0       	ldi	r20, 0x05	; 5
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	71 e0       	ldi	r23, 0x01	; 1
 1bc:	80 e5       	ldi	r24, 0x50	; 80
 1be:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_WriteString>
 1c2:	88 23       	and	r24, r24
 1c4:	19 f0       	breq	.+6      	; 0x1cc <main+0x34>
	{
		PORTD = ~(status);									// invert output to LEDS so they are shown correctly.
 1c6:	80 95       	com	r24
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <main+0x32>
		while(1) {}											// Halt program
	}
	else
		PORTD = 0xff;										// means all leds are off. status OK! ;)
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	8b b9       	out	0x0b, r24	; 11
		
		

	DDRD |= 0b00000000;										// Set all pins to 1 to make it outputs
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= 0b10011111;										// clear bit 5 and 6 so they are inputs for rotary encoder
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	8f 79       	andi	r24, 0x9F	; 159
 1d8:	8a b9       	out	0x0a, r24	; 10

	PORTD |= 0b10001100;									// disable pull up resistors on PORTD.
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8c 68       	ori	r24, 0x8C	; 140
 1de:	8b b9       	out	0x0b, r24	; 11
	
	
    while (1) 
    {
		if ((PIND & (1 << PIND5)) == (1 << PIND5)) 
 1e0:	4d 99       	sbic	0x09, 5	; 9
 1e2:	09 c0       	rjmp	.+18     	; 0x1f6 <main+0x5e>
		{
			// pin is high, do nothing
		} 
		else
		{
			if (left == 0)
 1e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <left>
 1e8:	81 11       	cpse	r24, r1
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <main+0x5e>
			{
				right = 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <right>
				A_trace = 1;
 1f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <A_trace>
			}
		}
		if ((PIND & (1 << PIND6)) == (1 << PIND6))
 1f6:	4e 99       	sbic	0x09, 6	; 9
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <main+0x74>
		{
			// pin high, do nothing
		}
		else
		{
			if (right == 0)
 1fa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <right>
 1fe:	81 11       	cpse	r24, r1
 200:	05 c0       	rjmp	.+10     	; 0x20c <main+0x74>
			{
				left = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <left>
				B_trace = 1;
 208:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <B_trace>
			}
		}
		
		if (A_trace == 1 && B_trace == 1)
 20c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <A_trace>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	21 f5       	brne	.+72     	; 0x25c <main+0xc4>
 214:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <B_trace>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	01 f5       	brne	.+64     	; 0x25c <main+0xc4>
		{
			if (right == 1)
 21c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <right>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	41 f4       	brne	.+16     	; 0x234 <main+0x9c>
			{
				count++;
 224:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count>
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count>
				updateLCD = 1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			}
			if (left == 1)
 234:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <left>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	41 f4       	brne	.+16     	; 0x24c <main+0xb4>
			{
				count--;
 23c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count>
 240:	81 50       	subi	r24, 0x01	; 1
 242:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count>
				updateLCD = 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			}
			A_trace = 0;
 24c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <A_trace>
			B_trace = 0;
 250:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <B_trace>
			right = 0;
 254:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <right>
			left = 0;
 258:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <left>
		}
		
		if (updateLCD == 1)
 25c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	09 f0       	breq	.+2      	; 0x266 <main+0xce>
 264:	bd cf       	rjmp	.-134    	; 0x1e0 <main+0x48>
		{
			I2C_WriteByte(0x50, 65);
 266:	61 e4       	ldi	r22, 0x41	; 65
 268:	80 e5       	ldi	r24, 0x50	; 80
 26a:	0e 94 76 00 	call	0xec	; 0xec <I2C_WriteByte>
 26e:	b8 cf       	rjmp	.-144    	; 0x1e0 <main+0x48>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
