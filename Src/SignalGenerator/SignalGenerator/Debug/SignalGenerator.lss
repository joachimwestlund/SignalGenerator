
SignalGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000f5e  00000ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800112  00800112  00001004  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001114  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3b  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1b  00000000  00000000  00002d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  0000373c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cf  00000000  00000000  000039d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ca  00000000  00000000  00003fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000486d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  9e:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <AD9833_Init>:

#include "AD9833.h"

void AD9833_Init(void)
{
	mclk = 25000000;	// 25Mhz external oscillator
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	98 e7       	ldi	r25, 0x78	; 120
  aa:	ad e7       	ldi	r26, 0x7D	; 125
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mclk>
  b2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <mclk+0x1>
  b6:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <mclk+0x2>
  ba:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <mclk+0x3>
	controlRegister = 0x2000;
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e2       	ldi	r25, 0x20	; 32
  c2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
  c6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
	freqRegister = 0x4000;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e4       	ldi	r25, 0x40	; 64
  ce:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <freqRegister+0x1>
  d2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <freqRegister>
	phaseRegister = 0xc000;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 ec       	ldi	r25, 0xC0	; 192
  da:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <phaseRegister+0x1>
  de:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <phaseRegister>
	freq = 1000;	// 1kHz
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <freq>
  ee:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <freq+0x1>
  f2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <freq+0x2>
  f6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <freq+0x3>
	phase = 0;
  fa:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <phase+0x1>
  fe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <phase>
	
	SPI_Init();
 102:	0e 94 07 03 	call	0x60e	; 0x60e <SPI_Init>
 106:	08 95       	ret

00000108 <AD9833_WriteData>:
}


void AD9833_WriteData(uint16_t data)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	c8 2f       	mov	r28, r24
 10e:	d9 2f       	mov	r29, r25
	uint8_t tmp;
	// get high byte of data
	tmp = (uint8_t)(data >> 8);
	SPI_Start_Transfer();
 110:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_Start_Transfer>
	SPI_Tranceiver(tmp);
 114:	8d 2f       	mov	r24, r29
 116:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SPI_Tranceiver>
	// get low byte of data
	tmp = (uint8_t)(data & 0x00ff);
	SPI_Tranceiver(tmp);
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SPI_Tranceiver>
	SPI_End_Transfer();
 120:	0e 94 03 03 	call	0x606	; 0x606 <SPI_End_Transfer>
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <AD9833_Reset>:
/**
*	reset: 1 means set reset and 0 means not reset. or unreset.
*/
void AD9833_Reset(uint8_t reset)
{
	if (reset == 0)
 12a:	81 11       	cpse	r24, r1
 12c:	0a c0       	rjmp	.+20     	; 0x142 <AD9833_Reset+0x18>
	{
		controlRegister &= 0xFEFF;	// set D8 to 0
 12e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 132:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 136:	9e 7f       	andi	r25, 0xFE	; 254
 138:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 13c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
 140:	0b c0       	rjmp	.+22     	; 0x158 <AD9833_Reset+0x2e>
	}
	else if (reset == 1)
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	49 f4       	brne	.+18     	; 0x158 <AD9833_Reset+0x2e>
	{
		controlRegister |= 0x0100;	// set D8 to 1
 146:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 14a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 14e:	91 60       	ori	r25, 0x01	; 1
 150:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 154:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
	}
	AD9833_WriteData(controlRegister);
 158:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 15c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 160:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
 164:	08 95       	ret

00000166 <AD9833_SetFreq>:
}

void AD9833_SetFreq(unsigned long _freq)
{
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
	if (_freq < 0)					// frequency cant be set to lower than 0 Hz
	{
		fRegister = 0;
		freq = 0;
	}
	else if(_freq > (mclk /2))		// frequency cant be set to higher than mclk/2
 17a:	c0 90 26 01 	lds	r12, 0x0126	; 0x800126 <mclk>
 17e:	d0 90 27 01 	lds	r13, 0x0127	; 0x800127 <mclk+0x1>
 182:	e0 90 28 01 	lds	r14, 0x0128	; 0x800128 <mclk+0x2>
 186:	f0 90 29 01 	lds	r15, 0x0129	; 0x800129 <mclk+0x3>
 18a:	97 01       	movw	r18, r14
 18c:	86 01       	movw	r16, r12
 18e:	36 95       	lsr	r19
 190:	27 95       	ror	r18
 192:	17 95       	ror	r17
 194:	07 95       	ror	r16
 196:	06 17       	cp	r16, r22
 198:	17 07       	cpc	r17, r23
 19a:	28 07       	cpc	r18, r24
 19c:	39 07       	cpc	r19, r25
 19e:	68 f4       	brcc	.+26     	; 0x1ba <AD9833_SetFreq+0x54>
	{
		fRegister = pow(2,28) - 1;
		freq = mclk / 2;
 1a0:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <freq>
 1a4:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <freq+0x1>
 1a8:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <freq+0x2>
 1ac:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <freq+0x3>
		fRegister = 0;
		freq = 0;
	}
	else if(_freq > (mclk /2))		// frequency cant be set to higher than mclk/2
	{
		fRegister = pow(2,28) - 1;
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e1       	ldi	r25, 0x10	; 16
 1b8:	1e c0       	rjmp	.+60     	; 0x1f6 <AD9833_SetFreq+0x90>
		freq = mclk / 2;
	}
	else							// all good, then we set the new frequency.
	{
		freq = _freq;
 1ba:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <freq>
 1be:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <freq+0x1>
 1c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <freq+0x2>
 1c6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <freq+0x3>
		fRegister = (freq * pow(2,28)) / mclk;
 1ca:	0e 94 ba 03 	call	0x774	; 0x774 <__floatunsisf>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e8       	ldi	r20, 0x80	; 128
 1d4:	5d e4       	ldi	r21, 0x4D	; 77
 1d6:	0e 94 48 04 	call	0x890	; 0x890 <__mulsf3>
 1da:	4b 01       	movw	r8, r22
 1dc:	5c 01       	movw	r10, r24
 1de:	c7 01       	movw	r24, r14
 1e0:	b6 01       	movw	r22, r12
 1e2:	0e 94 ba 03 	call	0x774	; 0x774 <__floatunsisf>
 1e6:	9b 01       	movw	r18, r22
 1e8:	ac 01       	movw	r20, r24
 1ea:	c5 01       	movw	r24, r10
 1ec:	b4 01       	movw	r22, r8
 1ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
 1f2:	0e 94 8b 03 	call	0x716	; 0x716 <__fixunssfsi>
	}
	
	MSW = ((uint16_t)(fRegister >> 14)) | freqRegister;
 1f6:	8b 01       	movw	r16, r22
 1f8:	9c 01       	movw	r18, r24
 1fa:	0f 2e       	mov	r0, r31
 1fc:	fe e0       	ldi	r31, 0x0E	; 14
 1fe:	36 95       	lsr	r19
 200:	27 95       	ror	r18
 202:	17 95       	ror	r17
 204:	07 95       	ror	r16
 206:	fa 95       	dec	r31
 208:	d1 f7       	brne	.-12     	; 0x1fe <AD9833_SetFreq+0x98>
 20a:	f0 2d       	mov	r31, r0
 20c:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <freqRegister>
 210:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <freqRegister+0x1>
 214:	04 2b       	or	r16, r20
 216:	15 2b       	or	r17, r21
	LSW = ((uint16_t)(fRegister & 0x3FFF)) | freqRegister; 
 218:	cb 01       	movw	r24, r22
 21a:	9f 73       	andi	r25, 0x3F	; 63
	
	AD9833_WriteData(LSW);
 21c:	84 2b       	or	r24, r20
 21e:	95 2b       	or	r25, r21
 220:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
	AD9833_WriteData(MSW);
 224:	c8 01       	movw	r24, r16
 226:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
}
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	df 90       	pop	r13
 234:	cf 90       	pop	r12
 236:	bf 90       	pop	r11
 238:	af 90       	pop	r10
 23a:	9f 90       	pop	r9
 23c:	8f 90       	pop	r8
 23e:	08 95       	ret

00000240 <AD9833_SetMode>:

void AD9833_SetMode(int mode) {
	switch (mode) {
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	91 05       	cpc	r25, r1
 244:	79 f0       	breq	.+30     	; 0x264 <AD9833_SetMode+0x24>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	91 05       	cpc	r25, r1
 24a:	b9 f0       	breq	.+46     	; 0x27a <AD9833_SetMode+0x3a>
 24c:	89 2b       	or	r24, r25
 24e:	f9 f4       	brne	.+62     	; 0x28e <AD9833_SetMode+0x4e>
		case 0: {
			controlRegister &= 0xFFDD; // Output sine: D5-0 and D1-0
 250:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 254:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 258:	8d 7d       	andi	r24, 0xDD	; 221
 25a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 25e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		} break;
 262:	15 c0       	rjmp	.+42     	; 0x28e <AD9833_SetMode+0x4e>
		case 1: {
			controlRegister &= 0xFFDF; // Output triangle: D5-0 and D1-1
 264:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 268:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 26c:	8f 7d       	andi	r24, 0xDF	; 223
			controlRegister |= 0x0002;
 26e:	82 60       	ori	r24, 0x02	; 2
 270:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 274:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		} break;
 278:	0a c0       	rjmp	.+20     	; 0x28e <AD9833_SetMode+0x4e>
		case 2: {
			controlRegister &= 0xFFFD; // Output clock (rectangle): D5-1 and D1-0
 27a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 27e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 282:	8d 7f       	andi	r24, 0xFD	; 253
			controlRegister |= 0x0020;
 284:	80 62       	ori	r24, 0x20	; 32
 286:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 28a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		} break;
	}
	AD9833_WriteData(controlRegister);
 28e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 292:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 296:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
 29a:	08 95       	ret

0000029c <AD9833_SetPhase>:
	
	uint16_t phaseData;
	uint16_t LSW;
	
	// Phase cannot be negative
	if (_phase < 0) {
 29c:	99 23       	and	r25, r25
 29e:	2c f4       	brge	.+10     	; 0x2aa <AD9833_SetPhase+0xe>
		phase = 0;
 2a0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <phase+0x1>
 2a4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <phase>
 2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <AD9833_SetPhase+0x2c>
	}
	// Phase maximum is 2^12
	else if (_phase >= 4096) {
 2aa:	81 15       	cp	r24, r1
 2ac:	20 e1       	ldi	r18, 0x10	; 16
 2ae:	92 07       	cpc	r25, r18
 2b0:	3c f0       	brlt	.+14     	; 0x2c0 <AD9833_SetPhase+0x24>
		phase = 4096 - 1;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <phase+0x1>
 2ba:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <phase>
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <AD9833_SetPhase+0x2c>
	}
	// If all is good, set the new phase value
	else {
		phase = _phase;
 2c0:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <phase+0x1>
 2c4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <phase>
	}
	// Extract the 12 bits from the freqReg and set D15-1, D14-1, D13-0, D12-X to
	// put data in PHASE0/1 register
	
	phaseData = phase | phaseRegister;
 2c8:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <phase>
 2cc:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <phase+0x1>
 2d0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <phaseRegister>
 2d4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <phaseRegister+0x1>
	LSW = (phaseData & 0x3FFF) | phaseRegister;
	
	AD9833_WriteData(phaseData);			// This might be wrong
 2d8:	82 2b       	or	r24, r18
 2da:	93 2b       	or	r25, r19
 2dc:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
 2e0:	08 95       	ret

000002e2 <AD9833_SetFreqPhasePRegister>:
}

// reg0 or reg1
void AD9833_SetFreqPhasePRegister(int reg) {
	if (reg == 0) 
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	b1 f4       	brne	.+44     	; 0x312 <AD9833_SetFreqPhasePRegister+0x30>
	{
		controlRegister &= 0xF3FF;			// Set D11 and D10 in control register to 0
 2e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 2ea:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 2ee:	93 7f       	andi	r25, 0xF3	; 243
 2f0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 2f4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		freqRegister = 0x4000;				// Set D15 to 0 and D14 to 1 in a variable that will
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e4       	ldi	r25, 0x40	; 64
 2fc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <freqRegister+0x1>
 300:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <freqRegister>
											// later choose the FREQ0 register
		phaseRegister =	0xC000;				// Set D15 to 1 and D14 to 1 and D13 to 0 for the PHASE register
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 ec       	ldi	r25, 0xC0	; 192
 308:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <phaseRegister+0x1>
 30c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <phaseRegister>
 310:	17 c0       	rjmp	.+46     	; 0x340 <AD9833_SetFreqPhasePRegister+0x5e>
		
	} 
	else if (reg == 1) 
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	a9 f4       	brne	.+42     	; 0x340 <AD9833_SetFreqPhasePRegister+0x5e>
	{
		controlRegister |= 0x0C00;			// Set D11 and D10 in control register to 1
 316:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 31a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 31e:	9c 60       	ori	r25, 0x0C	; 12
 320:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 324:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		freqRegister = 0x8000;				// Set D15 to 1 and D14 to 0 in a variable that will
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e8       	ldi	r25, 0x80	; 128
 32c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <freqRegister+0x1>
 330:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <freqRegister>
											// later choose the FREQ1 register
		phaseRegister =	0xD000;				// Set D15 to 1 and D14 to 1 and D13 to 1 for the PHASE register
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 ed       	ldi	r25, 0xD0	; 208
 338:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <phaseRegister+0x1>
 33c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <phaseRegister>
	}
	AD9833_WriteData(controlRegister);
 340:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 344:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 348:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
 34c:	08 95       	ret

0000034e <I2C_Init>:
		return(status);
	
	I2C_Stop();
	
	return(0);	
}
 34e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 352:	88 e9       	ldi	r24, 0x98	; 152
 354:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 358:	84 e0       	ldi	r24, 0x04	; 4
 35a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 35e:	08 95       	ret

00000360 <I2C_Start>:
 360:	84 ea       	ldi	r24, 0xA4	; 164
 362:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 366:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 36a:	88 23       	and	r24, r24
 36c:	e4 f7       	brge	.-8      	; 0x366 <I2C_Start+0x6>
 36e:	08 95       	ret

00000370 <I2C_Stop>:
 370:	84 e9       	ldi	r24, 0x94	; 148
 372:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 376:	08 95       	ret

00000378 <I2C_Write>:
 378:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 37c:	84 e8       	ldi	r24, 0x84	; 132
 37e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 382:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 386:	88 23       	and	r24, r24
 388:	e4 f7       	brge	.-8      	; 0x382 <I2C_Write+0xa>
 38a:	08 95       	ret

0000038c <I2C_GetStatus>:
 38c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 390:	88 7f       	andi	r24, 0xF8	; 248
 392:	08 95       	ret

00000394 <I2C_WriteString>:
/**
*	7-bit addressing mode
*	Returns 0 on success and status code on failure
*/
uint8_t I2C_WriteString(uint8_t addr, uint8_t *data, uint8_t size)
{
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ff 92       	push	r15
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	c8 2f       	mov	r28, r24
 3a4:	8b 01       	movw	r16, r22
 3a6:	f4 2e       	mov	r15, r20
	uint8_t status = 0;
	uint8_t i = 0;
	
	I2C_Start();
 3a8:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Start>
	status = I2C_GetStatus();
 3ac:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x08)
 3b0:	88 30       	cpi	r24, 0x08	; 8
 3b2:	f9 f4       	brne	.+62     	; 0x3f2 <I2C_WriteString+0x5e>
		return(status);

	addr &= 0b11111110;		// write mode
	
	I2C_Write(addr);
 3b4:	8c 2f       	mov	r24, r28
 3b6:	8e 7f       	andi	r24, 0xFE	; 254
 3b8:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
	status = I2C_GetStatus();
 3bc:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
 3c0:	c8 2f       	mov	r28, r24
	if (status != 0x18)
 3c2:	88 31       	cpi	r24, 0x18	; 24
 3c4:	a1 f4       	brne	.+40     	; 0x3ee <I2C_WriteString+0x5a>
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
 3c8:	0c c0       	rjmp	.+24     	; 0x3e2 <I2C_WriteString+0x4e>
		return(status);
	
	for (i = 0; i < size; i++)
	{
		I2C_Write(*data++);
 3ca:	68 01       	movw	r12, r16
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	c8 1a       	sub	r12, r24
 3d0:	d8 0a       	sbc	r13, r24
 3d2:	f8 01       	movw	r30, r16
 3d4:	80 81       	ld	r24, Z
 3d6:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
		if (status != 0x18)
 3da:	c8 31       	cpi	r28, 0x18	; 24
 3dc:	49 f4       	brne	.+18     	; 0x3f0 <I2C_WriteString+0x5c>
	I2C_Write(addr);
	status = I2C_GetStatus();
	if (status != 0x18)
		return(status);
	
	for (i = 0; i < size; i++)
 3de:	df 5f       	subi	r29, 0xFF	; 255
	{
		I2C_Write(*data++);
 3e0:	86 01       	movw	r16, r12
	I2C_Write(addr);
	status = I2C_GetStatus();
	if (status != 0x18)
		return(status);
	
	for (i = 0; i < size; i++)
 3e2:	df 15       	cp	r29, r15
 3e4:	90 f3       	brcs	.-28     	; 0x3ca <I2C_WriteString+0x36>
		I2C_Write(*data++);
		if (status != 0x18)
			return(status);
	}
	
	I2C_Stop();
 3e6:	0e 94 b8 01 	call	0x370	; 0x370 <I2C_Stop>
	
	return(0);
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <I2C_WriteString+0x5e>
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <I2C_WriteString+0x5e>
	
	for (i = 0; i < size; i++)
	{
		I2C_Write(*data++);
		if (status != 0x18)
			return(status);
 3f0:	8c 2f       	mov	r24, r28
	}
	
	I2C_Stop();
	
	return(0);
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	08 95       	ret

00000402 <__vector_5>:
char set_count_buf[4] = {0};

volatile uint8_t updateLCD = 1;

ISR (PCINT2_vect)
{
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	8f 93       	push	r24
	if ((PIND & (1 << PIND5)) != (1 << PIND5))				// if interrupt pin is low
 40e:	4d 99       	sbic	0x09, 5	; 9
 410:	10 c0       	rjmp	.+32     	; 0x432 <__vector_5+0x30>
	{
		if ((PIND & (1 << PIND6)) != (1 << PIND6))			// and if the pd6 pin is low then the direction is left
 412:	4e 99       	sbic	0x09, 6	; 9
 414:	06 c0       	rjmp	.+12     	; 0x422 <__vector_5+0x20>
		{
			count--;	
 416:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count>
 41a:	81 50       	subi	r24, 0x01	; 1
 41c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <count>
 420:	05 c0       	rjmp	.+10     	; 0x42c <__vector_5+0x2a>
		}
		else
		{
			count++;										// if pd6 is high then the direction is right
 422:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count>
 426:	8f 5f       	subi	r24, 0xFF	; 255
 428:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <count>
		}
		updateLCD = 1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 432:	8f 91       	pop	r24
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	81 ee       	ldi	r24, 0xE1	; 225
 442:	94 e0       	ldi	r25, 0x04	; 4
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <main+0x6>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <main+0x10>
 44e:	00 00       	nop
	uint8_t status = 0;
	uint8_t *str = (uint8_t*)"12500000 Hz";
	
	_delay_ms(100);		// delay so the LCD can initialize
	
	I2C_Init();
 450:	0e 94 a7 01 	call	0x34e	; 0x34e <I2C_Init>
	
	LCD_WriteCommand(0x50, 0x51, 0x00);
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	61 e5       	ldi	r22, 0x51	; 81
 458:	80 e5       	ldi	r24, 0x50	; 80
 45a:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_WriteCommand>
 45e:	8f e3       	ldi	r24, 0x3F	; 63
 460:	9f e1       	ldi	r25, 0x1F	; 31
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <main+0x24>
 466:	00 c0       	rjmp	.+0      	; 0x468 <main+0x2a>
 468:	00 00       	nop
	_delay_ms(2);
	if ((status = I2C_WriteString(0x50, str, strlen((char *)str))) != 0)
 46a:	4b e0       	ldi	r20, 0x0B	; 11
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	71 e0       	ldi	r23, 0x01	; 1
 470:	80 e5       	ldi	r24, 0x50	; 80
 472:	0e 94 ca 01 	call	0x394	; 0x394 <I2C_WriteString>
 476:	81 11       	cpse	r24, r1
 478:	ff cf       	rjmp	.-2      	; 0x478 <main+0x3a>
	{
		while(1) {}											// Halt program
	}

	// Lets enable PCINT21 on pin PD5
	DDRD &= 0b11011111;										// pin5 port d is input
 47a:	8a b1       	in	r24, 0x0a	; 10
 47c:	8f 7d       	andi	r24, 0xDF	; 223
 47e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b00100000;									// enable pull-up on pin
 480:	8b b1       	in	r24, 0x0b	; 11
 482:	80 62       	ori	r24, 0x20	; 32
 484:	8b b9       	out	0x0b, r24	; 11
	PCICR = (1 << PCIE2);
 486:	84 e0       	ldi	r24, 0x04	; 4
 488:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 |= 0b00100000;									// pin pd5 enabled for interrupt. pcint21 as interrupt.
 48c:	ed e6       	ldi	r30, 0x6D	; 109
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	80 62       	ori	r24, 0x20	; 32
 494:	80 83       	st	Z, r24
	
	sei();
 496:	78 94       	sei
	
	AD9833_Init();
 498:	0e 94 53 00 	call	0xa6	; 0xa6 <AD9833_Init>
	AD9833_Reset(1);
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 95 00 	call	0x12a	; 0x12a <AD9833_Reset>
	AD9833_SetFreq(1000);				// 1kHz
 4a2:	68 ee       	ldi	r22, 0xE8	; 232
 4a4:	73 e0       	ldi	r23, 0x03	; 3
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 b3 00 	call	0x166	; 0x166 <AD9833_SetFreq>
	AD9833_SetPhase(0);					// 0 phase shift
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 4e 01 	call	0x29c	; 0x29c <AD9833_SetPhase>
	AD9833_SetFreqPhasePRegister(0);	// freq0 and phase0 registers
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <AD9833_SetFreqPhasePRegister>
	AD9833_SetMode(0);					// Sine
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 20 01 	call	0x240	; 0x240 <AD9833_SetMode>
	AD9833_Reset(0);
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 95 00 	call	0x12a	; 0x12a <AD9833_Reset>
	
	
    while (1) 
    {
		if ((PIND & (1 << PIND7)) != (1 << PIND7))			// is pin7 low?
 4cc:	4f 99       	sbic	0x09, 7	; 9
 4ce:	07 c0       	rjmp	.+14     	; 0x4de <main+0xa0>
		{
				set_count = count;
 4d0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count>
 4d4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <set_count>
				updateLCD = 1;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if (updateLCD == 1)
 4de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	99 f7       	brne	.-26     	; 0x4cc <main+0x8e>
 4e6:	8f e3       	ldi	r24, 0x3F	; 63
 4e8:	9f e1       	ldi	r25, 0x1F	; 31
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <main+0xac>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <main+0xb2>
 4f0:	00 00       	nop
		{
			_delay_ms(2);
			LCD_WriteCommand(0x50, 0x45, 0x40);
 4f2:	40 e4       	ldi	r20, 0x40	; 64
 4f4:	65 e4       	ldi	r22, 0x45	; 69
 4f6:	80 e5       	ldi	r24, 0x50	; 80
 4f8:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_WriteCommand>
			snprintf(count_buf, 0x04, "%03d", count);
 4fc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count>
 500:	1f 92       	push	r1
 502:	8f 93       	push	r24
 504:	cd e0       	ldi	r28, 0x0D	; 13
 506:	d1 e0       	ldi	r29, 0x01	; 1
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	1f 92       	push	r1
 50e:	14 e0       	ldi	r17, 0x04	; 4
 510:	1f 93       	push	r17
 512:	86 e1       	ldi	r24, 0x16	; 22
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	9f 93       	push	r25
 518:	8f 93       	push	r24
 51a:	0e 94 b5 04 	call	0x96a	; 0x96a <snprintf>
 51e:	8f e3       	ldi	r24, 0x3F	; 63
 520:	9f e1       	ldi	r25, 0x1F	; 31
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <main+0xe4>
 526:	00 c0       	rjmp	.+0      	; 0x528 <main+0xea>
 528:	00 00       	nop
			_delay_ms(2);
			I2C_WriteString(0x50, (uint8_t *)count_buf, 0x03);
 52a:	43 e0       	ldi	r20, 0x03	; 3
 52c:	66 e1       	ldi	r22, 0x16	; 22
 52e:	71 e0       	ldi	r23, 0x01	; 1
 530:	80 e5       	ldi	r24, 0x50	; 80
 532:	0e 94 ca 01 	call	0x394	; 0x394 <I2C_WriteString>
 536:	8f e3       	ldi	r24, 0x3F	; 63
 538:	9f e1       	ldi	r25, 0x1F	; 31
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <main+0xfc>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0x102>
 540:	00 00       	nop
			
			_delay_ms(2);
			LCD_WriteCommand(0x50, 0x45, 0x4a);
 542:	4a e4       	ldi	r20, 0x4A	; 74
 544:	65 e4       	ldi	r22, 0x45	; 69
 546:	80 e5       	ldi	r24, 0x50	; 80
 548:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_WriteCommand>
			snprintf(set_count_buf, 0x04, "%03d", set_count);
 54c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <set_count>
 550:	1f 92       	push	r1
 552:	8f 93       	push	r24
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	1f 92       	push	r1
 55a:	1f 93       	push	r17
 55c:	82 e1       	ldi	r24, 0x12	; 18
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	9f 93       	push	r25
 562:	8f 93       	push	r24
 564:	0e 94 b5 04 	call	0x96a	; 0x96a <snprintf>
 568:	8f e3       	ldi	r24, 0x3F	; 63
 56a:	9f e1       	ldi	r25, 0x1F	; 31
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <main+0x12e>
 570:	00 c0       	rjmp	.+0      	; 0x572 <main+0x134>
 572:	00 00       	nop
			_delay_ms(2);
			I2C_WriteString(0x50, (uint8_t *)set_count_buf, 0x03);
 574:	43 e0       	ldi	r20, 0x03	; 3
 576:	62 e1       	ldi	r22, 0x12	; 18
 578:	71 e0       	ldi	r23, 0x01	; 1
 57a:	80 e5       	ldi	r24, 0x50	; 80
 57c:	0e 94 ca 01 	call	0x394	; 0x394 <I2C_WriteString>

			updateLCD = 0;
 580:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 584:	8d b7       	in	r24, 0x3d	; 61
 586:	9e b7       	in	r25, 0x3e	; 62
 588:	40 96       	adiw	r24, 0x10	; 16
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	9e bf       	out	0x3e, r25	; 62
 590:	0f be       	out	0x3f, r0	; 63
 592:	8d bf       	out	0x3d, r24	; 61
 594:	9b cf       	rjmp	.-202    	; 0x4cc <main+0x8e>

00000596 <LCD_WriteCommand>:
 */ 

#include "NHC_LCD.h"

uint8_t LCD_WriteCommand(uint8_t addr, uint8_t command, uint8_t data)
{
 596:	1f 93       	push	r17
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	c8 2f       	mov	r28, r24
 59e:	d6 2f       	mov	r29, r22
 5a0:	14 2f       	mov	r17, r20
	uint8_t status = 0;
	
	I2C_Start();
 5a2:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Start>
	status = I2C_GetStatus();
 5a6:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x08)
 5aa:	88 30       	cpi	r24, 0x08	; 8
 5ac:	11 f5       	brne	.+68     	; 0x5f2 <LCD_WriteCommand+0x5c>
	return(status);
	
	addr &= 0b11111110;		// setting LSB to 0 Write mode.
	
	I2C_Write(addr);
 5ae:	8c 2f       	mov	r24, r28
 5b0:	8e 7f       	andi	r24, 0xFE	; 254
 5b2:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
	status = I2C_GetStatus();
 5b6:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x18)
 5ba:	88 31       	cpi	r24, 0x18	; 24
 5bc:	d1 f4       	brne	.+52     	; 0x5f2 <LCD_WriteCommand+0x5c>
		return(status);
	
	I2C_Write(0xfe);
 5be:	8e ef       	ldi	r24, 0xFE	; 254
 5c0:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
	status = I2C_GetStatus();
 5c4:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x28)
 5c8:	88 32       	cpi	r24, 0x28	; 40
 5ca:	99 f4       	brne	.+38     	; 0x5f2 <LCD_WriteCommand+0x5c>
		return(status);
	
	I2C_Write(command);
 5cc:	8d 2f       	mov	r24, r29
 5ce:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
	status = I2C_GetStatus();
 5d2:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x28)
 5d6:	88 32       	cpi	r24, 0x28	; 40
 5d8:	61 f4       	brne	.+24     	; 0x5f2 <LCD_WriteCommand+0x5c>
		return(status);
	
	if (data != 0)
 5da:	11 23       	and	r17, r17
 5dc:	39 f0       	breq	.+14     	; 0x5ec <LCD_WriteCommand+0x56>
	{
		I2C_Write(data);
 5de:	81 2f       	mov	r24, r17
 5e0:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
		status = I2C_GetStatus();
 5e4:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
		if (status != 0x28)
 5e8:	88 32       	cpi	r24, 0x28	; 40
 5ea:	19 f4       	brne	.+6      	; 0x5f2 <LCD_WriteCommand+0x5c>
			return(status);
	}
	
	I2C_Stop();
 5ec:	0e 94 b8 01 	call	0x370	; 0x370 <I2C_Stop>
	
	return(0);
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	1f 91       	pop	r17
 5f8:	08 95       	ret

000005fa <SPI_Tranceiver>:
	SPSR &= ~(1 << SPI2X);
}

uint8_t SPI_Tranceiver(uint8_t data)
{
	SPDR = (unsigned char)data;
 5fa:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
 5fc:	0d b4       	in	r0, 0x2d	; 45
 5fe:	07 fe       	sbrs	r0, 7
 600:	fd cf       	rjmp	.-6      	; 0x5fc <SPI_Tranceiver+0x2>
	
	return((uint8_t)SPDR);
 602:	8e b5       	in	r24, 0x2e	; 46
}
 604:	08 95       	ret

00000606 <SPI_End_Transfer>:

void SPI_End_Transfer(void)
{
	// Set SS pin high
	PORTB |= (1 << PINB2);
 606:	85 b1       	in	r24, 0x05	; 5
 608:	84 60       	ori	r24, 0x04	; 4
 60a:	85 b9       	out	0x05, r24	; 5
 60c:	08 95       	ret

0000060e <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
	// SS, MOSI and CLK as outputs
	DDRB |= (1 << PINB2) | (1 << PINB3) | (1 << PINB5);
 60e:	84 b1       	in	r24, 0x04	; 4
 610:	8c 62       	ori	r24, 0x2C	; 44
 612:	84 b9       	out	0x04, r24	; 4
	
	// MISO as input
	DDRB &= ~(1 << PINB4);
 614:	84 b1       	in	r24, 0x04	; 4
 616:	8f 7e       	andi	r24, 0xEF	; 239
 618:	84 b9       	out	0x04, r24	; 4
	
	SPI_End_Transfer();
 61a:	0e 94 03 03 	call	0x606	; 0x606 <SPI_End_Transfer>
	
	// SPCR |= ~(1 << SPIE) | (1 << SPE) | (1 << DORD) | (1 << MSTR) | ~(1 << CPOL) | ~(1 << CPHA) | ~(1 << SPR1) | ~(1 << SPR0);
	
	// Enable SPI 4Mhz clock no interrupt enable. LSB. 
	SPCR = 0b01010000;
 61e:	80 e5       	ldi	r24, 0x50	; 80
 620:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~(1 << SPI2X);
 622:	8d b5       	in	r24, 0x2d	; 45
 624:	8e 7f       	andi	r24, 0xFE	; 254
 626:	8d bd       	out	0x2d, r24	; 45
 628:	08 95       	ret

0000062a <SPI_Start_Transfer>:
}

void SPI_Start_Transfer(void)
{
	// Set SS pin low
	PORTB &= ~(1 << PINB2);
 62a:	85 b1       	in	r24, 0x05	; 5
 62c:	8b 7f       	andi	r24, 0xFB	; 251
 62e:	85 b9       	out	0x05, r24	; 5
 630:	08 95       	ret

00000632 <__divsf3>:
 632:	0e 94 2d 03 	call	0x65a	; 0x65a <__divsf3x>
 636:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_round>
 63a:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_pscB>
 63e:	58 f0       	brcs	.+22     	; 0x656 <__divsf3+0x24>
 640:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscA>
 644:	40 f0       	brcs	.+16     	; 0x656 <__divsf3+0x24>
 646:	29 f4       	brne	.+10     	; 0x652 <__divsf3+0x20>
 648:	5f 3f       	cpi	r21, 0xFF	; 255
 64a:	29 f0       	breq	.+10     	; 0x656 <__divsf3+0x24>
 64c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 650:	51 11       	cpse	r21, r1
 652:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>
 656:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_nan>

0000065a <__divsf3x>:
 65a:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_split3>
 65e:	68 f3       	brcs	.-38     	; 0x63a <__divsf3+0x8>

00000660 <__divsf3_pse>:
 660:	99 23       	and	r25, r25
 662:	b1 f3       	breq	.-20     	; 0x650 <__divsf3+0x1e>
 664:	55 23       	and	r21, r21
 666:	91 f3       	breq	.-28     	; 0x64c <__divsf3+0x1a>
 668:	95 1b       	sub	r25, r21
 66a:	55 0b       	sbc	r21, r21
 66c:	bb 27       	eor	r27, r27
 66e:	aa 27       	eor	r26, r26
 670:	62 17       	cp	r22, r18
 672:	73 07       	cpc	r23, r19
 674:	84 07       	cpc	r24, r20
 676:	38 f0       	brcs	.+14     	; 0x686 <__divsf3_pse+0x26>
 678:	9f 5f       	subi	r25, 0xFF	; 255
 67a:	5f 4f       	sbci	r21, 0xFF	; 255
 67c:	22 0f       	add	r18, r18
 67e:	33 1f       	adc	r19, r19
 680:	44 1f       	adc	r20, r20
 682:	aa 1f       	adc	r26, r26
 684:	a9 f3       	breq	.-22     	; 0x670 <__divsf3_pse+0x10>
 686:	35 d0       	rcall	.+106    	; 0x6f2 <__divsf3_pse+0x92>
 688:	0e 2e       	mov	r0, r30
 68a:	3a f0       	brmi	.+14     	; 0x69a <__divsf3_pse+0x3a>
 68c:	e0 e8       	ldi	r30, 0x80	; 128
 68e:	32 d0       	rcall	.+100    	; 0x6f4 <__divsf3_pse+0x94>
 690:	91 50       	subi	r25, 0x01	; 1
 692:	50 40       	sbci	r21, 0x00	; 0
 694:	e6 95       	lsr	r30
 696:	00 1c       	adc	r0, r0
 698:	ca f7       	brpl	.-14     	; 0x68c <__divsf3_pse+0x2c>
 69a:	2b d0       	rcall	.+86     	; 0x6f2 <__divsf3_pse+0x92>
 69c:	fe 2f       	mov	r31, r30
 69e:	29 d0       	rcall	.+82     	; 0x6f2 <__divsf3_pse+0x92>
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	88 1f       	adc	r24, r24
 6a6:	bb 1f       	adc	r27, r27
 6a8:	26 17       	cp	r18, r22
 6aa:	37 07       	cpc	r19, r23
 6ac:	48 07       	cpc	r20, r24
 6ae:	ab 07       	cpc	r26, r27
 6b0:	b0 e8       	ldi	r27, 0x80	; 128
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <__divsf3_pse+0x56>
 6b4:	bb 0b       	sbc	r27, r27
 6b6:	80 2d       	mov	r24, r0
 6b8:	bf 01       	movw	r22, r30
 6ba:	ff 27       	eor	r31, r31
 6bc:	93 58       	subi	r25, 0x83	; 131
 6be:	5f 4f       	sbci	r21, 0xFF	; 255
 6c0:	3a f0       	brmi	.+14     	; 0x6d0 <__divsf3_pse+0x70>
 6c2:	9e 3f       	cpi	r25, 0xFE	; 254
 6c4:	51 05       	cpc	r21, r1
 6c6:	78 f0       	brcs	.+30     	; 0x6e6 <__divsf3_pse+0x86>
 6c8:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 6cc:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	e4 f3       	brlt	.-8      	; 0x6cc <__divsf3_pse+0x6c>
 6d4:	98 3e       	cpi	r25, 0xE8	; 232
 6d6:	d4 f3       	brlt	.-12     	; 0x6cc <__divsf3_pse+0x6c>
 6d8:	86 95       	lsr	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	b7 95       	ror	r27
 6e0:	f7 95       	ror	r31
 6e2:	9f 5f       	subi	r25, 0xFF	; 255
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__divsf3_pse+0x78>
 6e6:	88 0f       	add	r24, r24
 6e8:	91 1d       	adc	r25, r1
 6ea:	96 95       	lsr	r25
 6ec:	87 95       	ror	r24
 6ee:	97 f9       	bld	r25, 7
 6f0:	08 95       	ret
 6f2:	e1 e0       	ldi	r30, 0x01	; 1
 6f4:	66 0f       	add	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	bb 1f       	adc	r27, r27
 6fc:	62 17       	cp	r22, r18
 6fe:	73 07       	cpc	r23, r19
 700:	84 07       	cpc	r24, r20
 702:	ba 07       	cpc	r27, r26
 704:	20 f0       	brcs	.+8      	; 0x70e <__divsf3_pse+0xae>
 706:	62 1b       	sub	r22, r18
 708:	73 0b       	sbc	r23, r19
 70a:	84 0b       	sbc	r24, r20
 70c:	ba 0b       	sbc	r27, r26
 70e:	ee 1f       	adc	r30, r30
 710:	88 f7       	brcc	.-30     	; 0x6f4 <__divsf3_pse+0x94>
 712:	e0 95       	com	r30
 714:	08 95       	ret

00000716 <__fixunssfsi>:
 716:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_splitA>
 71a:	88 f0       	brcs	.+34     	; 0x73e <__fixunssfsi+0x28>
 71c:	9f 57       	subi	r25, 0x7F	; 127
 71e:	98 f0       	brcs	.+38     	; 0x746 <__fixunssfsi+0x30>
 720:	b9 2f       	mov	r27, r25
 722:	99 27       	eor	r25, r25
 724:	b7 51       	subi	r27, 0x17	; 23
 726:	b0 f0       	brcs	.+44     	; 0x754 <__fixunssfsi+0x3e>
 728:	e1 f0       	breq	.+56     	; 0x762 <__fixunssfsi+0x4c>
 72a:	66 0f       	add	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	1a f0       	brmi	.+6      	; 0x73a <__fixunssfsi+0x24>
 734:	ba 95       	dec	r27
 736:	c9 f7       	brne	.-14     	; 0x72a <__fixunssfsi+0x14>
 738:	14 c0       	rjmp	.+40     	; 0x762 <__fixunssfsi+0x4c>
 73a:	b1 30       	cpi	r27, 0x01	; 1
 73c:	91 f0       	breq	.+36     	; 0x762 <__fixunssfsi+0x4c>
 73e:	0e 94 41 04 	call	0x882	; 0x882 <__fp_zero>
 742:	b1 e0       	ldi	r27, 0x01	; 1
 744:	08 95       	ret
 746:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_zero>
 74a:	67 2f       	mov	r22, r23
 74c:	78 2f       	mov	r23, r24
 74e:	88 27       	eor	r24, r24
 750:	b8 5f       	subi	r27, 0xF8	; 248
 752:	39 f0       	breq	.+14     	; 0x762 <__fixunssfsi+0x4c>
 754:	b9 3f       	cpi	r27, 0xF9	; 249
 756:	cc f3       	brlt	.-14     	; 0x74a <__fixunssfsi+0x34>
 758:	86 95       	lsr	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b3 95       	inc	r27
 760:	d9 f7       	brne	.-10     	; 0x758 <__fixunssfsi+0x42>
 762:	3e f4       	brtc	.+14     	; 0x772 <__fixunssfsi+0x5c>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	08 95       	ret

00000774 <__floatunsisf>:
 774:	e8 94       	clt
 776:	09 c0       	rjmp	.+18     	; 0x78a <__floatsisf+0x12>

00000778 <__floatsisf>:
 778:	97 fb       	bst	r25, 7
 77a:	3e f4       	brtc	.+14     	; 0x78a <__floatsisf+0x12>
 77c:	90 95       	com	r25
 77e:	80 95       	com	r24
 780:	70 95       	com	r23
 782:	61 95       	neg	r22
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	99 23       	and	r25, r25
 78c:	a9 f0       	breq	.+42     	; 0x7b8 <__floatsisf+0x40>
 78e:	f9 2f       	mov	r31, r25
 790:	96 e9       	ldi	r25, 0x96	; 150
 792:	bb 27       	eor	r27, r27
 794:	93 95       	inc	r25
 796:	f6 95       	lsr	r31
 798:	87 95       	ror	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b7 95       	ror	r27
 7a0:	f1 11       	cpse	r31, r1
 7a2:	f8 cf       	rjmp	.-16     	; 0x794 <__floatsisf+0x1c>
 7a4:	fa f4       	brpl	.+62     	; 0x7e4 <__floatsisf+0x6c>
 7a6:	bb 0f       	add	r27, r27
 7a8:	11 f4       	brne	.+4      	; 0x7ae <__floatsisf+0x36>
 7aa:	60 ff       	sbrs	r22, 0
 7ac:	1b c0       	rjmp	.+54     	; 0x7e4 <__floatsisf+0x6c>
 7ae:	6f 5f       	subi	r22, 0xFF	; 255
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <__floatsisf+0x6c>
 7b8:	88 23       	and	r24, r24
 7ba:	11 f0       	breq	.+4      	; 0x7c0 <__floatsisf+0x48>
 7bc:	96 e9       	ldi	r25, 0x96	; 150
 7be:	11 c0       	rjmp	.+34     	; 0x7e2 <__floatsisf+0x6a>
 7c0:	77 23       	and	r23, r23
 7c2:	21 f0       	breq	.+8      	; 0x7cc <__floatsisf+0x54>
 7c4:	9e e8       	ldi	r25, 0x8E	; 142
 7c6:	87 2f       	mov	r24, r23
 7c8:	76 2f       	mov	r23, r22
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <__floatsisf+0x5e>
 7cc:	66 23       	and	r22, r22
 7ce:	71 f0       	breq	.+28     	; 0x7ec <__floatsisf+0x74>
 7d0:	96 e8       	ldi	r25, 0x86	; 134
 7d2:	86 2f       	mov	r24, r22
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	2a f0       	brmi	.+10     	; 0x7e4 <__floatsisf+0x6c>
 7da:	9a 95       	dec	r25
 7dc:	66 0f       	add	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	da f7       	brpl	.-10     	; 0x7da <__floatsisf+0x62>
 7e4:	88 0f       	add	r24, r24
 7e6:	96 95       	lsr	r25
 7e8:	87 95       	ror	r24
 7ea:	97 f9       	bld	r25, 7
 7ec:	08 95       	ret

000007ee <__fp_inf>:
 7ee:	97 f9       	bld	r25, 7
 7f0:	9f 67       	ori	r25, 0x7F	; 127
 7f2:	80 e8       	ldi	r24, 0x80	; 128
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	08 95       	ret

000007fa <__fp_nan>:
 7fa:	9f ef       	ldi	r25, 0xFF	; 255
 7fc:	80 ec       	ldi	r24, 0xC0	; 192
 7fe:	08 95       	ret

00000800 <__fp_pscA>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	16 16       	cp	r1, r22
 806:	17 06       	cpc	r1, r23
 808:	18 06       	cpc	r1, r24
 80a:	09 06       	cpc	r0, r25
 80c:	08 95       	ret

0000080e <__fp_pscB>:
 80e:	00 24       	eor	r0, r0
 810:	0a 94       	dec	r0
 812:	12 16       	cp	r1, r18
 814:	13 06       	cpc	r1, r19
 816:	14 06       	cpc	r1, r20
 818:	05 06       	cpc	r0, r21
 81a:	08 95       	ret

0000081c <__fp_round>:
 81c:	09 2e       	mov	r0, r25
 81e:	03 94       	inc	r0
 820:	00 0c       	add	r0, r0
 822:	11 f4       	brne	.+4      	; 0x828 <__fp_round+0xc>
 824:	88 23       	and	r24, r24
 826:	52 f0       	brmi	.+20     	; 0x83c <__fp_round+0x20>
 828:	bb 0f       	add	r27, r27
 82a:	40 f4       	brcc	.+16     	; 0x83c <__fp_round+0x20>
 82c:	bf 2b       	or	r27, r31
 82e:	11 f4       	brne	.+4      	; 0x834 <__fp_round+0x18>
 830:	60 ff       	sbrs	r22, 0
 832:	04 c0       	rjmp	.+8      	; 0x83c <__fp_round+0x20>
 834:	6f 5f       	subi	r22, 0xFF	; 255
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	08 95       	ret

0000083e <__fp_split3>:
 83e:	57 fd       	sbrc	r21, 7
 840:	90 58       	subi	r25, 0x80	; 128
 842:	44 0f       	add	r20, r20
 844:	55 1f       	adc	r21, r21
 846:	59 f0       	breq	.+22     	; 0x85e <__fp_splitA+0x10>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	71 f0       	breq	.+28     	; 0x868 <__fp_splitA+0x1a>
 84c:	47 95       	ror	r20

0000084e <__fp_splitA>:
 84e:	88 0f       	add	r24, r24
 850:	97 fb       	bst	r25, 7
 852:	99 1f       	adc	r25, r25
 854:	61 f0       	breq	.+24     	; 0x86e <__fp_splitA+0x20>
 856:	9f 3f       	cpi	r25, 0xFF	; 255
 858:	79 f0       	breq	.+30     	; 0x878 <__fp_splitA+0x2a>
 85a:	87 95       	ror	r24
 85c:	08 95       	ret
 85e:	12 16       	cp	r1, r18
 860:	13 06       	cpc	r1, r19
 862:	14 06       	cpc	r1, r20
 864:	55 1f       	adc	r21, r21
 866:	f2 cf       	rjmp	.-28     	; 0x84c <__fp_split3+0xe>
 868:	46 95       	lsr	r20
 86a:	f1 df       	rcall	.-30     	; 0x84e <__fp_splitA>
 86c:	08 c0       	rjmp	.+16     	; 0x87e <__fp_splitA+0x30>
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	99 1f       	adc	r25, r25
 876:	f1 cf       	rjmp	.-30     	; 0x85a <__fp_splitA+0xc>
 878:	86 95       	lsr	r24
 87a:	71 05       	cpc	r23, r1
 87c:	61 05       	cpc	r22, r1
 87e:	08 94       	sec
 880:	08 95       	ret

00000882 <__fp_zero>:
 882:	e8 94       	clt

00000884 <__fp_szero>:
 884:	bb 27       	eor	r27, r27
 886:	66 27       	eor	r22, r22
 888:	77 27       	eor	r23, r23
 88a:	cb 01       	movw	r24, r22
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret

00000890 <__mulsf3>:
 890:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__mulsf3x>
 894:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_round>
 898:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscA>
 89c:	38 f0       	brcs	.+14     	; 0x8ac <__mulsf3+0x1c>
 89e:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_pscB>
 8a2:	20 f0       	brcs	.+8      	; 0x8ac <__mulsf3+0x1c>
 8a4:	95 23       	and	r25, r21
 8a6:	11 f0       	breq	.+4      	; 0x8ac <__mulsf3+0x1c>
 8a8:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 8ac:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_nan>
 8b0:	11 24       	eor	r1, r1
 8b2:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>

000008b6 <__mulsf3x>:
 8b6:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_split3>
 8ba:	70 f3       	brcs	.-36     	; 0x898 <__mulsf3+0x8>

000008bc <__mulsf3_pse>:
 8bc:	95 9f       	mul	r25, r21
 8be:	c1 f3       	breq	.-16     	; 0x8b0 <__mulsf3+0x20>
 8c0:	95 0f       	add	r25, r21
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	55 1f       	adc	r21, r21
 8c6:	62 9f       	mul	r22, r18
 8c8:	f0 01       	movw	r30, r0
 8ca:	72 9f       	mul	r23, r18
 8cc:	bb 27       	eor	r27, r27
 8ce:	f0 0d       	add	r31, r0
 8d0:	b1 1d       	adc	r27, r1
 8d2:	63 9f       	mul	r22, r19
 8d4:	aa 27       	eor	r26, r26
 8d6:	f0 0d       	add	r31, r0
 8d8:	b1 1d       	adc	r27, r1
 8da:	aa 1f       	adc	r26, r26
 8dc:	64 9f       	mul	r22, r20
 8de:	66 27       	eor	r22, r22
 8e0:	b0 0d       	add	r27, r0
 8e2:	a1 1d       	adc	r26, r1
 8e4:	66 1f       	adc	r22, r22
 8e6:	82 9f       	mul	r24, r18
 8e8:	22 27       	eor	r18, r18
 8ea:	b0 0d       	add	r27, r0
 8ec:	a1 1d       	adc	r26, r1
 8ee:	62 1f       	adc	r22, r18
 8f0:	73 9f       	mul	r23, r19
 8f2:	b0 0d       	add	r27, r0
 8f4:	a1 1d       	adc	r26, r1
 8f6:	62 1f       	adc	r22, r18
 8f8:	83 9f       	mul	r24, r19
 8fa:	a0 0d       	add	r26, r0
 8fc:	61 1d       	adc	r22, r1
 8fe:	22 1f       	adc	r18, r18
 900:	74 9f       	mul	r23, r20
 902:	33 27       	eor	r19, r19
 904:	a0 0d       	add	r26, r0
 906:	61 1d       	adc	r22, r1
 908:	23 1f       	adc	r18, r19
 90a:	84 9f       	mul	r24, r20
 90c:	60 0d       	add	r22, r0
 90e:	21 1d       	adc	r18, r1
 910:	82 2f       	mov	r24, r18
 912:	76 2f       	mov	r23, r22
 914:	6a 2f       	mov	r22, r26
 916:	11 24       	eor	r1, r1
 918:	9f 57       	subi	r25, 0x7F	; 127
 91a:	50 40       	sbci	r21, 0x00	; 0
 91c:	9a f0       	brmi	.+38     	; 0x944 <__stack+0x45>
 91e:	f1 f0       	breq	.+60     	; 0x95c <__stack+0x5d>
 920:	88 23       	and	r24, r24
 922:	4a f0       	brmi	.+18     	; 0x936 <__stack+0x37>
 924:	ee 0f       	add	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	bb 1f       	adc	r27, r27
 92a:	66 1f       	adc	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	91 50       	subi	r25, 0x01	; 1
 932:	50 40       	sbci	r21, 0x00	; 0
 934:	a9 f7       	brne	.-22     	; 0x920 <__stack+0x21>
 936:	9e 3f       	cpi	r25, 0xFE	; 254
 938:	51 05       	cpc	r21, r1
 93a:	80 f0       	brcs	.+32     	; 0x95c <__stack+0x5d>
 93c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 940:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	e4 f3       	brlt	.-8      	; 0x940 <__stack+0x41>
 948:	98 3e       	cpi	r25, 0xE8	; 232
 94a:	d4 f3       	brlt	.-12     	; 0x940 <__stack+0x41>
 94c:	86 95       	lsr	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b7 95       	ror	r27
 954:	f7 95       	ror	r31
 956:	e7 95       	ror	r30
 958:	9f 5f       	subi	r25, 0xFF	; 255
 95a:	c1 f7       	brne	.-16     	; 0x94c <__stack+0x4d>
 95c:	fe 2b       	or	r31, r30
 95e:	88 0f       	add	r24, r24
 960:	91 1d       	adc	r25, r1
 962:	96 95       	lsr	r25
 964:	87 95       	ror	r24
 966:	97 f9       	bld	r25, 7
 968:	08 95       	ret

0000096a <snprintf>:
 96a:	ae e0       	ldi	r26, 0x0E	; 14
 96c:	b0 e0       	ldi	r27, 0x00	; 0
 96e:	eb eb       	ldi	r30, 0xBB	; 187
 970:	f4 e0       	ldi	r31, 0x04	; 4
 972:	0c 94 84 07 	jmp	0xf08	; 0xf08 <__prologue_saves__+0x1c>
 976:	0d 89       	ldd	r16, Y+21	; 0x15
 978:	1e 89       	ldd	r17, Y+22	; 0x16
 97a:	8f 89       	ldd	r24, Y+23	; 0x17
 97c:	98 8d       	ldd	r25, Y+24	; 0x18
 97e:	26 e0       	ldi	r18, 0x06	; 6
 980:	2c 83       	std	Y+4, r18	; 0x04
 982:	1a 83       	std	Y+2, r17	; 0x02
 984:	09 83       	std	Y+1, r16	; 0x01
 986:	97 ff       	sbrs	r25, 7
 988:	02 c0       	rjmp	.+4      	; 0x98e <snprintf+0x24>
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	90 e8       	ldi	r25, 0x80	; 128
 98e:	01 97       	sbiw	r24, 0x01	; 1
 990:	9e 83       	std	Y+6, r25	; 0x06
 992:	8d 83       	std	Y+5, r24	; 0x05
 994:	ae 01       	movw	r20, r28
 996:	45 5e       	subi	r20, 0xE5	; 229
 998:	5f 4f       	sbci	r21, 0xFF	; 255
 99a:	69 8d       	ldd	r22, Y+25	; 0x19
 99c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 99e:	ce 01       	movw	r24, r28
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vfprintf>
 9a6:	4d 81       	ldd	r20, Y+5	; 0x05
 9a8:	5e 81       	ldd	r21, Y+6	; 0x06
 9aa:	57 fd       	sbrc	r21, 7
 9ac:	0a c0       	rjmp	.+20     	; 0x9c2 <snprintf+0x58>
 9ae:	2f 81       	ldd	r18, Y+7	; 0x07
 9b0:	38 85       	ldd	r19, Y+8	; 0x08
 9b2:	42 17       	cp	r20, r18
 9b4:	53 07       	cpc	r21, r19
 9b6:	0c f4       	brge	.+2      	; 0x9ba <snprintf+0x50>
 9b8:	9a 01       	movw	r18, r20
 9ba:	f8 01       	movw	r30, r16
 9bc:	e2 0f       	add	r30, r18
 9be:	f3 1f       	adc	r31, r19
 9c0:	10 82       	st	Z, r1
 9c2:	2e 96       	adiw	r28, 0x0e	; 14
 9c4:	e4 e0       	ldi	r30, 0x04	; 4
 9c6:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__epilogue_restores__+0x1c>

000009ca <vfprintf>:
 9ca:	ab e0       	ldi	r26, 0x0B	; 11
 9cc:	b0 e0       	ldi	r27, 0x00	; 0
 9ce:	eb ee       	ldi	r30, 0xEB	; 235
 9d0:	f4 e0       	ldi	r31, 0x04	; 4
 9d2:	0c 94 76 07 	jmp	0xeec	; 0xeec <__prologue_saves__>
 9d6:	6c 01       	movw	r12, r24
 9d8:	7b 01       	movw	r14, r22
 9da:	8a 01       	movw	r16, r20
 9dc:	fc 01       	movw	r30, r24
 9de:	17 82       	std	Z+7, r1	; 0x07
 9e0:	16 82       	std	Z+6, r1	; 0x06
 9e2:	83 81       	ldd	r24, Z+3	; 0x03
 9e4:	81 ff       	sbrs	r24, 1
 9e6:	cc c1       	rjmp	.+920    	; 0xd80 <vfprintf+0x3b6>
 9e8:	ce 01       	movw	r24, r28
 9ea:	01 96       	adiw	r24, 0x01	; 1
 9ec:	3c 01       	movw	r6, r24
 9ee:	f6 01       	movw	r30, r12
 9f0:	93 81       	ldd	r25, Z+3	; 0x03
 9f2:	f7 01       	movw	r30, r14
 9f4:	93 fd       	sbrc	r25, 3
 9f6:	85 91       	lpm	r24, Z+
 9f8:	93 ff       	sbrs	r25, 3
 9fa:	81 91       	ld	r24, Z+
 9fc:	7f 01       	movw	r14, r30
 9fe:	88 23       	and	r24, r24
 a00:	09 f4       	brne	.+2      	; 0xa04 <vfprintf+0x3a>
 a02:	ba c1       	rjmp	.+884    	; 0xd78 <vfprintf+0x3ae>
 a04:	85 32       	cpi	r24, 0x25	; 37
 a06:	39 f4       	brne	.+14     	; 0xa16 <vfprintf+0x4c>
 a08:	93 fd       	sbrc	r25, 3
 a0a:	85 91       	lpm	r24, Z+
 a0c:	93 ff       	sbrs	r25, 3
 a0e:	81 91       	ld	r24, Z+
 a10:	7f 01       	movw	r14, r30
 a12:	85 32       	cpi	r24, 0x25	; 37
 a14:	29 f4       	brne	.+10     	; 0xa20 <vfprintf+0x56>
 a16:	b6 01       	movw	r22, r12
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputc>
 a1e:	e7 cf       	rjmp	.-50     	; 0x9ee <vfprintf+0x24>
 a20:	91 2c       	mov	r9, r1
 a22:	21 2c       	mov	r2, r1
 a24:	31 2c       	mov	r3, r1
 a26:	ff e1       	ldi	r31, 0x1F	; 31
 a28:	f3 15       	cp	r31, r3
 a2a:	d8 f0       	brcs	.+54     	; 0xa62 <vfprintf+0x98>
 a2c:	8b 32       	cpi	r24, 0x2B	; 43
 a2e:	79 f0       	breq	.+30     	; 0xa4e <vfprintf+0x84>
 a30:	38 f4       	brcc	.+14     	; 0xa40 <vfprintf+0x76>
 a32:	80 32       	cpi	r24, 0x20	; 32
 a34:	79 f0       	breq	.+30     	; 0xa54 <vfprintf+0x8a>
 a36:	83 32       	cpi	r24, 0x23	; 35
 a38:	a1 f4       	brne	.+40     	; 0xa62 <vfprintf+0x98>
 a3a:	23 2d       	mov	r18, r3
 a3c:	20 61       	ori	r18, 0x10	; 16
 a3e:	1d c0       	rjmp	.+58     	; 0xa7a <vfprintf+0xb0>
 a40:	8d 32       	cpi	r24, 0x2D	; 45
 a42:	61 f0       	breq	.+24     	; 0xa5c <vfprintf+0x92>
 a44:	80 33       	cpi	r24, 0x30	; 48
 a46:	69 f4       	brne	.+26     	; 0xa62 <vfprintf+0x98>
 a48:	23 2d       	mov	r18, r3
 a4a:	21 60       	ori	r18, 0x01	; 1
 a4c:	16 c0       	rjmp	.+44     	; 0xa7a <vfprintf+0xb0>
 a4e:	83 2d       	mov	r24, r3
 a50:	82 60       	ori	r24, 0x02	; 2
 a52:	38 2e       	mov	r3, r24
 a54:	e3 2d       	mov	r30, r3
 a56:	e4 60       	ori	r30, 0x04	; 4
 a58:	3e 2e       	mov	r3, r30
 a5a:	2a c0       	rjmp	.+84     	; 0xab0 <vfprintf+0xe6>
 a5c:	f3 2d       	mov	r31, r3
 a5e:	f8 60       	ori	r31, 0x08	; 8
 a60:	1d c0       	rjmp	.+58     	; 0xa9c <vfprintf+0xd2>
 a62:	37 fc       	sbrc	r3, 7
 a64:	2d c0       	rjmp	.+90     	; 0xac0 <vfprintf+0xf6>
 a66:	20 ed       	ldi	r18, 0xD0	; 208
 a68:	28 0f       	add	r18, r24
 a6a:	2a 30       	cpi	r18, 0x0A	; 10
 a6c:	40 f0       	brcs	.+16     	; 0xa7e <vfprintf+0xb4>
 a6e:	8e 32       	cpi	r24, 0x2E	; 46
 a70:	b9 f4       	brne	.+46     	; 0xaa0 <vfprintf+0xd6>
 a72:	36 fc       	sbrc	r3, 6
 a74:	81 c1       	rjmp	.+770    	; 0xd78 <vfprintf+0x3ae>
 a76:	23 2d       	mov	r18, r3
 a78:	20 64       	ori	r18, 0x40	; 64
 a7a:	32 2e       	mov	r3, r18
 a7c:	19 c0       	rjmp	.+50     	; 0xab0 <vfprintf+0xe6>
 a7e:	36 fe       	sbrs	r3, 6
 a80:	06 c0       	rjmp	.+12     	; 0xa8e <vfprintf+0xc4>
 a82:	8a e0       	ldi	r24, 0x0A	; 10
 a84:	98 9e       	mul	r9, r24
 a86:	20 0d       	add	r18, r0
 a88:	11 24       	eor	r1, r1
 a8a:	92 2e       	mov	r9, r18
 a8c:	11 c0       	rjmp	.+34     	; 0xab0 <vfprintf+0xe6>
 a8e:	ea e0       	ldi	r30, 0x0A	; 10
 a90:	2e 9e       	mul	r2, r30
 a92:	20 0d       	add	r18, r0
 a94:	11 24       	eor	r1, r1
 a96:	22 2e       	mov	r2, r18
 a98:	f3 2d       	mov	r31, r3
 a9a:	f0 62       	ori	r31, 0x20	; 32
 a9c:	3f 2e       	mov	r3, r31
 a9e:	08 c0       	rjmp	.+16     	; 0xab0 <vfprintf+0xe6>
 aa0:	8c 36       	cpi	r24, 0x6C	; 108
 aa2:	21 f4       	brne	.+8      	; 0xaac <vfprintf+0xe2>
 aa4:	83 2d       	mov	r24, r3
 aa6:	80 68       	ori	r24, 0x80	; 128
 aa8:	38 2e       	mov	r3, r24
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <vfprintf+0xe6>
 aac:	88 36       	cpi	r24, 0x68	; 104
 aae:	41 f4       	brne	.+16     	; 0xac0 <vfprintf+0xf6>
 ab0:	f7 01       	movw	r30, r14
 ab2:	93 fd       	sbrc	r25, 3
 ab4:	85 91       	lpm	r24, Z+
 ab6:	93 ff       	sbrs	r25, 3
 ab8:	81 91       	ld	r24, Z+
 aba:	7f 01       	movw	r14, r30
 abc:	81 11       	cpse	r24, r1
 abe:	b3 cf       	rjmp	.-154    	; 0xa26 <vfprintf+0x5c>
 ac0:	98 2f       	mov	r25, r24
 ac2:	9f 7d       	andi	r25, 0xDF	; 223
 ac4:	95 54       	subi	r25, 0x45	; 69
 ac6:	93 30       	cpi	r25, 0x03	; 3
 ac8:	28 f4       	brcc	.+10     	; 0xad4 <vfprintf+0x10a>
 aca:	0c 5f       	subi	r16, 0xFC	; 252
 acc:	1f 4f       	sbci	r17, 0xFF	; 255
 ace:	9f e3       	ldi	r25, 0x3F	; 63
 ad0:	99 83       	std	Y+1, r25	; 0x01
 ad2:	0d c0       	rjmp	.+26     	; 0xaee <vfprintf+0x124>
 ad4:	83 36       	cpi	r24, 0x63	; 99
 ad6:	31 f0       	breq	.+12     	; 0xae4 <vfprintf+0x11a>
 ad8:	83 37       	cpi	r24, 0x73	; 115
 ada:	71 f0       	breq	.+28     	; 0xaf8 <vfprintf+0x12e>
 adc:	83 35       	cpi	r24, 0x53	; 83
 ade:	09 f0       	breq	.+2      	; 0xae2 <vfprintf+0x118>
 ae0:	59 c0       	rjmp	.+178    	; 0xb94 <vfprintf+0x1ca>
 ae2:	21 c0       	rjmp	.+66     	; 0xb26 <vfprintf+0x15c>
 ae4:	f8 01       	movw	r30, r16
 ae6:	80 81       	ld	r24, Z
 ae8:	89 83       	std	Y+1, r24	; 0x01
 aea:	0e 5f       	subi	r16, 0xFE	; 254
 aec:	1f 4f       	sbci	r17, 0xFF	; 255
 aee:	88 24       	eor	r8, r8
 af0:	83 94       	inc	r8
 af2:	91 2c       	mov	r9, r1
 af4:	53 01       	movw	r10, r6
 af6:	13 c0       	rjmp	.+38     	; 0xb1e <vfprintf+0x154>
 af8:	28 01       	movw	r4, r16
 afa:	f2 e0       	ldi	r31, 0x02	; 2
 afc:	4f 0e       	add	r4, r31
 afe:	51 1c       	adc	r5, r1
 b00:	f8 01       	movw	r30, r16
 b02:	a0 80       	ld	r10, Z
 b04:	b1 80       	ldd	r11, Z+1	; 0x01
 b06:	36 fe       	sbrs	r3, 6
 b08:	03 c0       	rjmp	.+6      	; 0xb10 <vfprintf+0x146>
 b0a:	69 2d       	mov	r22, r9
 b0c:	70 e0       	ldi	r23, 0x00	; 0
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <vfprintf+0x14a>
 b10:	6f ef       	ldi	r22, 0xFF	; 255
 b12:	7f ef       	ldi	r23, 0xFF	; 255
 b14:	c5 01       	movw	r24, r10
 b16:	0e 94 d1 06 	call	0xda2	; 0xda2 <strnlen>
 b1a:	4c 01       	movw	r8, r24
 b1c:	82 01       	movw	r16, r4
 b1e:	f3 2d       	mov	r31, r3
 b20:	ff 77       	andi	r31, 0x7F	; 127
 b22:	3f 2e       	mov	r3, r31
 b24:	16 c0       	rjmp	.+44     	; 0xb52 <vfprintf+0x188>
 b26:	28 01       	movw	r4, r16
 b28:	22 e0       	ldi	r18, 0x02	; 2
 b2a:	42 0e       	add	r4, r18
 b2c:	51 1c       	adc	r5, r1
 b2e:	f8 01       	movw	r30, r16
 b30:	a0 80       	ld	r10, Z
 b32:	b1 80       	ldd	r11, Z+1	; 0x01
 b34:	36 fe       	sbrs	r3, 6
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <vfprintf+0x174>
 b38:	69 2d       	mov	r22, r9
 b3a:	70 e0       	ldi	r23, 0x00	; 0
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <vfprintf+0x178>
 b3e:	6f ef       	ldi	r22, 0xFF	; 255
 b40:	7f ef       	ldi	r23, 0xFF	; 255
 b42:	c5 01       	movw	r24, r10
 b44:	0e 94 c6 06 	call	0xd8c	; 0xd8c <strnlen_P>
 b48:	4c 01       	movw	r8, r24
 b4a:	f3 2d       	mov	r31, r3
 b4c:	f0 68       	ori	r31, 0x80	; 128
 b4e:	3f 2e       	mov	r3, r31
 b50:	82 01       	movw	r16, r4
 b52:	33 fc       	sbrc	r3, 3
 b54:	1b c0       	rjmp	.+54     	; 0xb8c <vfprintf+0x1c2>
 b56:	82 2d       	mov	r24, r2
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	88 16       	cp	r8, r24
 b5c:	99 06       	cpc	r9, r25
 b5e:	b0 f4       	brcc	.+44     	; 0xb8c <vfprintf+0x1c2>
 b60:	b6 01       	movw	r22, r12
 b62:	80 e2       	ldi	r24, 0x20	; 32
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputc>
 b6a:	2a 94       	dec	r2
 b6c:	f4 cf       	rjmp	.-24     	; 0xb56 <vfprintf+0x18c>
 b6e:	f5 01       	movw	r30, r10
 b70:	37 fc       	sbrc	r3, 7
 b72:	85 91       	lpm	r24, Z+
 b74:	37 fe       	sbrs	r3, 7
 b76:	81 91       	ld	r24, Z+
 b78:	5f 01       	movw	r10, r30
 b7a:	b6 01       	movw	r22, r12
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputc>
 b82:	21 10       	cpse	r2, r1
 b84:	2a 94       	dec	r2
 b86:	21 e0       	ldi	r18, 0x01	; 1
 b88:	82 1a       	sub	r8, r18
 b8a:	91 08       	sbc	r9, r1
 b8c:	81 14       	cp	r8, r1
 b8e:	91 04       	cpc	r9, r1
 b90:	71 f7       	brne	.-36     	; 0xb6e <vfprintf+0x1a4>
 b92:	e8 c0       	rjmp	.+464    	; 0xd64 <vfprintf+0x39a>
 b94:	84 36       	cpi	r24, 0x64	; 100
 b96:	11 f0       	breq	.+4      	; 0xb9c <vfprintf+0x1d2>
 b98:	89 36       	cpi	r24, 0x69	; 105
 b9a:	41 f5       	brne	.+80     	; 0xbec <vfprintf+0x222>
 b9c:	f8 01       	movw	r30, r16
 b9e:	37 fe       	sbrs	r3, 7
 ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <vfprintf+0x1e6>
 ba2:	60 81       	ld	r22, Z
 ba4:	71 81       	ldd	r23, Z+1	; 0x01
 ba6:	82 81       	ldd	r24, Z+2	; 0x02
 ba8:	93 81       	ldd	r25, Z+3	; 0x03
 baa:	0c 5f       	subi	r16, 0xFC	; 252
 bac:	1f 4f       	sbci	r17, 0xFF	; 255
 bae:	08 c0       	rjmp	.+16     	; 0xbc0 <vfprintf+0x1f6>
 bb0:	60 81       	ld	r22, Z
 bb2:	71 81       	ldd	r23, Z+1	; 0x01
 bb4:	07 2e       	mov	r0, r23
 bb6:	00 0c       	add	r0, r0
 bb8:	88 0b       	sbc	r24, r24
 bba:	99 0b       	sbc	r25, r25
 bbc:	0e 5f       	subi	r16, 0xFE	; 254
 bbe:	1f 4f       	sbci	r17, 0xFF	; 255
 bc0:	f3 2d       	mov	r31, r3
 bc2:	ff 76       	andi	r31, 0x6F	; 111
 bc4:	3f 2e       	mov	r3, r31
 bc6:	97 ff       	sbrs	r25, 7
 bc8:	09 c0       	rjmp	.+18     	; 0xbdc <vfprintf+0x212>
 bca:	90 95       	com	r25
 bcc:	80 95       	com	r24
 bce:	70 95       	com	r23
 bd0:	61 95       	neg	r22
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	f0 68       	ori	r31, 0x80	; 128
 bda:	3f 2e       	mov	r3, r31
 bdc:	2a e0       	ldi	r18, 0x0A	; 10
 bde:	30 e0       	ldi	r19, 0x00	; 0
 be0:	a3 01       	movw	r20, r6
 be2:	0e 94 18 07 	call	0xe30	; 0xe30 <__ultoa_invert>
 be6:	88 2e       	mov	r8, r24
 be8:	86 18       	sub	r8, r6
 bea:	45 c0       	rjmp	.+138    	; 0xc76 <vfprintf+0x2ac>
 bec:	85 37       	cpi	r24, 0x75	; 117
 bee:	31 f4       	brne	.+12     	; 0xbfc <vfprintf+0x232>
 bf0:	23 2d       	mov	r18, r3
 bf2:	2f 7e       	andi	r18, 0xEF	; 239
 bf4:	b2 2e       	mov	r11, r18
 bf6:	2a e0       	ldi	r18, 0x0A	; 10
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	25 c0       	rjmp	.+74     	; 0xc46 <vfprintf+0x27c>
 bfc:	93 2d       	mov	r25, r3
 bfe:	99 7f       	andi	r25, 0xF9	; 249
 c00:	b9 2e       	mov	r11, r25
 c02:	8f 36       	cpi	r24, 0x6F	; 111
 c04:	c1 f0       	breq	.+48     	; 0xc36 <vfprintf+0x26c>
 c06:	18 f4       	brcc	.+6      	; 0xc0e <vfprintf+0x244>
 c08:	88 35       	cpi	r24, 0x58	; 88
 c0a:	79 f0       	breq	.+30     	; 0xc2a <vfprintf+0x260>
 c0c:	b5 c0       	rjmp	.+362    	; 0xd78 <vfprintf+0x3ae>
 c0e:	80 37       	cpi	r24, 0x70	; 112
 c10:	19 f0       	breq	.+6      	; 0xc18 <vfprintf+0x24e>
 c12:	88 37       	cpi	r24, 0x78	; 120
 c14:	21 f0       	breq	.+8      	; 0xc1e <vfprintf+0x254>
 c16:	b0 c0       	rjmp	.+352    	; 0xd78 <vfprintf+0x3ae>
 c18:	e9 2f       	mov	r30, r25
 c1a:	e0 61       	ori	r30, 0x10	; 16
 c1c:	be 2e       	mov	r11, r30
 c1e:	b4 fe       	sbrs	r11, 4
 c20:	0d c0       	rjmp	.+26     	; 0xc3c <vfprintf+0x272>
 c22:	fb 2d       	mov	r31, r11
 c24:	f4 60       	ori	r31, 0x04	; 4
 c26:	bf 2e       	mov	r11, r31
 c28:	09 c0       	rjmp	.+18     	; 0xc3c <vfprintf+0x272>
 c2a:	34 fe       	sbrs	r3, 4
 c2c:	0a c0       	rjmp	.+20     	; 0xc42 <vfprintf+0x278>
 c2e:	29 2f       	mov	r18, r25
 c30:	26 60       	ori	r18, 0x06	; 6
 c32:	b2 2e       	mov	r11, r18
 c34:	06 c0       	rjmp	.+12     	; 0xc42 <vfprintf+0x278>
 c36:	28 e0       	ldi	r18, 0x08	; 8
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	05 c0       	rjmp	.+10     	; 0xc46 <vfprintf+0x27c>
 c3c:	20 e1       	ldi	r18, 0x10	; 16
 c3e:	30 e0       	ldi	r19, 0x00	; 0
 c40:	02 c0       	rjmp	.+4      	; 0xc46 <vfprintf+0x27c>
 c42:	20 e1       	ldi	r18, 0x10	; 16
 c44:	32 e0       	ldi	r19, 0x02	; 2
 c46:	f8 01       	movw	r30, r16
 c48:	b7 fe       	sbrs	r11, 7
 c4a:	07 c0       	rjmp	.+14     	; 0xc5a <vfprintf+0x290>
 c4c:	60 81       	ld	r22, Z
 c4e:	71 81       	ldd	r23, Z+1	; 0x01
 c50:	82 81       	ldd	r24, Z+2	; 0x02
 c52:	93 81       	ldd	r25, Z+3	; 0x03
 c54:	0c 5f       	subi	r16, 0xFC	; 252
 c56:	1f 4f       	sbci	r17, 0xFF	; 255
 c58:	06 c0       	rjmp	.+12     	; 0xc66 <vfprintf+0x29c>
 c5a:	60 81       	ld	r22, Z
 c5c:	71 81       	ldd	r23, Z+1	; 0x01
 c5e:	80 e0       	ldi	r24, 0x00	; 0
 c60:	90 e0       	ldi	r25, 0x00	; 0
 c62:	0e 5f       	subi	r16, 0xFE	; 254
 c64:	1f 4f       	sbci	r17, 0xFF	; 255
 c66:	a3 01       	movw	r20, r6
 c68:	0e 94 18 07 	call	0xe30	; 0xe30 <__ultoa_invert>
 c6c:	88 2e       	mov	r8, r24
 c6e:	86 18       	sub	r8, r6
 c70:	fb 2d       	mov	r31, r11
 c72:	ff 77       	andi	r31, 0x7F	; 127
 c74:	3f 2e       	mov	r3, r31
 c76:	36 fe       	sbrs	r3, 6
 c78:	0d c0       	rjmp	.+26     	; 0xc94 <vfprintf+0x2ca>
 c7a:	23 2d       	mov	r18, r3
 c7c:	2e 7f       	andi	r18, 0xFE	; 254
 c7e:	a2 2e       	mov	r10, r18
 c80:	89 14       	cp	r8, r9
 c82:	58 f4       	brcc	.+22     	; 0xc9a <vfprintf+0x2d0>
 c84:	34 fe       	sbrs	r3, 4
 c86:	0b c0       	rjmp	.+22     	; 0xc9e <vfprintf+0x2d4>
 c88:	32 fc       	sbrc	r3, 2
 c8a:	09 c0       	rjmp	.+18     	; 0xc9e <vfprintf+0x2d4>
 c8c:	83 2d       	mov	r24, r3
 c8e:	8e 7e       	andi	r24, 0xEE	; 238
 c90:	a8 2e       	mov	r10, r24
 c92:	05 c0       	rjmp	.+10     	; 0xc9e <vfprintf+0x2d4>
 c94:	b8 2c       	mov	r11, r8
 c96:	a3 2c       	mov	r10, r3
 c98:	03 c0       	rjmp	.+6      	; 0xca0 <vfprintf+0x2d6>
 c9a:	b8 2c       	mov	r11, r8
 c9c:	01 c0       	rjmp	.+2      	; 0xca0 <vfprintf+0x2d6>
 c9e:	b9 2c       	mov	r11, r9
 ca0:	a4 fe       	sbrs	r10, 4
 ca2:	0f c0       	rjmp	.+30     	; 0xcc2 <vfprintf+0x2f8>
 ca4:	fe 01       	movw	r30, r28
 ca6:	e8 0d       	add	r30, r8
 ca8:	f1 1d       	adc	r31, r1
 caa:	80 81       	ld	r24, Z
 cac:	80 33       	cpi	r24, 0x30	; 48
 cae:	21 f4       	brne	.+8      	; 0xcb8 <vfprintf+0x2ee>
 cb0:	9a 2d       	mov	r25, r10
 cb2:	99 7e       	andi	r25, 0xE9	; 233
 cb4:	a9 2e       	mov	r10, r25
 cb6:	09 c0       	rjmp	.+18     	; 0xcca <vfprintf+0x300>
 cb8:	a2 fe       	sbrs	r10, 2
 cba:	06 c0       	rjmp	.+12     	; 0xcc8 <vfprintf+0x2fe>
 cbc:	b3 94       	inc	r11
 cbe:	b3 94       	inc	r11
 cc0:	04 c0       	rjmp	.+8      	; 0xcca <vfprintf+0x300>
 cc2:	8a 2d       	mov	r24, r10
 cc4:	86 78       	andi	r24, 0x86	; 134
 cc6:	09 f0       	breq	.+2      	; 0xcca <vfprintf+0x300>
 cc8:	b3 94       	inc	r11
 cca:	a3 fc       	sbrc	r10, 3
 ccc:	11 c0       	rjmp	.+34     	; 0xcf0 <vfprintf+0x326>
 cce:	a0 fe       	sbrs	r10, 0
 cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x314>
 cd2:	b2 14       	cp	r11, r2
 cd4:	88 f4       	brcc	.+34     	; 0xcf8 <vfprintf+0x32e>
 cd6:	28 0c       	add	r2, r8
 cd8:	92 2c       	mov	r9, r2
 cda:	9b 18       	sub	r9, r11
 cdc:	0e c0       	rjmp	.+28     	; 0xcfa <vfprintf+0x330>
 cde:	b2 14       	cp	r11, r2
 ce0:	60 f4       	brcc	.+24     	; 0xcfa <vfprintf+0x330>
 ce2:	b6 01       	movw	r22, r12
 ce4:	80 e2       	ldi	r24, 0x20	; 32
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputc>
 cec:	b3 94       	inc	r11
 cee:	f7 cf       	rjmp	.-18     	; 0xcde <vfprintf+0x314>
 cf0:	b2 14       	cp	r11, r2
 cf2:	18 f4       	brcc	.+6      	; 0xcfa <vfprintf+0x330>
 cf4:	2b 18       	sub	r2, r11
 cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x332>
 cf8:	98 2c       	mov	r9, r8
 cfa:	21 2c       	mov	r2, r1
 cfc:	a4 fe       	sbrs	r10, 4
 cfe:	10 c0       	rjmp	.+32     	; 0xd20 <vfprintf+0x356>
 d00:	b6 01       	movw	r22, r12
 d02:	80 e3       	ldi	r24, 0x30	; 48
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputc>
 d0a:	a2 fe       	sbrs	r10, 2
 d0c:	17 c0       	rjmp	.+46     	; 0xd3c <vfprintf+0x372>
 d0e:	a1 fc       	sbrc	r10, 1
 d10:	03 c0       	rjmp	.+6      	; 0xd18 <vfprintf+0x34e>
 d12:	88 e7       	ldi	r24, 0x78	; 120
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <vfprintf+0x352>
 d18:	88 e5       	ldi	r24, 0x58	; 88
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	b6 01       	movw	r22, r12
 d1e:	0c c0       	rjmp	.+24     	; 0xd38 <vfprintf+0x36e>
 d20:	8a 2d       	mov	r24, r10
 d22:	86 78       	andi	r24, 0x86	; 134
 d24:	59 f0       	breq	.+22     	; 0xd3c <vfprintf+0x372>
 d26:	a1 fe       	sbrs	r10, 1
 d28:	02 c0       	rjmp	.+4      	; 0xd2e <vfprintf+0x364>
 d2a:	8b e2       	ldi	r24, 0x2B	; 43
 d2c:	01 c0       	rjmp	.+2      	; 0xd30 <vfprintf+0x366>
 d2e:	80 e2       	ldi	r24, 0x20	; 32
 d30:	a7 fc       	sbrc	r10, 7
 d32:	8d e2       	ldi	r24, 0x2D	; 45
 d34:	b6 01       	movw	r22, r12
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputc>
 d3c:	89 14       	cp	r8, r9
 d3e:	38 f4       	brcc	.+14     	; 0xd4e <vfprintf+0x384>
 d40:	b6 01       	movw	r22, r12
 d42:	80 e3       	ldi	r24, 0x30	; 48
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputc>
 d4a:	9a 94       	dec	r9
 d4c:	f7 cf       	rjmp	.-18     	; 0xd3c <vfprintf+0x372>
 d4e:	8a 94       	dec	r8
 d50:	f3 01       	movw	r30, r6
 d52:	e8 0d       	add	r30, r8
 d54:	f1 1d       	adc	r31, r1
 d56:	80 81       	ld	r24, Z
 d58:	b6 01       	movw	r22, r12
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputc>
 d60:	81 10       	cpse	r8, r1
 d62:	f5 cf       	rjmp	.-22     	; 0xd4e <vfprintf+0x384>
 d64:	22 20       	and	r2, r2
 d66:	09 f4       	brne	.+2      	; 0xd6a <vfprintf+0x3a0>
 d68:	42 ce       	rjmp	.-892    	; 0x9ee <vfprintf+0x24>
 d6a:	b6 01       	movw	r22, r12
 d6c:	80 e2       	ldi	r24, 0x20	; 32
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputc>
 d74:	2a 94       	dec	r2
 d76:	f6 cf       	rjmp	.-20     	; 0xd64 <vfprintf+0x39a>
 d78:	f6 01       	movw	r30, r12
 d7a:	86 81       	ldd	r24, Z+6	; 0x06
 d7c:	97 81       	ldd	r25, Z+7	; 0x07
 d7e:	02 c0       	rjmp	.+4      	; 0xd84 <vfprintf+0x3ba>
 d80:	8f ef       	ldi	r24, 0xFF	; 255
 d82:	9f ef       	ldi	r25, 0xFF	; 255
 d84:	2b 96       	adiw	r28, 0x0b	; 11
 d86:	e2 e1       	ldi	r30, 0x12	; 18
 d88:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__epilogue_restores__>

00000d8c <strnlen_P>:
 d8c:	fc 01       	movw	r30, r24
 d8e:	05 90       	lpm	r0, Z+
 d90:	61 50       	subi	r22, 0x01	; 1
 d92:	70 40       	sbci	r23, 0x00	; 0
 d94:	01 10       	cpse	r0, r1
 d96:	d8 f7       	brcc	.-10     	; 0xd8e <strnlen_P+0x2>
 d98:	80 95       	com	r24
 d9a:	90 95       	com	r25
 d9c:	8e 0f       	add	r24, r30
 d9e:	9f 1f       	adc	r25, r31
 da0:	08 95       	ret

00000da2 <strnlen>:
 da2:	fc 01       	movw	r30, r24
 da4:	61 50       	subi	r22, 0x01	; 1
 da6:	70 40       	sbci	r23, 0x00	; 0
 da8:	01 90       	ld	r0, Z+
 daa:	01 10       	cpse	r0, r1
 dac:	d8 f7       	brcc	.-10     	; 0xda4 <strnlen+0x2>
 dae:	80 95       	com	r24
 db0:	90 95       	com	r25
 db2:	8e 0f       	add	r24, r30
 db4:	9f 1f       	adc	r25, r31
 db6:	08 95       	ret

00000db8 <fputc>:
 db8:	0f 93       	push	r16
 dba:	1f 93       	push	r17
 dbc:	cf 93       	push	r28
 dbe:	df 93       	push	r29
 dc0:	fb 01       	movw	r30, r22
 dc2:	23 81       	ldd	r18, Z+3	; 0x03
 dc4:	21 fd       	sbrc	r18, 1
 dc6:	03 c0       	rjmp	.+6      	; 0xdce <fputc+0x16>
 dc8:	8f ef       	ldi	r24, 0xFF	; 255
 dca:	9f ef       	ldi	r25, 0xFF	; 255
 dcc:	2c c0       	rjmp	.+88     	; 0xe26 <fputc+0x6e>
 dce:	22 ff       	sbrs	r18, 2
 dd0:	16 c0       	rjmp	.+44     	; 0xdfe <fputc+0x46>
 dd2:	46 81       	ldd	r20, Z+6	; 0x06
 dd4:	57 81       	ldd	r21, Z+7	; 0x07
 dd6:	24 81       	ldd	r18, Z+4	; 0x04
 dd8:	35 81       	ldd	r19, Z+5	; 0x05
 dda:	42 17       	cp	r20, r18
 ddc:	53 07       	cpc	r21, r19
 dde:	44 f4       	brge	.+16     	; 0xdf0 <fputc+0x38>
 de0:	a0 81       	ld	r26, Z
 de2:	b1 81       	ldd	r27, Z+1	; 0x01
 de4:	9d 01       	movw	r18, r26
 de6:	2f 5f       	subi	r18, 0xFF	; 255
 de8:	3f 4f       	sbci	r19, 0xFF	; 255
 dea:	31 83       	std	Z+1, r19	; 0x01
 dec:	20 83       	st	Z, r18
 dee:	8c 93       	st	X, r24
 df0:	26 81       	ldd	r18, Z+6	; 0x06
 df2:	37 81       	ldd	r19, Z+7	; 0x07
 df4:	2f 5f       	subi	r18, 0xFF	; 255
 df6:	3f 4f       	sbci	r19, 0xFF	; 255
 df8:	37 83       	std	Z+7, r19	; 0x07
 dfa:	26 83       	std	Z+6, r18	; 0x06
 dfc:	14 c0       	rjmp	.+40     	; 0xe26 <fputc+0x6e>
 dfe:	8b 01       	movw	r16, r22
 e00:	ec 01       	movw	r28, r24
 e02:	fb 01       	movw	r30, r22
 e04:	00 84       	ldd	r0, Z+8	; 0x08
 e06:	f1 85       	ldd	r31, Z+9	; 0x09
 e08:	e0 2d       	mov	r30, r0
 e0a:	09 95       	icall
 e0c:	89 2b       	or	r24, r25
 e0e:	e1 f6       	brne	.-72     	; 0xdc8 <fputc+0x10>
 e10:	d8 01       	movw	r26, r16
 e12:	16 96       	adiw	r26, 0x06	; 6
 e14:	8d 91       	ld	r24, X+
 e16:	9c 91       	ld	r25, X
 e18:	17 97       	sbiw	r26, 0x07	; 7
 e1a:	01 96       	adiw	r24, 0x01	; 1
 e1c:	17 96       	adiw	r26, 0x07	; 7
 e1e:	9c 93       	st	X, r25
 e20:	8e 93       	st	-X, r24
 e22:	16 97       	sbiw	r26, 0x06	; 6
 e24:	ce 01       	movw	r24, r28
 e26:	df 91       	pop	r29
 e28:	cf 91       	pop	r28
 e2a:	1f 91       	pop	r17
 e2c:	0f 91       	pop	r16
 e2e:	08 95       	ret

00000e30 <__ultoa_invert>:
 e30:	fa 01       	movw	r30, r20
 e32:	aa 27       	eor	r26, r26
 e34:	28 30       	cpi	r18, 0x08	; 8
 e36:	51 f1       	breq	.+84     	; 0xe8c <__ultoa_invert+0x5c>
 e38:	20 31       	cpi	r18, 0x10	; 16
 e3a:	81 f1       	breq	.+96     	; 0xe9c <__ultoa_invert+0x6c>
 e3c:	e8 94       	clt
 e3e:	6f 93       	push	r22
 e40:	6e 7f       	andi	r22, 0xFE	; 254
 e42:	6e 5f       	subi	r22, 0xFE	; 254
 e44:	7f 4f       	sbci	r23, 0xFF	; 255
 e46:	8f 4f       	sbci	r24, 0xFF	; 255
 e48:	9f 4f       	sbci	r25, 0xFF	; 255
 e4a:	af 4f       	sbci	r26, 0xFF	; 255
 e4c:	b1 e0       	ldi	r27, 0x01	; 1
 e4e:	3e d0       	rcall	.+124    	; 0xecc <__ultoa_invert+0x9c>
 e50:	b4 e0       	ldi	r27, 0x04	; 4
 e52:	3c d0       	rcall	.+120    	; 0xecc <__ultoa_invert+0x9c>
 e54:	67 0f       	add	r22, r23
 e56:	78 1f       	adc	r23, r24
 e58:	89 1f       	adc	r24, r25
 e5a:	9a 1f       	adc	r25, r26
 e5c:	a1 1d       	adc	r26, r1
 e5e:	68 0f       	add	r22, r24
 e60:	79 1f       	adc	r23, r25
 e62:	8a 1f       	adc	r24, r26
 e64:	91 1d       	adc	r25, r1
 e66:	a1 1d       	adc	r26, r1
 e68:	6a 0f       	add	r22, r26
 e6a:	71 1d       	adc	r23, r1
 e6c:	81 1d       	adc	r24, r1
 e6e:	91 1d       	adc	r25, r1
 e70:	a1 1d       	adc	r26, r1
 e72:	20 d0       	rcall	.+64     	; 0xeb4 <__ultoa_invert+0x84>
 e74:	09 f4       	brne	.+2      	; 0xe78 <__ultoa_invert+0x48>
 e76:	68 94       	set
 e78:	3f 91       	pop	r19
 e7a:	2a e0       	ldi	r18, 0x0A	; 10
 e7c:	26 9f       	mul	r18, r22
 e7e:	11 24       	eor	r1, r1
 e80:	30 19       	sub	r19, r0
 e82:	30 5d       	subi	r19, 0xD0	; 208
 e84:	31 93       	st	Z+, r19
 e86:	de f6       	brtc	.-74     	; 0xe3e <__ultoa_invert+0xe>
 e88:	cf 01       	movw	r24, r30
 e8a:	08 95       	ret
 e8c:	46 2f       	mov	r20, r22
 e8e:	47 70       	andi	r20, 0x07	; 7
 e90:	40 5d       	subi	r20, 0xD0	; 208
 e92:	41 93       	st	Z+, r20
 e94:	b3 e0       	ldi	r27, 0x03	; 3
 e96:	0f d0       	rcall	.+30     	; 0xeb6 <__ultoa_invert+0x86>
 e98:	c9 f7       	brne	.-14     	; 0xe8c <__ultoa_invert+0x5c>
 e9a:	f6 cf       	rjmp	.-20     	; 0xe88 <__ultoa_invert+0x58>
 e9c:	46 2f       	mov	r20, r22
 e9e:	4f 70       	andi	r20, 0x0F	; 15
 ea0:	40 5d       	subi	r20, 0xD0	; 208
 ea2:	4a 33       	cpi	r20, 0x3A	; 58
 ea4:	18 f0       	brcs	.+6      	; 0xeac <__ultoa_invert+0x7c>
 ea6:	49 5d       	subi	r20, 0xD9	; 217
 ea8:	31 fd       	sbrc	r19, 1
 eaa:	40 52       	subi	r20, 0x20	; 32
 eac:	41 93       	st	Z+, r20
 eae:	02 d0       	rcall	.+4      	; 0xeb4 <__ultoa_invert+0x84>
 eb0:	a9 f7       	brne	.-22     	; 0xe9c <__ultoa_invert+0x6c>
 eb2:	ea cf       	rjmp	.-44     	; 0xe88 <__ultoa_invert+0x58>
 eb4:	b4 e0       	ldi	r27, 0x04	; 4
 eb6:	a6 95       	lsr	r26
 eb8:	97 95       	ror	r25
 eba:	87 95       	ror	r24
 ebc:	77 95       	ror	r23
 ebe:	67 95       	ror	r22
 ec0:	ba 95       	dec	r27
 ec2:	c9 f7       	brne	.-14     	; 0xeb6 <__ultoa_invert+0x86>
 ec4:	00 97       	sbiw	r24, 0x00	; 0
 ec6:	61 05       	cpc	r22, r1
 ec8:	71 05       	cpc	r23, r1
 eca:	08 95       	ret
 ecc:	9b 01       	movw	r18, r22
 ece:	ac 01       	movw	r20, r24
 ed0:	0a 2e       	mov	r0, r26
 ed2:	06 94       	lsr	r0
 ed4:	57 95       	ror	r21
 ed6:	47 95       	ror	r20
 ed8:	37 95       	ror	r19
 eda:	27 95       	ror	r18
 edc:	ba 95       	dec	r27
 ede:	c9 f7       	brne	.-14     	; 0xed2 <__ultoa_invert+0xa2>
 ee0:	62 0f       	add	r22, r18
 ee2:	73 1f       	adc	r23, r19
 ee4:	84 1f       	adc	r24, r20
 ee6:	95 1f       	adc	r25, r21
 ee8:	a0 1d       	adc	r26, r0
 eea:	08 95       	ret

00000eec <__prologue_saves__>:
 eec:	2f 92       	push	r2
 eee:	3f 92       	push	r3
 ef0:	4f 92       	push	r4
 ef2:	5f 92       	push	r5
 ef4:	6f 92       	push	r6
 ef6:	7f 92       	push	r7
 ef8:	8f 92       	push	r8
 efa:	9f 92       	push	r9
 efc:	af 92       	push	r10
 efe:	bf 92       	push	r11
 f00:	cf 92       	push	r12
 f02:	df 92       	push	r13
 f04:	ef 92       	push	r14
 f06:	ff 92       	push	r15
 f08:	0f 93       	push	r16
 f0a:	1f 93       	push	r17
 f0c:	cf 93       	push	r28
 f0e:	df 93       	push	r29
 f10:	cd b7       	in	r28, 0x3d	; 61
 f12:	de b7       	in	r29, 0x3e	; 62
 f14:	ca 1b       	sub	r28, r26
 f16:	db 0b       	sbc	r29, r27
 f18:	0f b6       	in	r0, 0x3f	; 63
 f1a:	f8 94       	cli
 f1c:	de bf       	out	0x3e, r29	; 62
 f1e:	0f be       	out	0x3f, r0	; 63
 f20:	cd bf       	out	0x3d, r28	; 61
 f22:	09 94       	ijmp

00000f24 <__epilogue_restores__>:
 f24:	2a 88       	ldd	r2, Y+18	; 0x12
 f26:	39 88       	ldd	r3, Y+17	; 0x11
 f28:	48 88       	ldd	r4, Y+16	; 0x10
 f2a:	5f 84       	ldd	r5, Y+15	; 0x0f
 f2c:	6e 84       	ldd	r6, Y+14	; 0x0e
 f2e:	7d 84       	ldd	r7, Y+13	; 0x0d
 f30:	8c 84       	ldd	r8, Y+12	; 0x0c
 f32:	9b 84       	ldd	r9, Y+11	; 0x0b
 f34:	aa 84       	ldd	r10, Y+10	; 0x0a
 f36:	b9 84       	ldd	r11, Y+9	; 0x09
 f38:	c8 84       	ldd	r12, Y+8	; 0x08
 f3a:	df 80       	ldd	r13, Y+7	; 0x07
 f3c:	ee 80       	ldd	r14, Y+6	; 0x06
 f3e:	fd 80       	ldd	r15, Y+5	; 0x05
 f40:	0c 81       	ldd	r16, Y+4	; 0x04
 f42:	1b 81       	ldd	r17, Y+3	; 0x03
 f44:	aa 81       	ldd	r26, Y+2	; 0x02
 f46:	b9 81       	ldd	r27, Y+1	; 0x01
 f48:	ce 0f       	add	r28, r30
 f4a:	d1 1d       	adc	r29, r1
 f4c:	0f b6       	in	r0, 0x3f	; 63
 f4e:	f8 94       	cli
 f50:	de bf       	out	0x3e, r29	; 62
 f52:	0f be       	out	0x3f, r0	; 63
 f54:	cd bf       	out	0x3d, r28	; 61
 f56:	ed 01       	movw	r28, r26
 f58:	08 95       	ret

00000f5a <_exit>:
 f5a:	f8 94       	cli

00000f5c <__stop_program>:
 f5c:	ff cf       	rjmp	.-2      	; 0xf5c <__stop_program>
