
SignalGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a26  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081a  00000000  00000000  00000d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cb  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000461  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000287  00000000  00000000  00001fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_1>
   8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Init>:
uint8_t I2C_ReadNACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
	while ((TWCR & (1<<TWINT)) == 0);
	return TWDR;
}
  90:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  94:	88 e9       	ldi	r24, 0x98	; 152
  96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a0:	08 95       	ret

000000a2 <I2C_Start>:
  a2:	84 ea       	ldi	r24, 0xA4	; 164
  a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ac:	88 23       	and	r24, r24
  ae:	e4 f7       	brge	.-8      	; 0xa8 <I2C_Start+0x6>
  b0:	08 95       	ret

000000b2 <I2C_Stop>:
  b2:	84 e9       	ldi	r24, 0x94	; 148
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b8:	08 95       	ret

000000ba <I2C_Write>:
  ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  be:	84 e8       	ldi	r24, 0x84	; 132
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	88 23       	and	r24, r24
  ca:	e4 f7       	brge	.-8      	; 0xc4 <I2C_Write+0xa>
  cc:	08 95       	ret

000000ce <I2C_GetStatus>:
*/
uint8_t I2C_GetStatus(void)
{
	uint8_t status;
	//mask status
	status = TWSR & 0xF8;
  ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	return status;
}
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	08 95       	ret

000000d6 <I2C_WriteByte>:
/**
*	7-bit addressing mode
*	Returns 0 on success and status code on failure
*/
uint8_t I2C_WriteByte(uint8_t addr, uint8_t data)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	c8 2f       	mov	r28, r24
  dc:	d6 2f       	mov	r29, r22
	uint8_t status = 0;
	
	I2C_Start();
  de:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_Start>
	status = I2C_GetStatus();
  e2:	0e 94 67 00 	call	0xce	; 0xce <I2C_GetStatus>
	if (status != 0x08)
  e6:	88 30       	cpi	r24, 0x08	; 8
  e8:	91 f4       	brne	.+36     	; 0x10e <I2C_WriteByte+0x38>
		return(status);
	
	addr &= 0b11111110;		// setting LSB to 0 Write mode.
	
	I2C_Write(addr);
  ea:	8c 2f       	mov	r24, r28
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	0e 94 5d 00 	call	0xba	; 0xba <I2C_Write>
	status = I2C_GetStatus();
  f2:	0e 94 67 00 	call	0xce	; 0xce <I2C_GetStatus>
	if (status != 0x18)
  f6:	88 31       	cpi	r24, 0x18	; 24
  f8:	51 f4       	brne	.+20     	; 0x10e <I2C_WriteByte+0x38>
		return(status);	
		
	I2C_Write(data);
  fa:	8d 2f       	mov	r24, r29
  fc:	0e 94 5d 00 	call	0xba	; 0xba <I2C_Write>
	status = I2C_GetStatus();
 100:	0e 94 67 00 	call	0xce	; 0xce <I2C_GetStatus>
	if (status != 0x28)
 104:	88 32       	cpi	r24, 0x28	; 40
 106:	19 f4       	brne	.+6      	; 0x10e <I2C_WriteByte+0x38>
		return(status);
	
	I2C_Stop();
 108:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Stop>
	
	return(0);	
 10c:	80 e0       	ldi	r24, 0x00	; 0
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <__vector_1>:
volatile uint8_t B_trace = 0;

volatile uint8_t count = 0;

ISR(INT0_vect) 
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
	PORTD |= (0x01 << 7);	// set pin 8 high
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	80 68       	ori	r24, 0x80	; 128
 124:	8b b9       	out	0x0b, r24	; 11
	
	if (B_trace == 0x01)
 126:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <B_trace>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	51 f4       	brne	.+20     	; 0x142 <__vector_1+0x2e>
	{
		count--;
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	81 50       	subi	r24, 0x01	; 1
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		A_trace = 0;
 138:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <A_trace>
		B_trace = 0;
 13c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <B_trace>
 140:	03 c0       	rjmp	.+6      	; 0x148 <__vector_1+0x34>
	}
	else
	{
		A_trace = 0x01;	
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <A_trace>
	}
}
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_2>:

ISR(INT1_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
	PORTD &= ~(0x01 << 7);	// set pin 8 low
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 77       	andi	r24, 0x7F	; 127
 164:	8b b9       	out	0x0b, r24	; 11
	
	if (A_trace == 0x01)
 166:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A_trace>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	51 f4       	brne	.+20     	; 0x182 <__vector_2+0x2e>
	{
		count++;
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		A_trace = 0;
 178:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <A_trace>
		B_trace = 0;
 17c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <B_trace>
 180:	03 c0       	rjmp	.+6      	; 0x188 <__vector_2+0x34>
	}
	else
	{
		B_trace = 0x01;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <B_trace>
	}
}
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <main>:
int main(void)
{	
	uint8_t status = 0;
	uint8_t *str = (uint8_t*)"Jocke";
	
	DDRD |= 0xff;
 194:	8a b1       	in	r24, 0x0a	; 10
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 19a:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0xc>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x12>
 1a6:	00 00       	nop
		
	_delay_ms(1);		// delay so the LCD can initialize
	
	I2C_Init();
 1a8:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Init>
	
	if ((status = I2C_WriteByte(0x50, 0x41)) != 0)	// send an 'A' to LCD
 1ac:	61 e4       	ldi	r22, 0x41	; 65
 1ae:	80 e5       	ldi	r24, 0x50	; 80
 1b0:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_WriteByte>
 1b4:	88 23       	and	r24, r24
 1b6:	19 f0       	breq	.+6      	; 0x1be <main+0x2a>
	{
		PORTD = ~(status);
 1b8:	80 95       	com	r24
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <main+0x2e>
	}
	else
		PORTD = 0xff;	// means all leds are off. status OK! ;)
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x2e>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
