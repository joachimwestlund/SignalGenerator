
SignalGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000f82  00001016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800112  00800112  00001028  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001106  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a16  00000000  00000000  000022fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a37  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cf  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ca  00000000  00000000  00003faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004879  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  9e:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <AD9833_Init>:

#include "AD9833.h"

void AD9833_Init(void)
{
	mclk = 25000000;	// 25Mhz external oscillator
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	98 e7       	ldi	r25, 0x78	; 120
  aa:	ad e7       	ldi	r26, 0x7D	; 125
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mclk>
  b2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <mclk+0x1>
  b6:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <mclk+0x2>
  ba:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <mclk+0x3>
	controlRegister = 0x2000;
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e2       	ldi	r25, 0x20	; 32
  c2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
  c6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
	freqRegister = 0x4000;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e4       	ldi	r25, 0x40	; 64
  ce:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <freqRegister+0x1>
  d2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <freqRegister>
	phaseRegister = 0xc000;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 ec       	ldi	r25, 0xC0	; 192
  da:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <phaseRegister+0x1>
  de:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <phaseRegister>
	freq = 1000;	// 1kHz
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <freq>
  ee:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <freq+0x1>
  f2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <freq+0x2>
  f6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <freq+0x3>
	phase = 0;
  fa:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <phase+0x1>
  fe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <phase>
	
	SPI_Init();
 102:	0e 94 03 03 	call	0x606	; 0x606 <SPI_Init>
 106:	08 95       	ret

00000108 <AD9833_WriteData>:
}


void AD9833_WriteData(uint16_t data)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	c8 2f       	mov	r28, r24
 10e:	d9 2f       	mov	r29, r25
	*/
	uint8_t tmp = 0;
	
	// get high byte of data
	tmp = (uint8_t)(data >> 8);
	SPI_Start_Transfer();
 110:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_Start_Transfer>
	SPI_Tranceiver(tmp);
 114:	8d 2f       	mov	r24, r29
 116:	0e 94 1d 03 	call	0x63a	; 0x63a <SPI_Tranceiver>
	// get low byte of data
	tmp = (uint8_t)(data & 0x00ff);
	SPI_Tranceiver(tmp);
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 1d 03 	call	0x63a	; 0x63a <SPI_Tranceiver>
	SPI_End_Transfer();
 120:	0e 94 23 03 	call	0x646	; 0x646 <SPI_End_Transfer>
	
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <AD9833_Reset>:
/**
*	reset: 1 means set reset and 0 means not reset. or unreset.
*/
void AD9833_Reset(uint8_t reset)
{
	if (reset == 0)
 12a:	81 11       	cpse	r24, r1
 12c:	0a c0       	rjmp	.+20     	; 0x142 <AD9833_Reset+0x18>
	{
		controlRegister &= 0xFEFF;	// set D8 to 0
 12e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 132:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 136:	9e 7f       	andi	r25, 0xFE	; 254
 138:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 13c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
 140:	0b c0       	rjmp	.+22     	; 0x158 <AD9833_Reset+0x2e>
	}
	else if (reset == 1)
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	49 f4       	brne	.+18     	; 0x158 <AD9833_Reset+0x2e>
	{
		controlRegister |= 0x0100;	// set D8 to 1
 146:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 14a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 14e:	91 60       	ori	r25, 0x01	; 1
 150:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 154:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
	}
	AD9833_WriteData(controlRegister);
 158:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 15c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 160:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
 164:	08 95       	ret

00000166 <AD9833_SetFreq>:
}

void AD9833_SetFreq(unsigned long _freq)
{
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
	if (_freq < 0)					// frequency cant be set to lower than 0 Hz
	{
		fRegister = 0;
		freq = 0;
	}
	else if(_freq > (mclk /2))		// frequency cant be set to higher than mclk/2
 17a:	c0 90 26 01 	lds	r12, 0x0126	; 0x800126 <mclk>
 17e:	d0 90 27 01 	lds	r13, 0x0127	; 0x800127 <mclk+0x1>
 182:	e0 90 28 01 	lds	r14, 0x0128	; 0x800128 <mclk+0x2>
 186:	f0 90 29 01 	lds	r15, 0x0129	; 0x800129 <mclk+0x3>
 18a:	97 01       	movw	r18, r14
 18c:	86 01       	movw	r16, r12
 18e:	36 95       	lsr	r19
 190:	27 95       	ror	r18
 192:	17 95       	ror	r17
 194:	07 95       	ror	r16
 196:	06 17       	cp	r16, r22
 198:	17 07       	cpc	r17, r23
 19a:	28 07       	cpc	r18, r24
 19c:	39 07       	cpc	r19, r25
 19e:	68 f4       	brcc	.+26     	; 0x1ba <AD9833_SetFreq+0x54>
	{
		fRegister = pow(2,28) - 1;
		freq = mclk / 2;
 1a0:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <freq>
 1a4:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <freq+0x1>
 1a8:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <freq+0x2>
 1ac:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <freq+0x3>
		fRegister = 0;
		freq = 0;
	}
	else if(_freq > (mclk /2))		// frequency cant be set to higher than mclk/2
	{
		fRegister = pow(2,28) - 1;
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e1       	ldi	r25, 0x10	; 16
 1b8:	1e c0       	rjmp	.+60     	; 0x1f6 <AD9833_SetFreq+0x90>
		freq = mclk / 2;
	}
	else							// all good, then we set the new frequency.
	{
		freq = _freq;
 1ba:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <freq>
 1be:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <freq+0x1>
 1c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <freq+0x2>
 1c6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <freq+0x3>
		fRegister = (freq * pow(2,28)) / mclk;
 1ca:	0e 94 cc 03 	call	0x798	; 0x798 <__floatunsisf>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e8       	ldi	r20, 0x80	; 128
 1d4:	5d e4       	ldi	r21, 0x4D	; 77
 1d6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__mulsf3>
 1da:	4b 01       	movw	r8, r22
 1dc:	5c 01       	movw	r10, r24
 1de:	c7 01       	movw	r24, r14
 1e0:	b6 01       	movw	r22, r12
 1e2:	0e 94 cc 03 	call	0x798	; 0x798 <__floatunsisf>
 1e6:	9b 01       	movw	r18, r22
 1e8:	ac 01       	movw	r20, r24
 1ea:	c5 01       	movw	r24, r10
 1ec:	b4 01       	movw	r22, r8
 1ee:	0e 94 2b 03 	call	0x656	; 0x656 <__divsf3>
 1f2:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixunssfsi>
	}
	
	MSW = ((uint16_t)(fRegister >> 14)) | freqRegister;
 1f6:	8b 01       	movw	r16, r22
 1f8:	9c 01       	movw	r18, r24
 1fa:	0f 2e       	mov	r0, r31
 1fc:	fe e0       	ldi	r31, 0x0E	; 14
 1fe:	36 95       	lsr	r19
 200:	27 95       	ror	r18
 202:	17 95       	ror	r17
 204:	07 95       	ror	r16
 206:	fa 95       	dec	r31
 208:	d1 f7       	brne	.-12     	; 0x1fe <AD9833_SetFreq+0x98>
 20a:	f0 2d       	mov	r31, r0
 20c:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <freqRegister>
 210:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <freqRegister+0x1>
 214:	04 2b       	or	r16, r20
 216:	15 2b       	or	r17, r21
	LSW = ((uint16_t)(fRegister & 0x3FFF)) | freqRegister; 
 218:	cb 01       	movw	r24, r22
 21a:	9f 73       	andi	r25, 0x3F	; 63
	
	AD9833_WriteData(LSW);
 21c:	84 2b       	or	r24, r20
 21e:	95 2b       	or	r25, r21
 220:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
	AD9833_WriteData(MSW);
 224:	c8 01       	movw	r24, r16
 226:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
}
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	df 90       	pop	r13
 234:	cf 90       	pop	r12
 236:	bf 90       	pop	r11
 238:	af 90       	pop	r10
 23a:	9f 90       	pop	r9
 23c:	8f 90       	pop	r8
 23e:	08 95       	ret

00000240 <AD9833_SetMode>:

void AD9833_SetMode(int mode) {
	switch (mode) {
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	91 05       	cpc	r25, r1
 244:	79 f0       	breq	.+30     	; 0x264 <AD9833_SetMode+0x24>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	91 05       	cpc	r25, r1
 24a:	b9 f0       	breq	.+46     	; 0x27a <AD9833_SetMode+0x3a>
 24c:	89 2b       	or	r24, r25
 24e:	f9 f4       	brne	.+62     	; 0x28e <AD9833_SetMode+0x4e>
		case 0: {
			controlRegister &= 0xFFDD; // Output sine: D5-0 and D1-0
 250:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 254:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 258:	8d 7d       	andi	r24, 0xDD	; 221
 25a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 25e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		} break;
 262:	15 c0       	rjmp	.+42     	; 0x28e <AD9833_SetMode+0x4e>
		case 1: {
			controlRegister &= 0xFFDF; // Output triangle: D5-0 and D1-1
 264:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 268:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 26c:	8f 7d       	andi	r24, 0xDF	; 223
			controlRegister |= 0x0002;
 26e:	82 60       	ori	r24, 0x02	; 2
 270:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 274:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		} break;
 278:	0a c0       	rjmp	.+20     	; 0x28e <AD9833_SetMode+0x4e>
		case 2: {
			controlRegister &= 0xFFFD; // Output clock (rectangle): D5-1 and D1-0
 27a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 27e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 282:	8d 7f       	andi	r24, 0xFD	; 253
			controlRegister |= 0x0020;
 284:	80 62       	ori	r24, 0x20	; 32
 286:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 28a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		} break;
	}
	AD9833_WriteData(controlRegister);
 28e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 292:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 296:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
 29a:	08 95       	ret

0000029c <AD9833_SetPhase>:
	
	uint16_t phaseData;
	uint16_t LSW;
	
	// Phase cannot be negative
	if (_phase < 0) {
 29c:	99 23       	and	r25, r25
 29e:	2c f4       	brge	.+10     	; 0x2aa <AD9833_SetPhase+0xe>
		phase = 0;
 2a0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <phase+0x1>
 2a4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <phase>
 2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <AD9833_SetPhase+0x2c>
	}
	// Phase maximum is 2^12
	else if (_phase >= 4096) {
 2aa:	81 15       	cp	r24, r1
 2ac:	20 e1       	ldi	r18, 0x10	; 16
 2ae:	92 07       	cpc	r25, r18
 2b0:	3c f0       	brlt	.+14     	; 0x2c0 <AD9833_SetPhase+0x24>
		phase = 4096 - 1;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <phase+0x1>
 2ba:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <phase>
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <AD9833_SetPhase+0x2c>
	}
	// If all is good, set the new phase value
	else {
		phase = _phase;
 2c0:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <phase+0x1>
 2c4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <phase>
	}
	// Extract the 12 bits from the freqReg and set D15-1, D14-1, D13-0, D12-X to
	// put data in PHASE0/1 register
	
	phaseData = phase | phaseRegister;
 2c8:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <phase>
 2cc:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <phase+0x1>
 2d0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <phaseRegister>
 2d4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <phaseRegister+0x1>
	LSW = (phaseData & 0x3FFF) | phaseRegister;
	
	AD9833_WriteData(phaseData);			// This might be wrong
 2d8:	82 2b       	or	r24, r18
 2da:	93 2b       	or	r25, r19
 2dc:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
 2e0:	08 95       	ret

000002e2 <AD9833_SetFreqPhasePRegister>:
}

// reg0 or reg1
void AD9833_SetFreqPhasePRegister(int reg) {
	if (reg == 0) 
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	b1 f4       	brne	.+44     	; 0x312 <AD9833_SetFreqPhasePRegister+0x30>
	{
		controlRegister &= 0xF3FF;			// Set D11 and D10 in control register to 0
 2e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 2ea:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 2ee:	93 7f       	andi	r25, 0xF3	; 243
 2f0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 2f4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		freqRegister = 0x4000;				// Set D15 to 0 and D14 to 1 in a variable that will
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e4       	ldi	r25, 0x40	; 64
 2fc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <freqRegister+0x1>
 300:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <freqRegister>
											// later choose the FREQ0 register
		phaseRegister =	0xC000;				// Set D15 to 1 and D14 to 1 and D13 to 0 for the PHASE register
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 ec       	ldi	r25, 0xC0	; 192
 308:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <phaseRegister+0x1>
 30c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <phaseRegister>
 310:	17 c0       	rjmp	.+46     	; 0x340 <AD9833_SetFreqPhasePRegister+0x5e>
		
	} 
	else if (reg == 1) 
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	a9 f4       	brne	.+42     	; 0x340 <AD9833_SetFreqPhasePRegister+0x5e>
	{
		controlRegister |= 0x0C00;			// Set D11 and D10 in control register to 1
 316:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 31a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 31e:	9c 60       	ori	r25, 0x0C	; 12
 320:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <controlRegister+0x1>
 324:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <controlRegister>
		freqRegister = 0x8000;				// Set D15 to 1 and D14 to 0 in a variable that will
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e8       	ldi	r25, 0x80	; 128
 32c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <freqRegister+0x1>
 330:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <freqRegister>
											// later choose the FREQ1 register
		phaseRegister =	0xD000;				// Set D15 to 1 and D14 to 1 and D13 to 1 for the PHASE register
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 ed       	ldi	r25, 0xD0	; 208
 338:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <phaseRegister+0x1>
 33c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <phaseRegister>
	}
	AD9833_WriteData(controlRegister);
 340:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <controlRegister>
 344:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <controlRegister+0x1>
 348:	0e 94 84 00 	call	0x108	; 0x108 <AD9833_WriteData>
 34c:	08 95       	ret

0000034e <I2C_Init>:
		return(status);
	
	I2C_Stop();
	
	return(0);	
}
 34e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 352:	88 e9       	ldi	r24, 0x98	; 152
 354:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 358:	84 e0       	ldi	r24, 0x04	; 4
 35a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 35e:	08 95       	ret

00000360 <I2C_Start>:
 360:	84 ea       	ldi	r24, 0xA4	; 164
 362:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 366:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 36a:	88 23       	and	r24, r24
 36c:	e4 f7       	brge	.-8      	; 0x366 <I2C_Start+0x6>
 36e:	08 95       	ret

00000370 <I2C_Stop>:
 370:	84 e9       	ldi	r24, 0x94	; 148
 372:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 376:	08 95       	ret

00000378 <I2C_Write>:
 378:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 37c:	84 e8       	ldi	r24, 0x84	; 132
 37e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 382:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 386:	88 23       	and	r24, r24
 388:	e4 f7       	brge	.-8      	; 0x382 <I2C_Write+0xa>
 38a:	08 95       	ret

0000038c <I2C_GetStatus>:
 38c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 390:	88 7f       	andi	r24, 0xF8	; 248
 392:	08 95       	ret

00000394 <I2C_WriteString>:
/**
*	7-bit addressing mode
*	Returns 0 on success and status code on failure
*/
uint8_t I2C_WriteString(uint8_t addr, uint8_t *data, uint8_t size)
{
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ff 92       	push	r15
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	c8 2f       	mov	r28, r24
 3a4:	8b 01       	movw	r16, r22
 3a6:	f4 2e       	mov	r15, r20
	uint8_t status = 0;
	uint8_t i = 0;
	
	I2C_Start();
 3a8:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Start>
	status = I2C_GetStatus();
 3ac:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x08)
 3b0:	88 30       	cpi	r24, 0x08	; 8
 3b2:	f9 f4       	brne	.+62     	; 0x3f2 <I2C_WriteString+0x5e>
		return(status);

	addr &= 0b11111110;		// write mode
	
	I2C_Write(addr);
 3b4:	8c 2f       	mov	r24, r28
 3b6:	8e 7f       	andi	r24, 0xFE	; 254
 3b8:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
	status = I2C_GetStatus();
 3bc:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
 3c0:	c8 2f       	mov	r28, r24
	if (status != 0x18)
 3c2:	88 31       	cpi	r24, 0x18	; 24
 3c4:	a1 f4       	brne	.+40     	; 0x3ee <I2C_WriteString+0x5a>
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
 3c8:	0c c0       	rjmp	.+24     	; 0x3e2 <I2C_WriteString+0x4e>
		return(status);
	
	for (i = 0; i < size; i++)
	{
		I2C_Write(*data++);
 3ca:	68 01       	movw	r12, r16
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	c8 1a       	sub	r12, r24
 3d0:	d8 0a       	sbc	r13, r24
 3d2:	f8 01       	movw	r30, r16
 3d4:	80 81       	ld	r24, Z
 3d6:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
		if (status != 0x18)
 3da:	c8 31       	cpi	r28, 0x18	; 24
 3dc:	49 f4       	brne	.+18     	; 0x3f0 <I2C_WriteString+0x5c>
	I2C_Write(addr);
	status = I2C_GetStatus();
	if (status != 0x18)
		return(status);
	
	for (i = 0; i < size; i++)
 3de:	df 5f       	subi	r29, 0xFF	; 255
	{
		I2C_Write(*data++);
 3e0:	86 01       	movw	r16, r12
	I2C_Write(addr);
	status = I2C_GetStatus();
	if (status != 0x18)
		return(status);
	
	for (i = 0; i < size; i++)
 3e2:	df 15       	cp	r29, r15
 3e4:	90 f3       	brcs	.-28     	; 0x3ca <I2C_WriteString+0x36>
		I2C_Write(*data++);
		if (status != 0x18)
			return(status);
	}
	
	I2C_Stop();
 3e6:	0e 94 b8 01 	call	0x370	; 0x370 <I2C_Stop>
	
	return(0);
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <I2C_WriteString+0x5e>
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <I2C_WriteString+0x5e>
	
	for (i = 0; i < size; i++)
	{
		I2C_Write(*data++);
		if (status != 0x18)
			return(status);
 3f0:	8c 2f       	mov	r24, r28
	}
	
	I2C_Stop();
	
	return(0);
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	08 95       	ret

00000402 <__vector_5>:
char set_count_buf[4] = {0};

volatile uint8_t updateLCD = 1;

ISR (PCINT2_vect)
{
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	8f 93       	push	r24
	if ((PIND & (1 << PIND5)) != (1 << PIND5))				// if interrupt pin is low
 40e:	4d 99       	sbic	0x09, 5	; 9
 410:	10 c0       	rjmp	.+32     	; 0x432 <__vector_5+0x30>
	{
		if ((PIND & (1 << PIND6)) != (1 << PIND6))			// and if the pd6 pin is low then the direction is left
 412:	4e 99       	sbic	0x09, 6	; 9
 414:	06 c0       	rjmp	.+12     	; 0x422 <__vector_5+0x20>
		{
			count--;	
 416:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count>
 41a:	81 50       	subi	r24, 0x01	; 1
 41c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <count>
 420:	05 c0       	rjmp	.+10     	; 0x42c <__vector_5+0x2a>
		}
		else
		{
			count++;										// if pd6 is high then the direction is right
 422:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count>
 426:	8f 5f       	subi	r24, 0xFF	; 255
 428:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <count>
		}
		updateLCD = 1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 432:	8f 91       	pop	r24
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <main>:
int main(void)
{	
	uint8_t status = 0;
	uint8_t *str = (uint8_t*)"12500000 Hz";
	
	PORTB |= (1 << DDB0);	// turn led on
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	81 60       	ori	r24, 0x01	; 1
 442:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1 << DDB0);
 444:	84 b1       	in	r24, 0x04	; 4
 446:	81 60       	ori	r24, 0x01	; 1
 448:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44a:	2f ef       	ldi	r18, 0xFF	; 255
 44c:	81 ee       	ldi	r24, 0xE1	; 225
 44e:	94 e0       	ldi	r25, 0x04	; 4
 450:	21 50       	subi	r18, 0x01	; 1
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <main+0x12>
 458:	00 c0       	rjmp	.+0      	; 0x45a <main+0x1c>
 45a:	00 00       	nop
	
	_delay_ms(100);		// delay so the LCD can initialize
	
	I2C_Init();
 45c:	0e 94 a7 01 	call	0x34e	; 0x34e <I2C_Init>
	
	LCD_WriteCommand(0x50, 0x51, 0x00);
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	61 e5       	ldi	r22, 0x51	; 81
 464:	80 e5       	ldi	r24, 0x50	; 80
 466:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteCommand>
 46a:	8f e3       	ldi	r24, 0x3F	; 63
 46c:	9f e1       	ldi	r25, 0x1F	; 31
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <main+0x30>
 472:	00 c0       	rjmp	.+0      	; 0x474 <main+0x36>
 474:	00 00       	nop
	_delay_ms(2);
	if ((status = I2C_WriteString(0x50, str, strlen((char *)str))) != 0)
 476:	4b e0       	ldi	r20, 0x0B	; 11
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	71 e0       	ldi	r23, 0x01	; 1
 47c:	80 e5       	ldi	r24, 0x50	; 80
 47e:	0e 94 ca 01 	call	0x394	; 0x394 <I2C_WriteString>
 482:	81 11       	cpse	r24, r1
 484:	ff cf       	rjmp	.-2      	; 0x484 <main+0x46>
	{
		while(1) {}											// Halt program
	}

	// Lets enable PCINT21 on pin PD5
	DDRD &= 0b11011111;										// pin5 port d is input
 486:	8a b1       	in	r24, 0x0a	; 10
 488:	8f 7d       	andi	r24, 0xDF	; 223
 48a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b00100000;									// enable pull-up on pin
 48c:	8b b1       	in	r24, 0x0b	; 11
 48e:	80 62       	ori	r24, 0x20	; 32
 490:	8b b9       	out	0x0b, r24	; 11
	PCICR = (1 << PCIE2);
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 |= 0b00100000;									// pin pd5 enabled for interrupt. pcint21 as interrupt.
 498:	ed e6       	ldi	r30, 0x6D	; 109
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	80 62       	ori	r24, 0x20	; 32
 4a0:	80 83       	st	Z, r24
	
	sei();
 4a2:	78 94       	sei

	AD9833_Init();
 4a4:	0e 94 53 00 	call	0xa6	; 0xa6 <AD9833_Init>
	
	AD9833_Reset(1);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 95 00 	call	0x12a	; 0x12a <AD9833_Reset>
	AD9833_SetFreq(1000);				// 1kHz
 4ae:	68 ee       	ldi	r22, 0xE8	; 232
 4b0:	73 e0       	ldi	r23, 0x03	; 3
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 b3 00 	call	0x166	; 0x166 <AD9833_SetFreq>
	AD9833_SetPhase(0);					// 0 phase shift
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 4e 01 	call	0x29c	; 0x29c <AD9833_SetPhase>
	AD9833_SetFreqPhasePRegister(0);	// freq0 and phase0 registers
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <AD9833_SetFreqPhasePRegister>
	AD9833_SetMode(0);					// Sine
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 20 01 	call	0x240	; 0x240 <AD9833_SetMode>
	AD9833_Reset(0);
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 95 00 	call	0x12a	; 0x12a <AD9833_Reset>
	
	
    while (1) 
    {
		if ((PIND & (1 << PIND7)) != (1 << PIND7))			// is pin7 low?
 4d8:	4f 99       	sbic	0x09, 7	; 9
 4da:	07 c0       	rjmp	.+14     	; 0x4ea <main+0xac>
		{
				set_count = count;
 4dc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count>
 4e0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <set_count>
				updateLCD = 1;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if (updateLCD == 1)
 4ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	99 f7       	brne	.-26     	; 0x4d8 <main+0x9a>
 4f2:	8f e3       	ldi	r24, 0x3F	; 63
 4f4:	9f e1       	ldi	r25, 0x1F	; 31
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <main+0xb8>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <main+0xbe>
 4fc:	00 00       	nop
		{
			_delay_ms(2);
			LCD_WriteCommand(0x50, 0x45, 0x40);
 4fe:	40 e4       	ldi	r20, 0x40	; 64
 500:	65 e4       	ldi	r22, 0x45	; 69
 502:	80 e5       	ldi	r24, 0x50	; 80
 504:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteCommand>
			snprintf(count_buf, 0x04, "%03d", count);
 508:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count>
 50c:	1f 92       	push	r1
 50e:	8f 93       	push	r24
 510:	cd e0       	ldi	r28, 0x0D	; 13
 512:	d1 e0       	ldi	r29, 0x01	; 1
 514:	df 93       	push	r29
 516:	cf 93       	push	r28
 518:	1f 92       	push	r1
 51a:	14 e0       	ldi	r17, 0x04	; 4
 51c:	1f 93       	push	r17
 51e:	86 e1       	ldi	r24, 0x16	; 22
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	9f 93       	push	r25
 524:	8f 93       	push	r24
 526:	0e 94 c7 04 	call	0x98e	; 0x98e <snprintf>
 52a:	8f e3       	ldi	r24, 0x3F	; 63
 52c:	9f e1       	ldi	r25, 0x1F	; 31
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <main+0xf0>
 532:	00 c0       	rjmp	.+0      	; 0x534 <main+0xf6>
 534:	00 00       	nop
			_delay_ms(2);
			I2C_WriteString(0x50, (uint8_t *)count_buf, 0x03);
 536:	43 e0       	ldi	r20, 0x03	; 3
 538:	66 e1       	ldi	r22, 0x16	; 22
 53a:	71 e0       	ldi	r23, 0x01	; 1
 53c:	80 e5       	ldi	r24, 0x50	; 80
 53e:	0e 94 ca 01 	call	0x394	; 0x394 <I2C_WriteString>
 542:	8f e3       	ldi	r24, 0x3F	; 63
 544:	9f e1       	ldi	r25, 0x1F	; 31
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <main+0x108>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <main+0x10e>
 54c:	00 00       	nop
			
			_delay_ms(2);
			LCD_WriteCommand(0x50, 0x45, 0x4a);
 54e:	4a e4       	ldi	r20, 0x4A	; 74
 550:	65 e4       	ldi	r22, 0x45	; 69
 552:	80 e5       	ldi	r24, 0x50	; 80
 554:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteCommand>
			snprintf(set_count_buf, 0x04, "%03d", set_count);
 558:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <set_count>
 55c:	1f 92       	push	r1
 55e:	8f 93       	push	r24
 560:	df 93       	push	r29
 562:	cf 93       	push	r28
 564:	1f 92       	push	r1
 566:	1f 93       	push	r17
 568:	82 e1       	ldi	r24, 0x12	; 18
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	9f 93       	push	r25
 56e:	8f 93       	push	r24
 570:	0e 94 c7 04 	call	0x98e	; 0x98e <snprintf>
 574:	8f e3       	ldi	r24, 0x3F	; 63
 576:	9f e1       	ldi	r25, 0x1F	; 31
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <main+0x13a>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0x140>
 57e:	00 00       	nop
			_delay_ms(2);
			I2C_WriteString(0x50, (uint8_t *)set_count_buf, 0x03);
 580:	43 e0       	ldi	r20, 0x03	; 3
 582:	62 e1       	ldi	r22, 0x12	; 18
 584:	71 e0       	ldi	r23, 0x01	; 1
 586:	80 e5       	ldi	r24, 0x50	; 80
 588:	0e 94 ca 01 	call	0x394	; 0x394 <I2C_WriteString>

			updateLCD = 0;
 58c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 590:	8d b7       	in	r24, 0x3d	; 61
 592:	9e b7       	in	r25, 0x3e	; 62
 594:	40 96       	adiw	r24, 0x10	; 16
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	f8 94       	cli
 59a:	9e bf       	out	0x3e, r25	; 62
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	8d bf       	out	0x3d, r24	; 61
 5a0:	9b cf       	rjmp	.-202    	; 0x4d8 <main+0x9a>

000005a2 <LCD_WriteCommand>:
 */ 

#include "NHC_LCD.h"

uint8_t LCD_WriteCommand(uint8_t addr, uint8_t command, uint8_t data)
{
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	c8 2f       	mov	r28, r24
 5aa:	d6 2f       	mov	r29, r22
 5ac:	14 2f       	mov	r17, r20
	uint8_t status = 0;
	
	I2C_Start();
 5ae:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_Start>
	status = I2C_GetStatus();
 5b2:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x08)
 5b6:	88 30       	cpi	r24, 0x08	; 8
 5b8:	11 f5       	brne	.+68     	; 0x5fe <LCD_WriteCommand+0x5c>
	return(status);
	
	addr &= 0b11111110;		// setting LSB to 0 Write mode.
	
	I2C_Write(addr);
 5ba:	8c 2f       	mov	r24, r28
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
	status = I2C_GetStatus();
 5c2:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x18)
 5c6:	88 31       	cpi	r24, 0x18	; 24
 5c8:	d1 f4       	brne	.+52     	; 0x5fe <LCD_WriteCommand+0x5c>
		return(status);
	
	I2C_Write(0xfe);
 5ca:	8e ef       	ldi	r24, 0xFE	; 254
 5cc:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
	status = I2C_GetStatus();
 5d0:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x28)
 5d4:	88 32       	cpi	r24, 0x28	; 40
 5d6:	99 f4       	brne	.+38     	; 0x5fe <LCD_WriteCommand+0x5c>
		return(status);
	
	I2C_Write(command);
 5d8:	8d 2f       	mov	r24, r29
 5da:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
	status = I2C_GetStatus();
 5de:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
	if (status != 0x28)
 5e2:	88 32       	cpi	r24, 0x28	; 40
 5e4:	61 f4       	brne	.+24     	; 0x5fe <LCD_WriteCommand+0x5c>
		return(status);
	
	if (data != 0)
 5e6:	11 23       	and	r17, r17
 5e8:	39 f0       	breq	.+14     	; 0x5f8 <LCD_WriteCommand+0x56>
	{
		I2C_Write(data);
 5ea:	81 2f       	mov	r24, r17
 5ec:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_Write>
		status = I2C_GetStatus();
 5f0:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_GetStatus>
		if (status != 0x28)
 5f4:	88 32       	cpi	r24, 0x28	; 40
 5f6:	19 f4       	brne	.+6      	; 0x5fe <LCD_WriteCommand+0x5c>
			return(status);
	}
	
	I2C_Stop();
 5f8:	0e 94 b8 01 	call	0x370	; 0x370 <I2C_Stop>
	
	return(0);
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	1f 91       	pop	r17
 604:	08 95       	ret

00000606 <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
	
	PORTB |= (1 << DDB3);
 606:	85 b1       	in	r24, 0x05	; 5
 608:	88 60       	ori	r24, 0x08	; 8
 60a:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << DDB5);
 60c:	85 b1       	in	r24, 0x05	; 5
 60e:	80 62       	ori	r24, 0x20	; 32
 610:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << DDB2);
 612:	85 b1       	in	r24, 0x05	; 5
 614:	84 60       	ori	r24, 0x04	; 4
 616:	85 b9       	out	0x05, r24	; 5
	
	// SS, MOSI and CLK as outputs
	DDRB |= (1 << DDB2) | (1 << DDB3) | (1 << DDB5);
 618:	84 b1       	in	r24, 0x04	; 4
 61a:	8c 62       	ori	r24, 0x2C	; 44
 61c:	84 b9       	out	0x04, r24	; 4
	
	// MISO as input
	DDRB &= ~(1 << DDB4);
 61e:	84 b1       	in	r24, 0x04	; 4
 620:	8f 7e       	andi	r24, 0xEF	; 239
 622:	84 b9       	out	0x04, r24	; 4

	// SPCR |= ~(1 << SPIE) | (1 << SPE) | (1 << DORD) | (1 << MSTR) | ~(1 << CPOL) | ~(1 << CPHA) | ~(1 << SPR1) | ~(1 << SPR0);
	
	PRR &= ~(1 << PRSPI);
 624:	e4 e6       	ldi	r30, 0x64	; 100
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	8b 7f       	andi	r24, 0xFB	; 251
 62c:	80 83       	st	Z, r24
	
	SPSR &= ~(1 << SPI2X);
 62e:	8d b5       	in	r24, 0x2d	; 45
 630:	8e 7f       	andi	r24, 0xFE	; 254
 632:	8d bd       	out	0x2d, r24	; 45
	// Enable SPI 4Mhz clock no interrupt enable. LSB. CPOL=1, CPHA=0
	SPCR = 0b01011000;
 634:	88 e5       	ldi	r24, 0x58	; 88
 636:	8c bd       	out	0x2c, r24	; 44
 638:	08 95       	ret

0000063a <SPI_Tranceiver>:
	
}

uint8_t SPI_Tranceiver(uint8_t data)
{
	SPDR = (unsigned char)data;
 63a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
 63c:	0d b4       	in	r0, 0x2d	; 45
 63e:	07 fe       	sbrs	r0, 7
 640:	fd cf       	rjmp	.-6      	; 0x63c <SPI_Tranceiver+0x2>
	
	return((uint8_t)SPDR);
 642:	8e b5       	in	r24, 0x2e	; 46
}
 644:	08 95       	ret

00000646 <SPI_End_Transfer>:

void SPI_End_Transfer(void)
{
	// Set SS pin high
	PORTB |= (1 << DDB2);
 646:	85 b1       	in	r24, 0x05	; 5
 648:	84 60       	ori	r24, 0x04	; 4
 64a:	85 b9       	out	0x05, r24	; 5
 64c:	08 95       	ret

0000064e <SPI_Start_Transfer>:
}

void SPI_Start_Transfer(void)
{
	// Set SS pin low
	PORTB &= ~(1 << DDB2);
 64e:	85 b1       	in	r24, 0x05	; 5
 650:	8b 7f       	andi	r24, 0xFB	; 251
 652:	85 b9       	out	0x05, r24	; 5
 654:	08 95       	ret

00000656 <__divsf3>:
 656:	0e 94 3f 03 	call	0x67e	; 0x67e <__divsf3x>
 65a:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_round>
 65e:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscB>
 662:	58 f0       	brcs	.+22     	; 0x67a <__divsf3+0x24>
 664:	0e 94 12 04 	call	0x824	; 0x824 <__fp_pscA>
 668:	40 f0       	brcs	.+16     	; 0x67a <__divsf3+0x24>
 66a:	29 f4       	brne	.+10     	; 0x676 <__divsf3+0x20>
 66c:	5f 3f       	cpi	r21, 0xFF	; 255
 66e:	29 f0       	breq	.+10     	; 0x67a <__divsf3+0x24>
 670:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_inf>
 674:	51 11       	cpse	r21, r1
 676:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_szero>
 67a:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_nan>

0000067e <__divsf3x>:
 67e:	0e 94 31 04 	call	0x862	; 0x862 <__fp_split3>
 682:	68 f3       	brcs	.-38     	; 0x65e <__divsf3+0x8>

00000684 <__divsf3_pse>:
 684:	99 23       	and	r25, r25
 686:	b1 f3       	breq	.-20     	; 0x674 <__divsf3+0x1e>
 688:	55 23       	and	r21, r21
 68a:	91 f3       	breq	.-28     	; 0x670 <__divsf3+0x1a>
 68c:	95 1b       	sub	r25, r21
 68e:	55 0b       	sbc	r21, r21
 690:	bb 27       	eor	r27, r27
 692:	aa 27       	eor	r26, r26
 694:	62 17       	cp	r22, r18
 696:	73 07       	cpc	r23, r19
 698:	84 07       	cpc	r24, r20
 69a:	38 f0       	brcs	.+14     	; 0x6aa <__divsf3_pse+0x26>
 69c:	9f 5f       	subi	r25, 0xFF	; 255
 69e:	5f 4f       	sbci	r21, 0xFF	; 255
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	44 1f       	adc	r20, r20
 6a6:	aa 1f       	adc	r26, r26
 6a8:	a9 f3       	breq	.-22     	; 0x694 <__divsf3_pse+0x10>
 6aa:	35 d0       	rcall	.+106    	; 0x716 <__divsf3_pse+0x92>
 6ac:	0e 2e       	mov	r0, r30
 6ae:	3a f0       	brmi	.+14     	; 0x6be <__divsf3_pse+0x3a>
 6b0:	e0 e8       	ldi	r30, 0x80	; 128
 6b2:	32 d0       	rcall	.+100    	; 0x718 <__divsf3_pse+0x94>
 6b4:	91 50       	subi	r25, 0x01	; 1
 6b6:	50 40       	sbci	r21, 0x00	; 0
 6b8:	e6 95       	lsr	r30
 6ba:	00 1c       	adc	r0, r0
 6bc:	ca f7       	brpl	.-14     	; 0x6b0 <__divsf3_pse+0x2c>
 6be:	2b d0       	rcall	.+86     	; 0x716 <__divsf3_pse+0x92>
 6c0:	fe 2f       	mov	r31, r30
 6c2:	29 d0       	rcall	.+82     	; 0x716 <__divsf3_pse+0x92>
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	bb 1f       	adc	r27, r27
 6cc:	26 17       	cp	r18, r22
 6ce:	37 07       	cpc	r19, r23
 6d0:	48 07       	cpc	r20, r24
 6d2:	ab 07       	cpc	r26, r27
 6d4:	b0 e8       	ldi	r27, 0x80	; 128
 6d6:	09 f0       	breq	.+2      	; 0x6da <__divsf3_pse+0x56>
 6d8:	bb 0b       	sbc	r27, r27
 6da:	80 2d       	mov	r24, r0
 6dc:	bf 01       	movw	r22, r30
 6de:	ff 27       	eor	r31, r31
 6e0:	93 58       	subi	r25, 0x83	; 131
 6e2:	5f 4f       	sbci	r21, 0xFF	; 255
 6e4:	3a f0       	brmi	.+14     	; 0x6f4 <__divsf3_pse+0x70>
 6e6:	9e 3f       	cpi	r25, 0xFE	; 254
 6e8:	51 05       	cpc	r21, r1
 6ea:	78 f0       	brcs	.+30     	; 0x70a <__divsf3_pse+0x86>
 6ec:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_inf>
 6f0:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_szero>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	e4 f3       	brlt	.-8      	; 0x6f0 <__divsf3_pse+0x6c>
 6f8:	98 3e       	cpi	r25, 0xE8	; 232
 6fa:	d4 f3       	brlt	.-12     	; 0x6f0 <__divsf3_pse+0x6c>
 6fc:	86 95       	lsr	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b7 95       	ror	r27
 704:	f7 95       	ror	r31
 706:	9f 5f       	subi	r25, 0xFF	; 255
 708:	c9 f7       	brne	.-14     	; 0x6fc <__divsf3_pse+0x78>
 70a:	88 0f       	add	r24, r24
 70c:	91 1d       	adc	r25, r1
 70e:	96 95       	lsr	r25
 710:	87 95       	ror	r24
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret
 716:	e1 e0       	ldi	r30, 0x01	; 1
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	bb 1f       	adc	r27, r27
 720:	62 17       	cp	r22, r18
 722:	73 07       	cpc	r23, r19
 724:	84 07       	cpc	r24, r20
 726:	ba 07       	cpc	r27, r26
 728:	20 f0       	brcs	.+8      	; 0x732 <__divsf3_pse+0xae>
 72a:	62 1b       	sub	r22, r18
 72c:	73 0b       	sbc	r23, r19
 72e:	84 0b       	sbc	r24, r20
 730:	ba 0b       	sbc	r27, r26
 732:	ee 1f       	adc	r30, r30
 734:	88 f7       	brcc	.-30     	; 0x718 <__divsf3_pse+0x94>
 736:	e0 95       	com	r30
 738:	08 95       	ret

0000073a <__fixunssfsi>:
 73a:	0e 94 39 04 	call	0x872	; 0x872 <__fp_splitA>
 73e:	88 f0       	brcs	.+34     	; 0x762 <__fixunssfsi+0x28>
 740:	9f 57       	subi	r25, 0x7F	; 127
 742:	98 f0       	brcs	.+38     	; 0x76a <__fixunssfsi+0x30>
 744:	b9 2f       	mov	r27, r25
 746:	99 27       	eor	r25, r25
 748:	b7 51       	subi	r27, 0x17	; 23
 74a:	b0 f0       	brcs	.+44     	; 0x778 <__fixunssfsi+0x3e>
 74c:	e1 f0       	breq	.+56     	; 0x786 <__fixunssfsi+0x4c>
 74e:	66 0f       	add	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	1a f0       	brmi	.+6      	; 0x75e <__fixunssfsi+0x24>
 758:	ba 95       	dec	r27
 75a:	c9 f7       	brne	.-14     	; 0x74e <__fixunssfsi+0x14>
 75c:	14 c0       	rjmp	.+40     	; 0x786 <__fixunssfsi+0x4c>
 75e:	b1 30       	cpi	r27, 0x01	; 1
 760:	91 f0       	breq	.+36     	; 0x786 <__fixunssfsi+0x4c>
 762:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_zero>
 766:	b1 e0       	ldi	r27, 0x01	; 1
 768:	08 95       	ret
 76a:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_zero>
 76e:	67 2f       	mov	r22, r23
 770:	78 2f       	mov	r23, r24
 772:	88 27       	eor	r24, r24
 774:	b8 5f       	subi	r27, 0xF8	; 248
 776:	39 f0       	breq	.+14     	; 0x786 <__fixunssfsi+0x4c>
 778:	b9 3f       	cpi	r27, 0xF9	; 249
 77a:	cc f3       	brlt	.-14     	; 0x76e <__fixunssfsi+0x34>
 77c:	86 95       	lsr	r24
 77e:	77 95       	ror	r23
 780:	67 95       	ror	r22
 782:	b3 95       	inc	r27
 784:	d9 f7       	brne	.-10     	; 0x77c <__fixunssfsi+0x42>
 786:	3e f4       	brtc	.+14     	; 0x796 <__fixunssfsi+0x5c>
 788:	90 95       	com	r25
 78a:	80 95       	com	r24
 78c:	70 95       	com	r23
 78e:	61 95       	neg	r22
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	08 95       	ret

00000798 <__floatunsisf>:
 798:	e8 94       	clt
 79a:	09 c0       	rjmp	.+18     	; 0x7ae <__floatsisf+0x12>

0000079c <__floatsisf>:
 79c:	97 fb       	bst	r25, 7
 79e:	3e f4       	brtc	.+14     	; 0x7ae <__floatsisf+0x12>
 7a0:	90 95       	com	r25
 7a2:	80 95       	com	r24
 7a4:	70 95       	com	r23
 7a6:	61 95       	neg	r22
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	99 23       	and	r25, r25
 7b0:	a9 f0       	breq	.+42     	; 0x7dc <__floatsisf+0x40>
 7b2:	f9 2f       	mov	r31, r25
 7b4:	96 e9       	ldi	r25, 0x96	; 150
 7b6:	bb 27       	eor	r27, r27
 7b8:	93 95       	inc	r25
 7ba:	f6 95       	lsr	r31
 7bc:	87 95       	ror	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b7 95       	ror	r27
 7c4:	f1 11       	cpse	r31, r1
 7c6:	f8 cf       	rjmp	.-16     	; 0x7b8 <__floatsisf+0x1c>
 7c8:	fa f4       	brpl	.+62     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7ca:	bb 0f       	add	r27, r27
 7cc:	11 f4       	brne	.+4      	; 0x7d2 <__floatsisf+0x36>
 7ce:	60 ff       	sbrs	r22, 0
 7d0:	1b c0       	rjmp	.+54     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7d2:	6f 5f       	subi	r22, 0xFF	; 255
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	8f 4f       	sbci	r24, 0xFF	; 255
 7d8:	9f 4f       	sbci	r25, 0xFF	; 255
 7da:	16 c0       	rjmp	.+44     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7dc:	88 23       	and	r24, r24
 7de:	11 f0       	breq	.+4      	; 0x7e4 <__floatsisf+0x48>
 7e0:	96 e9       	ldi	r25, 0x96	; 150
 7e2:	11 c0       	rjmp	.+34     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7e4:	77 23       	and	r23, r23
 7e6:	21 f0       	breq	.+8      	; 0x7f0 <__floatsisf+0x54>
 7e8:	9e e8       	ldi	r25, 0x8E	; 142
 7ea:	87 2f       	mov	r24, r23
 7ec:	76 2f       	mov	r23, r22
 7ee:	05 c0       	rjmp	.+10     	; 0x7fa <__floatsisf+0x5e>
 7f0:	66 23       	and	r22, r22
 7f2:	71 f0       	breq	.+28     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7f4:	96 e8       	ldi	r25, 0x86	; 134
 7f6:	86 2f       	mov	r24, r22
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	2a f0       	brmi	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fe:	9a 95       	dec	r25
 800:	66 0f       	add	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	da f7       	brpl	.-10     	; 0x7fe <__floatsisf+0x62>
 808:	88 0f       	add	r24, r24
 80a:	96 95       	lsr	r25
 80c:	87 95       	ror	r24
 80e:	97 f9       	bld	r25, 7
 810:	08 95       	ret

00000812 <__fp_inf>:
 812:	97 f9       	bld	r25, 7
 814:	9f 67       	ori	r25, 0x7F	; 127
 816:	80 e8       	ldi	r24, 0x80	; 128
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	08 95       	ret

0000081e <__fp_nan>:
 81e:	9f ef       	ldi	r25, 0xFF	; 255
 820:	80 ec       	ldi	r24, 0xC0	; 192
 822:	08 95       	ret

00000824 <__fp_pscA>:
 824:	00 24       	eor	r0, r0
 826:	0a 94       	dec	r0
 828:	16 16       	cp	r1, r22
 82a:	17 06       	cpc	r1, r23
 82c:	18 06       	cpc	r1, r24
 82e:	09 06       	cpc	r0, r25
 830:	08 95       	ret

00000832 <__fp_pscB>:
 832:	00 24       	eor	r0, r0
 834:	0a 94       	dec	r0
 836:	12 16       	cp	r1, r18
 838:	13 06       	cpc	r1, r19
 83a:	14 06       	cpc	r1, r20
 83c:	05 06       	cpc	r0, r21
 83e:	08 95       	ret

00000840 <__fp_round>:
 840:	09 2e       	mov	r0, r25
 842:	03 94       	inc	r0
 844:	00 0c       	add	r0, r0
 846:	11 f4       	brne	.+4      	; 0x84c <__fp_round+0xc>
 848:	88 23       	and	r24, r24
 84a:	52 f0       	brmi	.+20     	; 0x860 <__fp_round+0x20>
 84c:	bb 0f       	add	r27, r27
 84e:	40 f4       	brcc	.+16     	; 0x860 <__fp_round+0x20>
 850:	bf 2b       	or	r27, r31
 852:	11 f4       	brne	.+4      	; 0x858 <__fp_round+0x18>
 854:	60 ff       	sbrs	r22, 0
 856:	04 c0       	rjmp	.+8      	; 0x860 <__fp_round+0x20>
 858:	6f 5f       	subi	r22, 0xFF	; 255
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	08 95       	ret

00000862 <__fp_split3>:
 862:	57 fd       	sbrc	r21, 7
 864:	90 58       	subi	r25, 0x80	; 128
 866:	44 0f       	add	r20, r20
 868:	55 1f       	adc	r21, r21
 86a:	59 f0       	breq	.+22     	; 0x882 <__fp_splitA+0x10>
 86c:	5f 3f       	cpi	r21, 0xFF	; 255
 86e:	71 f0       	breq	.+28     	; 0x88c <__fp_splitA+0x1a>
 870:	47 95       	ror	r20

00000872 <__fp_splitA>:
 872:	88 0f       	add	r24, r24
 874:	97 fb       	bst	r25, 7
 876:	99 1f       	adc	r25, r25
 878:	61 f0       	breq	.+24     	; 0x892 <__fp_splitA+0x20>
 87a:	9f 3f       	cpi	r25, 0xFF	; 255
 87c:	79 f0       	breq	.+30     	; 0x89c <__fp_splitA+0x2a>
 87e:	87 95       	ror	r24
 880:	08 95       	ret
 882:	12 16       	cp	r1, r18
 884:	13 06       	cpc	r1, r19
 886:	14 06       	cpc	r1, r20
 888:	55 1f       	adc	r21, r21
 88a:	f2 cf       	rjmp	.-28     	; 0x870 <__fp_split3+0xe>
 88c:	46 95       	lsr	r20
 88e:	f1 df       	rcall	.-30     	; 0x872 <__fp_splitA>
 890:	08 c0       	rjmp	.+16     	; 0x8a2 <__fp_splitA+0x30>
 892:	16 16       	cp	r1, r22
 894:	17 06       	cpc	r1, r23
 896:	18 06       	cpc	r1, r24
 898:	99 1f       	adc	r25, r25
 89a:	f1 cf       	rjmp	.-30     	; 0x87e <__fp_splitA+0xc>
 89c:	86 95       	lsr	r24
 89e:	71 05       	cpc	r23, r1
 8a0:	61 05       	cpc	r22, r1
 8a2:	08 94       	sec
 8a4:	08 95       	ret

000008a6 <__fp_zero>:
 8a6:	e8 94       	clt

000008a8 <__fp_szero>:
 8a8:	bb 27       	eor	r27, r27
 8aa:	66 27       	eor	r22, r22
 8ac:	77 27       	eor	r23, r23
 8ae:	cb 01       	movw	r24, r22
 8b0:	97 f9       	bld	r25, 7
 8b2:	08 95       	ret

000008b4 <__mulsf3>:
 8b4:	0e 94 6d 04 	call	0x8da	; 0x8da <__mulsf3x>
 8b8:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_round>
 8bc:	0e 94 12 04 	call	0x824	; 0x824 <__fp_pscA>
 8c0:	38 f0       	brcs	.+14     	; 0x8d0 <__mulsf3+0x1c>
 8c2:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscB>
 8c6:	20 f0       	brcs	.+8      	; 0x8d0 <__mulsf3+0x1c>
 8c8:	95 23       	and	r25, r21
 8ca:	11 f0       	breq	.+4      	; 0x8d0 <__mulsf3+0x1c>
 8cc:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_inf>
 8d0:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_nan>
 8d4:	11 24       	eor	r1, r1
 8d6:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_szero>

000008da <__mulsf3x>:
 8da:	0e 94 31 04 	call	0x862	; 0x862 <__fp_split3>
 8de:	70 f3       	brcs	.-36     	; 0x8bc <__mulsf3+0x8>

000008e0 <__mulsf3_pse>:
 8e0:	95 9f       	mul	r25, r21
 8e2:	c1 f3       	breq	.-16     	; 0x8d4 <__mulsf3+0x20>
 8e4:	95 0f       	add	r25, r21
 8e6:	50 e0       	ldi	r21, 0x00	; 0
 8e8:	55 1f       	adc	r21, r21
 8ea:	62 9f       	mul	r22, r18
 8ec:	f0 01       	movw	r30, r0
 8ee:	72 9f       	mul	r23, r18
 8f0:	bb 27       	eor	r27, r27
 8f2:	f0 0d       	add	r31, r0
 8f4:	b1 1d       	adc	r27, r1
 8f6:	63 9f       	mul	r22, r19
 8f8:	aa 27       	eor	r26, r26
 8fa:	f0 0d       	add	r31, r0
 8fc:	b1 1d       	adc	r27, r1
 8fe:	aa 1f       	adc	r26, r26
 900:	64 9f       	mul	r22, r20
 902:	66 27       	eor	r22, r22
 904:	b0 0d       	add	r27, r0
 906:	a1 1d       	adc	r26, r1
 908:	66 1f       	adc	r22, r22
 90a:	82 9f       	mul	r24, r18
 90c:	22 27       	eor	r18, r18
 90e:	b0 0d       	add	r27, r0
 910:	a1 1d       	adc	r26, r1
 912:	62 1f       	adc	r22, r18
 914:	73 9f       	mul	r23, r19
 916:	b0 0d       	add	r27, r0
 918:	a1 1d       	adc	r26, r1
 91a:	62 1f       	adc	r22, r18
 91c:	83 9f       	mul	r24, r19
 91e:	a0 0d       	add	r26, r0
 920:	61 1d       	adc	r22, r1
 922:	22 1f       	adc	r18, r18
 924:	74 9f       	mul	r23, r20
 926:	33 27       	eor	r19, r19
 928:	a0 0d       	add	r26, r0
 92a:	61 1d       	adc	r22, r1
 92c:	23 1f       	adc	r18, r19
 92e:	84 9f       	mul	r24, r20
 930:	60 0d       	add	r22, r0
 932:	21 1d       	adc	r18, r1
 934:	82 2f       	mov	r24, r18
 936:	76 2f       	mov	r23, r22
 938:	6a 2f       	mov	r22, r26
 93a:	11 24       	eor	r1, r1
 93c:	9f 57       	subi	r25, 0x7F	; 127
 93e:	50 40       	sbci	r21, 0x00	; 0
 940:	9a f0       	brmi	.+38     	; 0x968 <__stack+0x69>
 942:	f1 f0       	breq	.+60     	; 0x980 <__stack+0x81>
 944:	88 23       	and	r24, r24
 946:	4a f0       	brmi	.+18     	; 0x95a <__stack+0x5b>
 948:	ee 0f       	add	r30, r30
 94a:	ff 1f       	adc	r31, r31
 94c:	bb 1f       	adc	r27, r27
 94e:	66 1f       	adc	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	88 1f       	adc	r24, r24
 954:	91 50       	subi	r25, 0x01	; 1
 956:	50 40       	sbci	r21, 0x00	; 0
 958:	a9 f7       	brne	.-22     	; 0x944 <__stack+0x45>
 95a:	9e 3f       	cpi	r25, 0xFE	; 254
 95c:	51 05       	cpc	r21, r1
 95e:	80 f0       	brcs	.+32     	; 0x980 <__stack+0x81>
 960:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_inf>
 964:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_szero>
 968:	5f 3f       	cpi	r21, 0xFF	; 255
 96a:	e4 f3       	brlt	.-8      	; 0x964 <__stack+0x65>
 96c:	98 3e       	cpi	r25, 0xE8	; 232
 96e:	d4 f3       	brlt	.-12     	; 0x964 <__stack+0x65>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b7 95       	ror	r27
 978:	f7 95       	ror	r31
 97a:	e7 95       	ror	r30
 97c:	9f 5f       	subi	r25, 0xFF	; 255
 97e:	c1 f7       	brne	.-16     	; 0x970 <__stack+0x71>
 980:	fe 2b       	or	r31, r30
 982:	88 0f       	add	r24, r24
 984:	91 1d       	adc	r25, r1
 986:	96 95       	lsr	r25
 988:	87 95       	ror	r24
 98a:	97 f9       	bld	r25, 7
 98c:	08 95       	ret

0000098e <snprintf>:
 98e:	ae e0       	ldi	r26, 0x0E	; 14
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	ed ec       	ldi	r30, 0xCD	; 205
 994:	f4 e0       	ldi	r31, 0x04	; 4
 996:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__prologue_saves__+0x1c>
 99a:	0d 89       	ldd	r16, Y+21	; 0x15
 99c:	1e 89       	ldd	r17, Y+22	; 0x16
 99e:	8f 89       	ldd	r24, Y+23	; 0x17
 9a0:	98 8d       	ldd	r25, Y+24	; 0x18
 9a2:	26 e0       	ldi	r18, 0x06	; 6
 9a4:	2c 83       	std	Y+4, r18	; 0x04
 9a6:	1a 83       	std	Y+2, r17	; 0x02
 9a8:	09 83       	std	Y+1, r16	; 0x01
 9aa:	97 ff       	sbrs	r25, 7
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <snprintf+0x24>
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	90 e8       	ldi	r25, 0x80	; 128
 9b2:	01 97       	sbiw	r24, 0x01	; 1
 9b4:	9e 83       	std	Y+6, r25	; 0x06
 9b6:	8d 83       	std	Y+5, r24	; 0x05
 9b8:	ae 01       	movw	r20, r28
 9ba:	45 5e       	subi	r20, 0xE5	; 229
 9bc:	5f 4f       	sbci	r21, 0xFF	; 255
 9be:	69 8d       	ldd	r22, Y+25	; 0x19
 9c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
 9c2:	ce 01       	movw	r24, r28
 9c4:	01 96       	adiw	r24, 0x01	; 1
 9c6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <vfprintf>
 9ca:	4d 81       	ldd	r20, Y+5	; 0x05
 9cc:	5e 81       	ldd	r21, Y+6	; 0x06
 9ce:	57 fd       	sbrc	r21, 7
 9d0:	0a c0       	rjmp	.+20     	; 0x9e6 <snprintf+0x58>
 9d2:	2f 81       	ldd	r18, Y+7	; 0x07
 9d4:	38 85       	ldd	r19, Y+8	; 0x08
 9d6:	42 17       	cp	r20, r18
 9d8:	53 07       	cpc	r21, r19
 9da:	0c f4       	brge	.+2      	; 0x9de <snprintf+0x50>
 9dc:	9a 01       	movw	r18, r20
 9de:	f8 01       	movw	r30, r16
 9e0:	e2 0f       	add	r30, r18
 9e2:	f3 1f       	adc	r31, r19
 9e4:	10 82       	st	Z, r1
 9e6:	2e 96       	adiw	r28, 0x0e	; 14
 9e8:	e4 e0       	ldi	r30, 0x04	; 4
 9ea:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__epilogue_restores__+0x1c>

000009ee <vfprintf>:
 9ee:	ab e0       	ldi	r26, 0x0B	; 11
 9f0:	b0 e0       	ldi	r27, 0x00	; 0
 9f2:	ed ef       	ldi	r30, 0xFD	; 253
 9f4:	f4 e0       	ldi	r31, 0x04	; 4
 9f6:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__prologue_saves__>
 9fa:	6c 01       	movw	r12, r24
 9fc:	7b 01       	movw	r14, r22
 9fe:	8a 01       	movw	r16, r20
 a00:	fc 01       	movw	r30, r24
 a02:	17 82       	std	Z+7, r1	; 0x07
 a04:	16 82       	std	Z+6, r1	; 0x06
 a06:	83 81       	ldd	r24, Z+3	; 0x03
 a08:	81 ff       	sbrs	r24, 1
 a0a:	cc c1       	rjmp	.+920    	; 0xda4 <vfprintf+0x3b6>
 a0c:	ce 01       	movw	r24, r28
 a0e:	01 96       	adiw	r24, 0x01	; 1
 a10:	3c 01       	movw	r6, r24
 a12:	f6 01       	movw	r30, r12
 a14:	93 81       	ldd	r25, Z+3	; 0x03
 a16:	f7 01       	movw	r30, r14
 a18:	93 fd       	sbrc	r25, 3
 a1a:	85 91       	lpm	r24, Z+
 a1c:	93 ff       	sbrs	r25, 3
 a1e:	81 91       	ld	r24, Z+
 a20:	7f 01       	movw	r14, r30
 a22:	88 23       	and	r24, r24
 a24:	09 f4       	brne	.+2      	; 0xa28 <vfprintf+0x3a>
 a26:	ba c1       	rjmp	.+884    	; 0xd9c <vfprintf+0x3ae>
 a28:	85 32       	cpi	r24, 0x25	; 37
 a2a:	39 f4       	brne	.+14     	; 0xa3a <vfprintf+0x4c>
 a2c:	93 fd       	sbrc	r25, 3
 a2e:	85 91       	lpm	r24, Z+
 a30:	93 ff       	sbrs	r25, 3
 a32:	81 91       	ld	r24, Z+
 a34:	7f 01       	movw	r14, r30
 a36:	85 32       	cpi	r24, 0x25	; 37
 a38:	29 f4       	brne	.+10     	; 0xa44 <vfprintf+0x56>
 a3a:	b6 01       	movw	r22, r12
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 ee 06 	call	0xddc	; 0xddc <fputc>
 a42:	e7 cf       	rjmp	.-50     	; 0xa12 <vfprintf+0x24>
 a44:	91 2c       	mov	r9, r1
 a46:	21 2c       	mov	r2, r1
 a48:	31 2c       	mov	r3, r1
 a4a:	ff e1       	ldi	r31, 0x1F	; 31
 a4c:	f3 15       	cp	r31, r3
 a4e:	d8 f0       	brcs	.+54     	; 0xa86 <vfprintf+0x98>
 a50:	8b 32       	cpi	r24, 0x2B	; 43
 a52:	79 f0       	breq	.+30     	; 0xa72 <vfprintf+0x84>
 a54:	38 f4       	brcc	.+14     	; 0xa64 <vfprintf+0x76>
 a56:	80 32       	cpi	r24, 0x20	; 32
 a58:	79 f0       	breq	.+30     	; 0xa78 <vfprintf+0x8a>
 a5a:	83 32       	cpi	r24, 0x23	; 35
 a5c:	a1 f4       	brne	.+40     	; 0xa86 <vfprintf+0x98>
 a5e:	23 2d       	mov	r18, r3
 a60:	20 61       	ori	r18, 0x10	; 16
 a62:	1d c0       	rjmp	.+58     	; 0xa9e <vfprintf+0xb0>
 a64:	8d 32       	cpi	r24, 0x2D	; 45
 a66:	61 f0       	breq	.+24     	; 0xa80 <vfprintf+0x92>
 a68:	80 33       	cpi	r24, 0x30	; 48
 a6a:	69 f4       	brne	.+26     	; 0xa86 <vfprintf+0x98>
 a6c:	23 2d       	mov	r18, r3
 a6e:	21 60       	ori	r18, 0x01	; 1
 a70:	16 c0       	rjmp	.+44     	; 0xa9e <vfprintf+0xb0>
 a72:	83 2d       	mov	r24, r3
 a74:	82 60       	ori	r24, 0x02	; 2
 a76:	38 2e       	mov	r3, r24
 a78:	e3 2d       	mov	r30, r3
 a7a:	e4 60       	ori	r30, 0x04	; 4
 a7c:	3e 2e       	mov	r3, r30
 a7e:	2a c0       	rjmp	.+84     	; 0xad4 <vfprintf+0xe6>
 a80:	f3 2d       	mov	r31, r3
 a82:	f8 60       	ori	r31, 0x08	; 8
 a84:	1d c0       	rjmp	.+58     	; 0xac0 <vfprintf+0xd2>
 a86:	37 fc       	sbrc	r3, 7
 a88:	2d c0       	rjmp	.+90     	; 0xae4 <vfprintf+0xf6>
 a8a:	20 ed       	ldi	r18, 0xD0	; 208
 a8c:	28 0f       	add	r18, r24
 a8e:	2a 30       	cpi	r18, 0x0A	; 10
 a90:	40 f0       	brcs	.+16     	; 0xaa2 <vfprintf+0xb4>
 a92:	8e 32       	cpi	r24, 0x2E	; 46
 a94:	b9 f4       	brne	.+46     	; 0xac4 <vfprintf+0xd6>
 a96:	36 fc       	sbrc	r3, 6
 a98:	81 c1       	rjmp	.+770    	; 0xd9c <vfprintf+0x3ae>
 a9a:	23 2d       	mov	r18, r3
 a9c:	20 64       	ori	r18, 0x40	; 64
 a9e:	32 2e       	mov	r3, r18
 aa0:	19 c0       	rjmp	.+50     	; 0xad4 <vfprintf+0xe6>
 aa2:	36 fe       	sbrs	r3, 6
 aa4:	06 c0       	rjmp	.+12     	; 0xab2 <vfprintf+0xc4>
 aa6:	8a e0       	ldi	r24, 0x0A	; 10
 aa8:	98 9e       	mul	r9, r24
 aaa:	20 0d       	add	r18, r0
 aac:	11 24       	eor	r1, r1
 aae:	92 2e       	mov	r9, r18
 ab0:	11 c0       	rjmp	.+34     	; 0xad4 <vfprintf+0xe6>
 ab2:	ea e0       	ldi	r30, 0x0A	; 10
 ab4:	2e 9e       	mul	r2, r30
 ab6:	20 0d       	add	r18, r0
 ab8:	11 24       	eor	r1, r1
 aba:	22 2e       	mov	r2, r18
 abc:	f3 2d       	mov	r31, r3
 abe:	f0 62       	ori	r31, 0x20	; 32
 ac0:	3f 2e       	mov	r3, r31
 ac2:	08 c0       	rjmp	.+16     	; 0xad4 <vfprintf+0xe6>
 ac4:	8c 36       	cpi	r24, 0x6C	; 108
 ac6:	21 f4       	brne	.+8      	; 0xad0 <vfprintf+0xe2>
 ac8:	83 2d       	mov	r24, r3
 aca:	80 68       	ori	r24, 0x80	; 128
 acc:	38 2e       	mov	r3, r24
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <vfprintf+0xe6>
 ad0:	88 36       	cpi	r24, 0x68	; 104
 ad2:	41 f4       	brne	.+16     	; 0xae4 <vfprintf+0xf6>
 ad4:	f7 01       	movw	r30, r14
 ad6:	93 fd       	sbrc	r25, 3
 ad8:	85 91       	lpm	r24, Z+
 ada:	93 ff       	sbrs	r25, 3
 adc:	81 91       	ld	r24, Z+
 ade:	7f 01       	movw	r14, r30
 ae0:	81 11       	cpse	r24, r1
 ae2:	b3 cf       	rjmp	.-154    	; 0xa4a <vfprintf+0x5c>
 ae4:	98 2f       	mov	r25, r24
 ae6:	9f 7d       	andi	r25, 0xDF	; 223
 ae8:	95 54       	subi	r25, 0x45	; 69
 aea:	93 30       	cpi	r25, 0x03	; 3
 aec:	28 f4       	brcc	.+10     	; 0xaf8 <vfprintf+0x10a>
 aee:	0c 5f       	subi	r16, 0xFC	; 252
 af0:	1f 4f       	sbci	r17, 0xFF	; 255
 af2:	9f e3       	ldi	r25, 0x3F	; 63
 af4:	99 83       	std	Y+1, r25	; 0x01
 af6:	0d c0       	rjmp	.+26     	; 0xb12 <vfprintf+0x124>
 af8:	83 36       	cpi	r24, 0x63	; 99
 afa:	31 f0       	breq	.+12     	; 0xb08 <vfprintf+0x11a>
 afc:	83 37       	cpi	r24, 0x73	; 115
 afe:	71 f0       	breq	.+28     	; 0xb1c <vfprintf+0x12e>
 b00:	83 35       	cpi	r24, 0x53	; 83
 b02:	09 f0       	breq	.+2      	; 0xb06 <vfprintf+0x118>
 b04:	59 c0       	rjmp	.+178    	; 0xbb8 <vfprintf+0x1ca>
 b06:	21 c0       	rjmp	.+66     	; 0xb4a <vfprintf+0x15c>
 b08:	f8 01       	movw	r30, r16
 b0a:	80 81       	ld	r24, Z
 b0c:	89 83       	std	Y+1, r24	; 0x01
 b0e:	0e 5f       	subi	r16, 0xFE	; 254
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	88 24       	eor	r8, r8
 b14:	83 94       	inc	r8
 b16:	91 2c       	mov	r9, r1
 b18:	53 01       	movw	r10, r6
 b1a:	13 c0       	rjmp	.+38     	; 0xb42 <vfprintf+0x154>
 b1c:	28 01       	movw	r4, r16
 b1e:	f2 e0       	ldi	r31, 0x02	; 2
 b20:	4f 0e       	add	r4, r31
 b22:	51 1c       	adc	r5, r1
 b24:	f8 01       	movw	r30, r16
 b26:	a0 80       	ld	r10, Z
 b28:	b1 80       	ldd	r11, Z+1	; 0x01
 b2a:	36 fe       	sbrs	r3, 6
 b2c:	03 c0       	rjmp	.+6      	; 0xb34 <vfprintf+0x146>
 b2e:	69 2d       	mov	r22, r9
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x14a>
 b34:	6f ef       	ldi	r22, 0xFF	; 255
 b36:	7f ef       	ldi	r23, 0xFF	; 255
 b38:	c5 01       	movw	r24, r10
 b3a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <strnlen>
 b3e:	4c 01       	movw	r8, r24
 b40:	82 01       	movw	r16, r4
 b42:	f3 2d       	mov	r31, r3
 b44:	ff 77       	andi	r31, 0x7F	; 127
 b46:	3f 2e       	mov	r3, r31
 b48:	16 c0       	rjmp	.+44     	; 0xb76 <vfprintf+0x188>
 b4a:	28 01       	movw	r4, r16
 b4c:	22 e0       	ldi	r18, 0x02	; 2
 b4e:	42 0e       	add	r4, r18
 b50:	51 1c       	adc	r5, r1
 b52:	f8 01       	movw	r30, r16
 b54:	a0 80       	ld	r10, Z
 b56:	b1 80       	ldd	r11, Z+1	; 0x01
 b58:	36 fe       	sbrs	r3, 6
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <vfprintf+0x174>
 b5c:	69 2d       	mov	r22, r9
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <vfprintf+0x178>
 b62:	6f ef       	ldi	r22, 0xFF	; 255
 b64:	7f ef       	ldi	r23, 0xFF	; 255
 b66:	c5 01       	movw	r24, r10
 b68:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <strnlen_P>
 b6c:	4c 01       	movw	r8, r24
 b6e:	f3 2d       	mov	r31, r3
 b70:	f0 68       	ori	r31, 0x80	; 128
 b72:	3f 2e       	mov	r3, r31
 b74:	82 01       	movw	r16, r4
 b76:	33 fc       	sbrc	r3, 3
 b78:	1b c0       	rjmp	.+54     	; 0xbb0 <vfprintf+0x1c2>
 b7a:	82 2d       	mov	r24, r2
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	88 16       	cp	r8, r24
 b80:	99 06       	cpc	r9, r25
 b82:	b0 f4       	brcc	.+44     	; 0xbb0 <vfprintf+0x1c2>
 b84:	b6 01       	movw	r22, r12
 b86:	80 e2       	ldi	r24, 0x20	; 32
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 ee 06 	call	0xddc	; 0xddc <fputc>
 b8e:	2a 94       	dec	r2
 b90:	f4 cf       	rjmp	.-24     	; 0xb7a <vfprintf+0x18c>
 b92:	f5 01       	movw	r30, r10
 b94:	37 fc       	sbrc	r3, 7
 b96:	85 91       	lpm	r24, Z+
 b98:	37 fe       	sbrs	r3, 7
 b9a:	81 91       	ld	r24, Z+
 b9c:	5f 01       	movw	r10, r30
 b9e:	b6 01       	movw	r22, r12
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	0e 94 ee 06 	call	0xddc	; 0xddc <fputc>
 ba6:	21 10       	cpse	r2, r1
 ba8:	2a 94       	dec	r2
 baa:	21 e0       	ldi	r18, 0x01	; 1
 bac:	82 1a       	sub	r8, r18
 bae:	91 08       	sbc	r9, r1
 bb0:	81 14       	cp	r8, r1
 bb2:	91 04       	cpc	r9, r1
 bb4:	71 f7       	brne	.-36     	; 0xb92 <vfprintf+0x1a4>
 bb6:	e8 c0       	rjmp	.+464    	; 0xd88 <vfprintf+0x39a>
 bb8:	84 36       	cpi	r24, 0x64	; 100
 bba:	11 f0       	breq	.+4      	; 0xbc0 <vfprintf+0x1d2>
 bbc:	89 36       	cpi	r24, 0x69	; 105
 bbe:	41 f5       	brne	.+80     	; 0xc10 <vfprintf+0x222>
 bc0:	f8 01       	movw	r30, r16
 bc2:	37 fe       	sbrs	r3, 7
 bc4:	07 c0       	rjmp	.+14     	; 0xbd4 <vfprintf+0x1e6>
 bc6:	60 81       	ld	r22, Z
 bc8:	71 81       	ldd	r23, Z+1	; 0x01
 bca:	82 81       	ldd	r24, Z+2	; 0x02
 bcc:	93 81       	ldd	r25, Z+3	; 0x03
 bce:	0c 5f       	subi	r16, 0xFC	; 252
 bd0:	1f 4f       	sbci	r17, 0xFF	; 255
 bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <vfprintf+0x1f6>
 bd4:	60 81       	ld	r22, Z
 bd6:	71 81       	ldd	r23, Z+1	; 0x01
 bd8:	07 2e       	mov	r0, r23
 bda:	00 0c       	add	r0, r0
 bdc:	88 0b       	sbc	r24, r24
 bde:	99 0b       	sbc	r25, r25
 be0:	0e 5f       	subi	r16, 0xFE	; 254
 be2:	1f 4f       	sbci	r17, 0xFF	; 255
 be4:	f3 2d       	mov	r31, r3
 be6:	ff 76       	andi	r31, 0x6F	; 111
 be8:	3f 2e       	mov	r3, r31
 bea:	97 ff       	sbrs	r25, 7
 bec:	09 c0       	rjmp	.+18     	; 0xc00 <vfprintf+0x212>
 bee:	90 95       	com	r25
 bf0:	80 95       	com	r24
 bf2:	70 95       	com	r23
 bf4:	61 95       	neg	r22
 bf6:	7f 4f       	sbci	r23, 0xFF	; 255
 bf8:	8f 4f       	sbci	r24, 0xFF	; 255
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	f0 68       	ori	r31, 0x80	; 128
 bfe:	3f 2e       	mov	r3, r31
 c00:	2a e0       	ldi	r18, 0x0A	; 10
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	a3 01       	movw	r20, r6
 c06:	0e 94 2a 07 	call	0xe54	; 0xe54 <__ultoa_invert>
 c0a:	88 2e       	mov	r8, r24
 c0c:	86 18       	sub	r8, r6
 c0e:	45 c0       	rjmp	.+138    	; 0xc9a <vfprintf+0x2ac>
 c10:	85 37       	cpi	r24, 0x75	; 117
 c12:	31 f4       	brne	.+12     	; 0xc20 <vfprintf+0x232>
 c14:	23 2d       	mov	r18, r3
 c16:	2f 7e       	andi	r18, 0xEF	; 239
 c18:	b2 2e       	mov	r11, r18
 c1a:	2a e0       	ldi	r18, 0x0A	; 10
 c1c:	30 e0       	ldi	r19, 0x00	; 0
 c1e:	25 c0       	rjmp	.+74     	; 0xc6a <vfprintf+0x27c>
 c20:	93 2d       	mov	r25, r3
 c22:	99 7f       	andi	r25, 0xF9	; 249
 c24:	b9 2e       	mov	r11, r25
 c26:	8f 36       	cpi	r24, 0x6F	; 111
 c28:	c1 f0       	breq	.+48     	; 0xc5a <vfprintf+0x26c>
 c2a:	18 f4       	brcc	.+6      	; 0xc32 <vfprintf+0x244>
 c2c:	88 35       	cpi	r24, 0x58	; 88
 c2e:	79 f0       	breq	.+30     	; 0xc4e <vfprintf+0x260>
 c30:	b5 c0       	rjmp	.+362    	; 0xd9c <vfprintf+0x3ae>
 c32:	80 37       	cpi	r24, 0x70	; 112
 c34:	19 f0       	breq	.+6      	; 0xc3c <vfprintf+0x24e>
 c36:	88 37       	cpi	r24, 0x78	; 120
 c38:	21 f0       	breq	.+8      	; 0xc42 <vfprintf+0x254>
 c3a:	b0 c0       	rjmp	.+352    	; 0xd9c <vfprintf+0x3ae>
 c3c:	e9 2f       	mov	r30, r25
 c3e:	e0 61       	ori	r30, 0x10	; 16
 c40:	be 2e       	mov	r11, r30
 c42:	b4 fe       	sbrs	r11, 4
 c44:	0d c0       	rjmp	.+26     	; 0xc60 <vfprintf+0x272>
 c46:	fb 2d       	mov	r31, r11
 c48:	f4 60       	ori	r31, 0x04	; 4
 c4a:	bf 2e       	mov	r11, r31
 c4c:	09 c0       	rjmp	.+18     	; 0xc60 <vfprintf+0x272>
 c4e:	34 fe       	sbrs	r3, 4
 c50:	0a c0       	rjmp	.+20     	; 0xc66 <vfprintf+0x278>
 c52:	29 2f       	mov	r18, r25
 c54:	26 60       	ori	r18, 0x06	; 6
 c56:	b2 2e       	mov	r11, r18
 c58:	06 c0       	rjmp	.+12     	; 0xc66 <vfprintf+0x278>
 c5a:	28 e0       	ldi	r18, 0x08	; 8
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	05 c0       	rjmp	.+10     	; 0xc6a <vfprintf+0x27c>
 c60:	20 e1       	ldi	r18, 0x10	; 16
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0x27c>
 c66:	20 e1       	ldi	r18, 0x10	; 16
 c68:	32 e0       	ldi	r19, 0x02	; 2
 c6a:	f8 01       	movw	r30, r16
 c6c:	b7 fe       	sbrs	r11, 7
 c6e:	07 c0       	rjmp	.+14     	; 0xc7e <vfprintf+0x290>
 c70:	60 81       	ld	r22, Z
 c72:	71 81       	ldd	r23, Z+1	; 0x01
 c74:	82 81       	ldd	r24, Z+2	; 0x02
 c76:	93 81       	ldd	r25, Z+3	; 0x03
 c78:	0c 5f       	subi	r16, 0xFC	; 252
 c7a:	1f 4f       	sbci	r17, 0xFF	; 255
 c7c:	06 c0       	rjmp	.+12     	; 0xc8a <vfprintf+0x29c>
 c7e:	60 81       	ld	r22, Z
 c80:	71 81       	ldd	r23, Z+1	; 0x01
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 5f       	subi	r16, 0xFE	; 254
 c88:	1f 4f       	sbci	r17, 0xFF	; 255
 c8a:	a3 01       	movw	r20, r6
 c8c:	0e 94 2a 07 	call	0xe54	; 0xe54 <__ultoa_invert>
 c90:	88 2e       	mov	r8, r24
 c92:	86 18       	sub	r8, r6
 c94:	fb 2d       	mov	r31, r11
 c96:	ff 77       	andi	r31, 0x7F	; 127
 c98:	3f 2e       	mov	r3, r31
 c9a:	36 fe       	sbrs	r3, 6
 c9c:	0d c0       	rjmp	.+26     	; 0xcb8 <vfprintf+0x2ca>
 c9e:	23 2d       	mov	r18, r3
 ca0:	2e 7f       	andi	r18, 0xFE	; 254
 ca2:	a2 2e       	mov	r10, r18
 ca4:	89 14       	cp	r8, r9
 ca6:	58 f4       	brcc	.+22     	; 0xcbe <vfprintf+0x2d0>
 ca8:	34 fe       	sbrs	r3, 4
 caa:	0b c0       	rjmp	.+22     	; 0xcc2 <vfprintf+0x2d4>
 cac:	32 fc       	sbrc	r3, 2
 cae:	09 c0       	rjmp	.+18     	; 0xcc2 <vfprintf+0x2d4>
 cb0:	83 2d       	mov	r24, r3
 cb2:	8e 7e       	andi	r24, 0xEE	; 238
 cb4:	a8 2e       	mov	r10, r24
 cb6:	05 c0       	rjmp	.+10     	; 0xcc2 <vfprintf+0x2d4>
 cb8:	b8 2c       	mov	r11, r8
 cba:	a3 2c       	mov	r10, r3
 cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <vfprintf+0x2d6>
 cbe:	b8 2c       	mov	r11, r8
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <vfprintf+0x2d6>
 cc2:	b9 2c       	mov	r11, r9
 cc4:	a4 fe       	sbrs	r10, 4
 cc6:	0f c0       	rjmp	.+30     	; 0xce6 <vfprintf+0x2f8>
 cc8:	fe 01       	movw	r30, r28
 cca:	e8 0d       	add	r30, r8
 ccc:	f1 1d       	adc	r31, r1
 cce:	80 81       	ld	r24, Z
 cd0:	80 33       	cpi	r24, 0x30	; 48
 cd2:	21 f4       	brne	.+8      	; 0xcdc <vfprintf+0x2ee>
 cd4:	9a 2d       	mov	r25, r10
 cd6:	99 7e       	andi	r25, 0xE9	; 233
 cd8:	a9 2e       	mov	r10, r25
 cda:	09 c0       	rjmp	.+18     	; 0xcee <vfprintf+0x300>
 cdc:	a2 fe       	sbrs	r10, 2
 cde:	06 c0       	rjmp	.+12     	; 0xcec <vfprintf+0x2fe>
 ce0:	b3 94       	inc	r11
 ce2:	b3 94       	inc	r11
 ce4:	04 c0       	rjmp	.+8      	; 0xcee <vfprintf+0x300>
 ce6:	8a 2d       	mov	r24, r10
 ce8:	86 78       	andi	r24, 0x86	; 134
 cea:	09 f0       	breq	.+2      	; 0xcee <vfprintf+0x300>
 cec:	b3 94       	inc	r11
 cee:	a3 fc       	sbrc	r10, 3
 cf0:	11 c0       	rjmp	.+34     	; 0xd14 <vfprintf+0x326>
 cf2:	a0 fe       	sbrs	r10, 0
 cf4:	06 c0       	rjmp	.+12     	; 0xd02 <vfprintf+0x314>
 cf6:	b2 14       	cp	r11, r2
 cf8:	88 f4       	brcc	.+34     	; 0xd1c <vfprintf+0x32e>
 cfa:	28 0c       	add	r2, r8
 cfc:	92 2c       	mov	r9, r2
 cfe:	9b 18       	sub	r9, r11
 d00:	0e c0       	rjmp	.+28     	; 0xd1e <vfprintf+0x330>
 d02:	b2 14       	cp	r11, r2
 d04:	60 f4       	brcc	.+24     	; 0xd1e <vfprintf+0x330>
 d06:	b6 01       	movw	r22, r12
 d08:	80 e2       	ldi	r24, 0x20	; 32
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	0e 94 ee 06 	call	0xddc	; 0xddc <fputc>
 d10:	b3 94       	inc	r11
 d12:	f7 cf       	rjmp	.-18     	; 0xd02 <vfprintf+0x314>
 d14:	b2 14       	cp	r11, r2
 d16:	18 f4       	brcc	.+6      	; 0xd1e <vfprintf+0x330>
 d18:	2b 18       	sub	r2, r11
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x332>
 d1c:	98 2c       	mov	r9, r8
 d1e:	21 2c       	mov	r2, r1
 d20:	a4 fe       	sbrs	r10, 4
 d22:	10 c0       	rjmp	.+32     	; 0xd44 <vfprintf+0x356>
 d24:	b6 01       	movw	r22, r12
 d26:	80 e3       	ldi	r24, 0x30	; 48
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	0e 94 ee 06 	call	0xddc	; 0xddc <fputc>
 d2e:	a2 fe       	sbrs	r10, 2
 d30:	17 c0       	rjmp	.+46     	; 0xd60 <vfprintf+0x372>
 d32:	a1 fc       	sbrc	r10, 1
 d34:	03 c0       	rjmp	.+6      	; 0xd3c <vfprintf+0x34e>
 d36:	88 e7       	ldi	r24, 0x78	; 120
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	02 c0       	rjmp	.+4      	; 0xd40 <vfprintf+0x352>
 d3c:	88 e5       	ldi	r24, 0x58	; 88
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	b6 01       	movw	r22, r12
 d42:	0c c0       	rjmp	.+24     	; 0xd5c <vfprintf+0x36e>
 d44:	8a 2d       	mov	r24, r10
 d46:	86 78       	andi	r24, 0x86	; 134
 d48:	59 f0       	breq	.+22     	; 0xd60 <vfprintf+0x372>
 d4a:	a1 fe       	sbrs	r10, 1
 d4c:	02 c0       	rjmp	.+4      	; 0xd52 <vfprintf+0x364>
 d4e:	8b e2       	ldi	r24, 0x2B	; 43
 d50:	01 c0       	rjmp	.+2      	; 0xd54 <vfprintf+0x366>
 d52:	80 e2       	ldi	r24, 0x20	; 32
 d54:	a7 fc       	sbrc	r10, 7
 d56:	8d e2       	ldi	r24, 0x2D	; 45
 d58:	b6 01       	movw	r22, r12
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	0e 94 ee 06 	call	0xddc	; 0xddc <fputc>
 d60:	89 14       	cp	r8, r9
 d62:	38 f4       	brcc	.+14     	; 0xd72 <vfprintf+0x384>
 d64:	b6 01       	movw	r22, r12
 d66:	80 e3       	ldi	r24, 0x30	; 48
 d68:	90 e0       	ldi	r25, 0x00	; 0
 d6a:	0e 94 ee 06 	call	0xddc	; 0xddc <fputc>
 d6e:	9a 94       	dec	r9
 d70:	f7 cf       	rjmp	.-18     	; 0xd60 <vfprintf+0x372>
 d72:	8a 94       	dec	r8
 d74:	f3 01       	movw	r30, r6
 d76:	e8 0d       	add	r30, r8
 d78:	f1 1d       	adc	r31, r1
 d7a:	80 81       	ld	r24, Z
 d7c:	b6 01       	movw	r22, r12
 d7e:	90 e0       	ldi	r25, 0x00	; 0
 d80:	0e 94 ee 06 	call	0xddc	; 0xddc <fputc>
 d84:	81 10       	cpse	r8, r1
 d86:	f5 cf       	rjmp	.-22     	; 0xd72 <vfprintf+0x384>
 d88:	22 20       	and	r2, r2
 d8a:	09 f4       	brne	.+2      	; 0xd8e <vfprintf+0x3a0>
 d8c:	42 ce       	rjmp	.-892    	; 0xa12 <vfprintf+0x24>
 d8e:	b6 01       	movw	r22, r12
 d90:	80 e2       	ldi	r24, 0x20	; 32
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	0e 94 ee 06 	call	0xddc	; 0xddc <fputc>
 d98:	2a 94       	dec	r2
 d9a:	f6 cf       	rjmp	.-20     	; 0xd88 <vfprintf+0x39a>
 d9c:	f6 01       	movw	r30, r12
 d9e:	86 81       	ldd	r24, Z+6	; 0x06
 da0:	97 81       	ldd	r25, Z+7	; 0x07
 da2:	02 c0       	rjmp	.+4      	; 0xda8 <vfprintf+0x3ba>
 da4:	8f ef       	ldi	r24, 0xFF	; 255
 da6:	9f ef       	ldi	r25, 0xFF	; 255
 da8:	2b 96       	adiw	r28, 0x0b	; 11
 daa:	e2 e1       	ldi	r30, 0x12	; 18
 dac:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__epilogue_restores__>

00000db0 <strnlen_P>:
 db0:	fc 01       	movw	r30, r24
 db2:	05 90       	lpm	r0, Z+
 db4:	61 50       	subi	r22, 0x01	; 1
 db6:	70 40       	sbci	r23, 0x00	; 0
 db8:	01 10       	cpse	r0, r1
 dba:	d8 f7       	brcc	.-10     	; 0xdb2 <strnlen_P+0x2>
 dbc:	80 95       	com	r24
 dbe:	90 95       	com	r25
 dc0:	8e 0f       	add	r24, r30
 dc2:	9f 1f       	adc	r25, r31
 dc4:	08 95       	ret

00000dc6 <strnlen>:
 dc6:	fc 01       	movw	r30, r24
 dc8:	61 50       	subi	r22, 0x01	; 1
 dca:	70 40       	sbci	r23, 0x00	; 0
 dcc:	01 90       	ld	r0, Z+
 dce:	01 10       	cpse	r0, r1
 dd0:	d8 f7       	brcc	.-10     	; 0xdc8 <strnlen+0x2>
 dd2:	80 95       	com	r24
 dd4:	90 95       	com	r25
 dd6:	8e 0f       	add	r24, r30
 dd8:	9f 1f       	adc	r25, r31
 dda:	08 95       	ret

00000ddc <fputc>:
 ddc:	0f 93       	push	r16
 dde:	1f 93       	push	r17
 de0:	cf 93       	push	r28
 de2:	df 93       	push	r29
 de4:	fb 01       	movw	r30, r22
 de6:	23 81       	ldd	r18, Z+3	; 0x03
 de8:	21 fd       	sbrc	r18, 1
 dea:	03 c0       	rjmp	.+6      	; 0xdf2 <fputc+0x16>
 dec:	8f ef       	ldi	r24, 0xFF	; 255
 dee:	9f ef       	ldi	r25, 0xFF	; 255
 df0:	2c c0       	rjmp	.+88     	; 0xe4a <fputc+0x6e>
 df2:	22 ff       	sbrs	r18, 2
 df4:	16 c0       	rjmp	.+44     	; 0xe22 <fputc+0x46>
 df6:	46 81       	ldd	r20, Z+6	; 0x06
 df8:	57 81       	ldd	r21, Z+7	; 0x07
 dfa:	24 81       	ldd	r18, Z+4	; 0x04
 dfc:	35 81       	ldd	r19, Z+5	; 0x05
 dfe:	42 17       	cp	r20, r18
 e00:	53 07       	cpc	r21, r19
 e02:	44 f4       	brge	.+16     	; 0xe14 <fputc+0x38>
 e04:	a0 81       	ld	r26, Z
 e06:	b1 81       	ldd	r27, Z+1	; 0x01
 e08:	9d 01       	movw	r18, r26
 e0a:	2f 5f       	subi	r18, 0xFF	; 255
 e0c:	3f 4f       	sbci	r19, 0xFF	; 255
 e0e:	31 83       	std	Z+1, r19	; 0x01
 e10:	20 83       	st	Z, r18
 e12:	8c 93       	st	X, r24
 e14:	26 81       	ldd	r18, Z+6	; 0x06
 e16:	37 81       	ldd	r19, Z+7	; 0x07
 e18:	2f 5f       	subi	r18, 0xFF	; 255
 e1a:	3f 4f       	sbci	r19, 0xFF	; 255
 e1c:	37 83       	std	Z+7, r19	; 0x07
 e1e:	26 83       	std	Z+6, r18	; 0x06
 e20:	14 c0       	rjmp	.+40     	; 0xe4a <fputc+0x6e>
 e22:	8b 01       	movw	r16, r22
 e24:	ec 01       	movw	r28, r24
 e26:	fb 01       	movw	r30, r22
 e28:	00 84       	ldd	r0, Z+8	; 0x08
 e2a:	f1 85       	ldd	r31, Z+9	; 0x09
 e2c:	e0 2d       	mov	r30, r0
 e2e:	09 95       	icall
 e30:	89 2b       	or	r24, r25
 e32:	e1 f6       	brne	.-72     	; 0xdec <fputc+0x10>
 e34:	d8 01       	movw	r26, r16
 e36:	16 96       	adiw	r26, 0x06	; 6
 e38:	8d 91       	ld	r24, X+
 e3a:	9c 91       	ld	r25, X
 e3c:	17 97       	sbiw	r26, 0x07	; 7
 e3e:	01 96       	adiw	r24, 0x01	; 1
 e40:	17 96       	adiw	r26, 0x07	; 7
 e42:	9c 93       	st	X, r25
 e44:	8e 93       	st	-X, r24
 e46:	16 97       	sbiw	r26, 0x06	; 6
 e48:	ce 01       	movw	r24, r28
 e4a:	df 91       	pop	r29
 e4c:	cf 91       	pop	r28
 e4e:	1f 91       	pop	r17
 e50:	0f 91       	pop	r16
 e52:	08 95       	ret

00000e54 <__ultoa_invert>:
 e54:	fa 01       	movw	r30, r20
 e56:	aa 27       	eor	r26, r26
 e58:	28 30       	cpi	r18, 0x08	; 8
 e5a:	51 f1       	breq	.+84     	; 0xeb0 <__ultoa_invert+0x5c>
 e5c:	20 31       	cpi	r18, 0x10	; 16
 e5e:	81 f1       	breq	.+96     	; 0xec0 <__ultoa_invert+0x6c>
 e60:	e8 94       	clt
 e62:	6f 93       	push	r22
 e64:	6e 7f       	andi	r22, 0xFE	; 254
 e66:	6e 5f       	subi	r22, 0xFE	; 254
 e68:	7f 4f       	sbci	r23, 0xFF	; 255
 e6a:	8f 4f       	sbci	r24, 0xFF	; 255
 e6c:	9f 4f       	sbci	r25, 0xFF	; 255
 e6e:	af 4f       	sbci	r26, 0xFF	; 255
 e70:	b1 e0       	ldi	r27, 0x01	; 1
 e72:	3e d0       	rcall	.+124    	; 0xef0 <__ultoa_invert+0x9c>
 e74:	b4 e0       	ldi	r27, 0x04	; 4
 e76:	3c d0       	rcall	.+120    	; 0xef0 <__ultoa_invert+0x9c>
 e78:	67 0f       	add	r22, r23
 e7a:	78 1f       	adc	r23, r24
 e7c:	89 1f       	adc	r24, r25
 e7e:	9a 1f       	adc	r25, r26
 e80:	a1 1d       	adc	r26, r1
 e82:	68 0f       	add	r22, r24
 e84:	79 1f       	adc	r23, r25
 e86:	8a 1f       	adc	r24, r26
 e88:	91 1d       	adc	r25, r1
 e8a:	a1 1d       	adc	r26, r1
 e8c:	6a 0f       	add	r22, r26
 e8e:	71 1d       	adc	r23, r1
 e90:	81 1d       	adc	r24, r1
 e92:	91 1d       	adc	r25, r1
 e94:	a1 1d       	adc	r26, r1
 e96:	20 d0       	rcall	.+64     	; 0xed8 <__ultoa_invert+0x84>
 e98:	09 f4       	brne	.+2      	; 0xe9c <__ultoa_invert+0x48>
 e9a:	68 94       	set
 e9c:	3f 91       	pop	r19
 e9e:	2a e0       	ldi	r18, 0x0A	; 10
 ea0:	26 9f       	mul	r18, r22
 ea2:	11 24       	eor	r1, r1
 ea4:	30 19       	sub	r19, r0
 ea6:	30 5d       	subi	r19, 0xD0	; 208
 ea8:	31 93       	st	Z+, r19
 eaa:	de f6       	brtc	.-74     	; 0xe62 <__ultoa_invert+0xe>
 eac:	cf 01       	movw	r24, r30
 eae:	08 95       	ret
 eb0:	46 2f       	mov	r20, r22
 eb2:	47 70       	andi	r20, 0x07	; 7
 eb4:	40 5d       	subi	r20, 0xD0	; 208
 eb6:	41 93       	st	Z+, r20
 eb8:	b3 e0       	ldi	r27, 0x03	; 3
 eba:	0f d0       	rcall	.+30     	; 0xeda <__ultoa_invert+0x86>
 ebc:	c9 f7       	brne	.-14     	; 0xeb0 <__ultoa_invert+0x5c>
 ebe:	f6 cf       	rjmp	.-20     	; 0xeac <__ultoa_invert+0x58>
 ec0:	46 2f       	mov	r20, r22
 ec2:	4f 70       	andi	r20, 0x0F	; 15
 ec4:	40 5d       	subi	r20, 0xD0	; 208
 ec6:	4a 33       	cpi	r20, 0x3A	; 58
 ec8:	18 f0       	brcs	.+6      	; 0xed0 <__ultoa_invert+0x7c>
 eca:	49 5d       	subi	r20, 0xD9	; 217
 ecc:	31 fd       	sbrc	r19, 1
 ece:	40 52       	subi	r20, 0x20	; 32
 ed0:	41 93       	st	Z+, r20
 ed2:	02 d0       	rcall	.+4      	; 0xed8 <__ultoa_invert+0x84>
 ed4:	a9 f7       	brne	.-22     	; 0xec0 <__ultoa_invert+0x6c>
 ed6:	ea cf       	rjmp	.-44     	; 0xeac <__ultoa_invert+0x58>
 ed8:	b4 e0       	ldi	r27, 0x04	; 4
 eda:	a6 95       	lsr	r26
 edc:	97 95       	ror	r25
 ede:	87 95       	ror	r24
 ee0:	77 95       	ror	r23
 ee2:	67 95       	ror	r22
 ee4:	ba 95       	dec	r27
 ee6:	c9 f7       	brne	.-14     	; 0xeda <__ultoa_invert+0x86>
 ee8:	00 97       	sbiw	r24, 0x00	; 0
 eea:	61 05       	cpc	r22, r1
 eec:	71 05       	cpc	r23, r1
 eee:	08 95       	ret
 ef0:	9b 01       	movw	r18, r22
 ef2:	ac 01       	movw	r20, r24
 ef4:	0a 2e       	mov	r0, r26
 ef6:	06 94       	lsr	r0
 ef8:	57 95       	ror	r21
 efa:	47 95       	ror	r20
 efc:	37 95       	ror	r19
 efe:	27 95       	ror	r18
 f00:	ba 95       	dec	r27
 f02:	c9 f7       	brne	.-14     	; 0xef6 <__ultoa_invert+0xa2>
 f04:	62 0f       	add	r22, r18
 f06:	73 1f       	adc	r23, r19
 f08:	84 1f       	adc	r24, r20
 f0a:	95 1f       	adc	r25, r21
 f0c:	a0 1d       	adc	r26, r0
 f0e:	08 95       	ret

00000f10 <__prologue_saves__>:
 f10:	2f 92       	push	r2
 f12:	3f 92       	push	r3
 f14:	4f 92       	push	r4
 f16:	5f 92       	push	r5
 f18:	6f 92       	push	r6
 f1a:	7f 92       	push	r7
 f1c:	8f 92       	push	r8
 f1e:	9f 92       	push	r9
 f20:	af 92       	push	r10
 f22:	bf 92       	push	r11
 f24:	cf 92       	push	r12
 f26:	df 92       	push	r13
 f28:	ef 92       	push	r14
 f2a:	ff 92       	push	r15
 f2c:	0f 93       	push	r16
 f2e:	1f 93       	push	r17
 f30:	cf 93       	push	r28
 f32:	df 93       	push	r29
 f34:	cd b7       	in	r28, 0x3d	; 61
 f36:	de b7       	in	r29, 0x3e	; 62
 f38:	ca 1b       	sub	r28, r26
 f3a:	db 0b       	sbc	r29, r27
 f3c:	0f b6       	in	r0, 0x3f	; 63
 f3e:	f8 94       	cli
 f40:	de bf       	out	0x3e, r29	; 62
 f42:	0f be       	out	0x3f, r0	; 63
 f44:	cd bf       	out	0x3d, r28	; 61
 f46:	09 94       	ijmp

00000f48 <__epilogue_restores__>:
 f48:	2a 88       	ldd	r2, Y+18	; 0x12
 f4a:	39 88       	ldd	r3, Y+17	; 0x11
 f4c:	48 88       	ldd	r4, Y+16	; 0x10
 f4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 f50:	6e 84       	ldd	r6, Y+14	; 0x0e
 f52:	7d 84       	ldd	r7, Y+13	; 0x0d
 f54:	8c 84       	ldd	r8, Y+12	; 0x0c
 f56:	9b 84       	ldd	r9, Y+11	; 0x0b
 f58:	aa 84       	ldd	r10, Y+10	; 0x0a
 f5a:	b9 84       	ldd	r11, Y+9	; 0x09
 f5c:	c8 84       	ldd	r12, Y+8	; 0x08
 f5e:	df 80       	ldd	r13, Y+7	; 0x07
 f60:	ee 80       	ldd	r14, Y+6	; 0x06
 f62:	fd 80       	ldd	r15, Y+5	; 0x05
 f64:	0c 81       	ldd	r16, Y+4	; 0x04
 f66:	1b 81       	ldd	r17, Y+3	; 0x03
 f68:	aa 81       	ldd	r26, Y+2	; 0x02
 f6a:	b9 81       	ldd	r27, Y+1	; 0x01
 f6c:	ce 0f       	add	r28, r30
 f6e:	d1 1d       	adc	r29, r1
 f70:	0f b6       	in	r0, 0x3f	; 63
 f72:	f8 94       	cli
 f74:	de bf       	out	0x3e, r29	; 62
 f76:	0f be       	out	0x3f, r0	; 63
 f78:	cd bf       	out	0x3d, r28	; 61
 f7a:	ed 01       	movw	r28, r26
 f7c:	08 95       	ret

00000f7e <_exit>:
 f7e:	f8 94       	cli

00000f80 <__stop_program>:
 f80:	ff cf       	rjmp	.-2      	; 0xf80 <__stop_program>
