
SignalGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000212  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800106  00800106  000002ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a6a  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000804  00000000  00000000  00000e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000525  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000461  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f9  00000000  00000000  000020d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_1>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  9e:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:
		return(status);
	
	I2C_Stop();
	
	return(0);	
}
  a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  aa:	88 e9       	ldi	r24, 0x98	; 152
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b6:	08 95       	ret

000000b8 <I2C_Start>:
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <I2C_Start+0x6>
  c6:	08 95       	ret

000000c8 <I2C_Stop>:
  c8:	84 e9       	ldi	r24, 0x94	; 148
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ce:	08 95       	ret

000000d0 <I2C_Write>:
  d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	88 23       	and	r24, r24
  e0:	e4 f7       	brge	.-8      	; 0xda <I2C_Write+0xa>
  e2:	08 95       	ret

000000e4 <I2C_GetStatus>:
  e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  e8:	88 7f       	andi	r24, 0xF8	; 248
  ea:	08 95       	ret

000000ec <I2C_WriteString>:
/**
*	7-bit addressing mode
*	Returns 0 on success and status code on failure
*/
uint8_t I2C_WriteString(uint8_t addr, uint8_t *data, uint8_t size)
{
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c8 2f       	mov	r28, r24
  fc:	8b 01       	movw	r16, r22
  fe:	f4 2e       	mov	r15, r20
	uint8_t status = 0;
	uint8_t i = 0;
	
	I2C_Start();
 100:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
	status = I2C_GetStatus();
 104:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_GetStatus>
	if (status != 0x08)
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	f9 f4       	brne	.+62     	; 0x14a <I2C_WriteString+0x5e>
		return(status);

	addr &= 0b11111110;		// write mode
	
	I2C_Write(addr);
 10c:	8c 2f       	mov	r24, r28
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	status = I2C_GetStatus();
 114:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_GetStatus>
 118:	c8 2f       	mov	r28, r24
	if (status != 0x18)
 11a:	88 31       	cpi	r24, 0x18	; 24
 11c:	a1 f4       	brne	.+40     	; 0x146 <I2C_WriteString+0x5a>
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	0c c0       	rjmp	.+24     	; 0x13a <I2C_WriteString+0x4e>
		return(status);
	
	for (i = 0; i < size; i++)
	{
		I2C_Write(*data++);
 122:	68 01       	movw	r12, r16
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	c8 1a       	sub	r12, r24
 128:	d8 0a       	sbc	r13, r24
 12a:	f8 01       	movw	r30, r16
 12c:	80 81       	ld	r24, Z
 12e:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
		if (status != 0x18)
 132:	c8 31       	cpi	r28, 0x18	; 24
 134:	49 f4       	brne	.+18     	; 0x148 <I2C_WriteString+0x5c>
	I2C_Write(addr);
	status = I2C_GetStatus();
	if (status != 0x18)
		return(status);
	
	for (i = 0; i < size; i++)
 136:	df 5f       	subi	r29, 0xFF	; 255
	{
		I2C_Write(*data++);
 138:	86 01       	movw	r16, r12
	I2C_Write(addr);
	status = I2C_GetStatus();
	if (status != 0x18)
		return(status);
	
	for (i = 0; i < size; i++)
 13a:	df 15       	cp	r29, r15
 13c:	90 f3       	brcs	.-28     	; 0x122 <I2C_WriteString+0x36>
		I2C_Write(*data++);
		if (status != 0x18)
			return(status);
	}
	
	I2C_Stop();
 13e:	0e 94 64 00 	call	0xc8	; 0xc8 <I2C_Stop>
	
	return(status);
 142:	8c 2f       	mov	r24, r28
 144:	02 c0       	rjmp	.+4      	; 0x14a <I2C_WriteString+0x5e>
 146:	01 c0       	rjmp	.+2      	; 0x14a <I2C_WriteString+0x5e>
	
	for (i = 0; i < size; i++)
	{
		I2C_Write(*data++);
		if (status != 0x18)
			return(status);
 148:	8c 2f       	mov	r24, r28
	}
	
	I2C_Stop();
	
	return(status);
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	ff 90       	pop	r15
 154:	df 90       	pop	r13
 156:	cf 90       	pop	r12
 158:	08 95       	ret

0000015a <__vector_1>:
volatile uint8_t B_trace = 0;

volatile uint8_t count = 0;

ISR(INT0_vect) 
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	PORTD |= (0x01 << 7);	// set pin 8 high
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	8b b9       	out	0x0b, r24	; 11
	
	if (B_trace == 0x01)
 16c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <B_trace>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	51 f4       	brne	.+20     	; 0x188 <__vector_1+0x2e>
	{
		count--;
 174:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		A_trace = 0;
 17e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <A_trace>
		B_trace = 0;
 182:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <B_trace>
 186:	03 c0       	rjmp	.+6      	; 0x18e <__vector_1+0x34>
	}
	else
	{
		A_trace = 0x01;	
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <A_trace>
	}
}
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_2>:

ISR(INT1_vect)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
	PORTD &= ~(0x01 << 7);	// set pin 8 low
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	8f 77       	andi	r24, 0x7F	; 127
 1aa:	8b b9       	out	0x0b, r24	; 11
	
	if (A_trace == 0x01)
 1ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <A_trace>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	51 f4       	brne	.+20     	; 0x1c8 <__vector_2+0x2e>
	{
		count++;
 1b4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		A_trace = 0;
 1be:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <A_trace>
		B_trace = 0;
 1c2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <B_trace>
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <__vector_2+0x34>
	}
	else
	{
		B_trace = 0x01;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <B_trace>
	}
}
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <main>:
int main(void)
{	
	uint8_t status = 0;
	uint8_t *str = (uint8_t*)"Jocke";
	
	DDRD |= 0xff;
 1da:	8a b1       	in	r24, 0x0a	; 10
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 1e0:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0xc>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x12>
 1ec:	00 00       	nop
		
	_delay_ms(1);		// delay so the LCD can initialize
	
	I2C_Init();
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
	
	if ((status = I2C_WriteString(0x50, str, 0x05)) != 0)	// send an 'A' to LCD
 1f2:	45 e0       	ldi	r20, 0x05	; 5
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	80 e5       	ldi	r24, 0x50	; 80
 1fa:	0e 94 76 00 	call	0xec	; 0xec <I2C_WriteString>
 1fe:	88 23       	and	r24, r24
 200:	19 f0       	breq	.+6      	; 0x208 <main+0x2e>
	{
		PORTD = ~(status);
 202:	80 95       	com	r24
 204:	8b b9       	out	0x0b, r24	; 11
 206:	02 c0       	rjmp	.+4      	; 0x20c <main+0x32>
	}
	else
		PORTD = 0xff;	// means all leds are off. status OK! ;)
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	8b b9       	out	0x0b, r24	; 11
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0x32>

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
