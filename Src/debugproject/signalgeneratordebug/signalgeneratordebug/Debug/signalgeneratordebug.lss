
signalgeneratordebug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000702  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000702  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000731  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001334  00000000  00000000  000007d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000821  00000000  00000000  00001b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057d  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  000028ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027c  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c4  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000068a  0000068a  000006fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.AD9833_Init 00000062  000003c8  000003c8  0000043c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.AD9833_WriteData 00000022  000005de  000005de  00000652  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.AD9833_Reset 0000003c  0000056e  0000056e  000005e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.AD9833_SetFreq 000000da  000001a0  000001a0  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.AD9833_SetPhase 00000046  000004e4  000004e4  00000558  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000005c  00000488  00000488  000004fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.SPI_Init 00000034  000005aa  000005aa  0000061e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.SPI_Tranceiver 0000000c  0000064c  0000064c  000006c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.SPI_End_Transfer 00000008  00000664  00000664  000006d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.SPI_Start_Transfer 00000008  0000066c  0000066c  000006e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.avrlibc.fplib 00000008  00000674  00000674  000006e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.avrlibc.fplib 000000de  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.avrlibc.fplib 0000005e  0000042a  0000042a  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.avrlibc.fplib 0000007a  0000034e  0000034e  000003c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.avrlibc.fplib 0000000c  00000658  00000658  000006cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc.fplib 00000006  00000684  00000684  000006f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.avrlibc.fplib 0000000e  00000622  00000622  00000696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.avrlibc.fplib 0000000e  00000630  00000630  000006a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.avrlibc.fplib 00000022  00000600  00000600  00000674  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.avrlibc.fplib 00000044  0000052a  0000052a  0000059e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.avrlibc.fplib 0000000e  0000063e  0000063e  000006b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc.fplib 00000008  0000067c  0000067c  000006f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc.fplib 000000d4  0000027a  0000027a  000002ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
   8:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
   c:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  10:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  14:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  18:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  1c:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  20:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  24:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  28:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  2c:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  30:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  34:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  38:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  3c:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  40:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  44:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  48:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  4c:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  50:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  54:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  58:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  5c:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  60:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>
  64:	0c 94 45 03 	jmp	0x68a	; 0x68a <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 10       	cpse	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 44 02 	call	0x488	; 0x488 <main>
  ba:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000068a <__bad_interrupt>:
 68a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.AD9833_Init:

000003c8 <AD9833_Init>:
		case 2: {
			controlRegister &= 0xFFFD; // Output clock (rectangle): D5-1 and D1-0
			controlRegister |= 0x0020;
		} break;
	}
	AD9833_WriteData(controlRegister);
 3c8:	80 e4       	ldi	r24, 0x40	; 64
 3ca:	98 e7       	ldi	r25, 0x78	; 120
 3cc:	ad e7       	ldi	r26, 0x7D	; 125
 3ce:	b1 e0       	ldi	r27, 0x01	; 1
 3d0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mclk>
 3d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <mclk+0x1>
 3d8:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <mclk+0x2>
 3dc:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <mclk+0x3>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e2       	ldi	r25, 0x20	; 32
 3e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <controlRegister+0x1>
 3e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <controlRegister>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e4       	ldi	r25, 0x40	; 64
 3f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 ec       	ldi	r25, 0xC0	; 192
 3fc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <phaseRegister+0x1>
 400:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <phaseRegister>
 404:	88 ee       	ldi	r24, 0xE8	; 232
 406:	93 e0       	ldi	r25, 0x03	; 3
 408:	a0 e0       	ldi	r26, 0x00	; 0
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freq>
 410:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freq+0x1>
 414:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <freq+0x2>
 418:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <freq+0x3>
 41c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <phase+0x1>
 420:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <phase>
 424:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_Init>
 428:	08 95       	ret

Disassembly of section .text.AD9833_WriteData:

000005de <AD9833_WriteData>:
	SPI_Init();
}


void AD9833_WriteData(uint16_t data)
{
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	c8 2f       	mov	r28, r24
 5e4:	d9 2f       	mov	r29, r25
	*/
	uint8_t tmp = 0;
	
	// get high byte of data
	tmp = (uint8_t)(data >> 8);
	SPI_Start_Transfer();
 5e6:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_Start_Transfer>
	SPI_Tranceiver(tmp);
 5ea:	8d 2f       	mov	r24, r29
 5ec:	0e 94 26 03 	call	0x64c	; 0x64c <SPI_Tranceiver>
	// get low byte of data
	tmp = (uint8_t)(data & 0x00ff);
	SPI_Tranceiver(tmp);
 5f0:	8c 2f       	mov	r24, r28
 5f2:	0e 94 26 03 	call	0x64c	; 0x64c <SPI_Tranceiver>
	SPI_End_Transfer();
 5f6:	0e 94 32 03 	call	0x664	; 0x664 <SPI_End_Transfer>
	
}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

Disassembly of section .text.AD9833_Reset:

0000056e <AD9833_Reset>:
/**
*	reset: 1 means set reset and 0 means not reset. or unreset.
*/
void AD9833_Reset(uint8_t reset)
{
	if (reset == 0)
 56e:	81 11       	cpse	r24, r1
 570:	0a c0       	rjmp	.+20     	; 0x586 <AD9833_Reset+0x18>
	{
		controlRegister &= 0xFEFF;	// set D8 to 0
 572:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <controlRegister>
 576:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <controlRegister+0x1>
 57a:	9e 7f       	andi	r25, 0xFE	; 254
 57c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <controlRegister+0x1>
 580:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <controlRegister>
 584:	0b c0       	rjmp	.+22     	; 0x59c <AD9833_Reset+0x2e>
	}
	else if (reset == 1)
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	49 f4       	brne	.+18     	; 0x59c <AD9833_Reset+0x2e>
	{
		controlRegister |= 0x0100;	// set D8 to 1
 58a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <controlRegister>
 58e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <controlRegister+0x1>
 592:	91 60       	ori	r25, 0x01	; 1
 594:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <controlRegister+0x1>
 598:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <controlRegister>
	}
	AD9833_WriteData(controlRegister);
 59c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <controlRegister>
 5a0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <controlRegister+0x1>
 5a4:	0e 94 ef 02 	call	0x5de	; 0x5de <AD9833_WriteData>
 5a8:	08 95       	ret

Disassembly of section .text.AD9833_SetFreq:

000001a0 <AD9833_SetFreq>:
		case 2: {
			controlRegister &= 0xFFFD; // Output clock (rectangle): D5-1 and D1-0
			controlRegister |= 0x0020;
		} break;
	}
	AD9833_WriteData(controlRegister);
 1a0:	8f 92       	push	r8
 1a2:	9f 92       	push	r9
 1a4:	af 92       	push	r10
 1a6:	bf 92       	push	r11
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <mclk>
 1b8:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <mclk+0x1>
 1bc:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <mclk+0x2>
 1c0:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <mclk+0x3>
 1c4:	97 01       	movw	r18, r14
 1c6:	86 01       	movw	r16, r12
 1c8:	36 95       	lsr	r19
 1ca:	27 95       	ror	r18
 1cc:	17 95       	ror	r17
 1ce:	07 95       	ror	r16
 1d0:	06 17       	cp	r16, r22
 1d2:	17 07       	cpc	r17, r23
 1d4:	28 07       	cpc	r18, r24
 1d6:	39 07       	cpc	r19, r25
 1d8:	68 f4       	brcc	.+26     	; 0x1f4 <AD9833_SetFreq+0x54>
 1da:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <freq>
 1de:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <freq+0x1>
 1e2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <freq+0x2>
 1e6:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <freq+0x3>
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e1       	ldi	r25, 0x10	; 16
 1f2:	1e c0       	rjmp	.+60     	; 0x230 <AD9833_SetFreq+0x90>
 1f4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <freq>
 1f8:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <freq+0x1>
 1fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <freq+0x2>
 200:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <freq+0x3>
 204:	0e 94 a7 01 	call	0x34e	; 0x34e <__floatunsisf>
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	40 e8       	ldi	r20, 0x80	; 128
 20e:	5d e4       	ldi	r21, 0x4D	; 77
 210:	0e 94 3e 03 	call	0x67c	; 0x67c <__mulsf3>
 214:	4b 01       	movw	r8, r22
 216:	5c 01       	movw	r10, r24
 218:	c7 01       	movw	r24, r14
 21a:	b6 01       	movw	r22, r12
 21c:	0e 94 a7 01 	call	0x34e	; 0x34e <__floatunsisf>
 220:	9b 01       	movw	r18, r22
 222:	ac 01       	movw	r20, r24
 224:	c5 01       	movw	r24, r10
 226:	b4 01       	movw	r22, r8
 228:	0e 94 3a 03 	call	0x674	; 0x674 <__divsf3>
 22c:	0e 94 15 02 	call	0x42a	; 0x42a <__fixunssfsi>
 230:	8b 01       	movw	r16, r22
 232:	9c 01       	movw	r18, r24
 234:	0f 2e       	mov	r0, r31
 236:	fe e0       	ldi	r31, 0x0E	; 14
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	17 95       	ror	r17
 23e:	07 95       	ror	r16
 240:	fa 95       	dec	r31
 242:	d1 f7       	brne	.-12     	; 0x238 <AD9833_SetFreq+0x98>
 244:	f0 2d       	mov	r31, r0
 246:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24a:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 24e:	04 2b       	or	r16, r20
 250:	15 2b       	or	r17, r21
 252:	cb 01       	movw	r24, r22
 254:	9f 73       	andi	r25, 0x3F	; 63
 256:	84 2b       	or	r24, r20
 258:	95 2b       	or	r25, r21
 25a:	0e 94 ef 02 	call	0x5de	; 0x5de <AD9833_WriteData>
 25e:	c8 01       	movw	r24, r16
 260:	0e 94 ef 02 	call	0x5de	; 0x5de <AD9833_WriteData>
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	df 90       	pop	r13
 26e:	cf 90       	pop	r12
 270:	bf 90       	pop	r11
 272:	af 90       	pop	r10
 274:	9f 90       	pop	r9
 276:	8f 90       	pop	r8
 278:	08 95       	ret

Disassembly of section .text.AD9833_SetPhase:

000004e4 <AD9833_SetPhase>:
	
	uint16_t phaseData;
	uint16_t LSW;
	
	// Phase cannot be negative
	if (_phase < 0) {
 4e4:	99 23       	and	r25, r25
 4e6:	2c f4       	brge	.+10     	; 0x4f2 <AD9833_SetPhase+0xe>
		phase = 0;
 4e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <phase+0x1>
 4ec:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <phase>
 4f0:	0f c0       	rjmp	.+30     	; 0x510 <AD9833_SetPhase+0x2c>
	}
	// Phase maximum is 2^12
	else if (_phase >= 4096) {
 4f2:	81 15       	cp	r24, r1
 4f4:	20 e1       	ldi	r18, 0x10	; 16
 4f6:	92 07       	cpc	r25, r18
 4f8:	3c f0       	brlt	.+14     	; 0x508 <AD9833_SetPhase+0x24>
		phase = 4096 - 1;
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	9f e0       	ldi	r25, 0x0F	; 15
 4fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <phase+0x1>
 502:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <phase>
 506:	04 c0       	rjmp	.+8      	; 0x510 <AD9833_SetPhase+0x2c>
	}
	// If all is good, set the new phase value
	else {
		phase = _phase;
 508:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <phase+0x1>
 50c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <phase>
	}
	// Extract the 12 bits from the freqReg and set D15-1, D14-1, D13-0, D12-X to
	// put data in PHASE0/1 register
	
	phaseData = phase | phaseRegister;
 510:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <phase>
 514:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <phase+0x1>
 518:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <phaseRegister>
 51c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <phaseRegister+0x1>
	LSW = (phaseData & 0x3FFF) | phaseRegister;
	
	AD9833_WriteData(phaseData);			// This might be wrong
 520:	82 2b       	or	r24, r18
 522:	93 2b       	or	r25, r19
 524:	0e 94 ef 02 	call	0x5de	; 0x5de <AD9833_WriteData>
 528:	08 95       	ret

Disassembly of section .text.main:

00000488 <main>:
#include "AD9833.h"

int main(void)
{
	
	AD9833_Init();
 488:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <AD9833_Init>
	
	DDRB |= (1 << DDB0);
 48c:	84 b1       	in	r24, 0x04	; 4
 48e:	81 60       	ori	r24, 0x01	; 1
 490:	84 b9       	out	0x04, r24	; 4
		
    while(1)
    {
        PORTB &= ~(1 << DDB0);
 492:	85 b1       	in	r24, 0x05	; 5
 494:	8e 7f       	andi	r24, 0xFE	; 254
 496:	85 b9       	out	0x05, r24	; 5

		AD9833_Reset(1);
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 b7 02 	call	0x56e	; 0x56e <AD9833_Reset>
		AD9833_SetFreq(1000);				// 1kHz
 49e:	68 ee       	ldi	r22, 0xE8	; 232
 4a0:	73 e0       	ldi	r23, 0x03	; 3
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <AD9833_SetFreq>
		AD9833_SetPhase(0);					// 0 phase shift
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 72 02 	call	0x4e4	; 0x4e4 <AD9833_SetPhase>
		AD9833_Reset(0);
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 b7 02 	call	0x56e	; 0x56e <AD9833_Reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	89 e6       	ldi	r24, 0x69	; 105
 4bc:	98 e1       	ldi	r25, 0x18	; 24
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	90 40       	sbci	r25, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <main+0x36>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <main+0x40>
 4c8:	00 00       	nop
	
		_delay_ms(500); 

		PORTB |= (1 << DDB0);
 4ca:	85 b1       	in	r24, 0x05	; 5
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	85 b9       	out	0x05, r24	; 5
 4d0:	2f ef       	ldi	r18, 0xFF	; 255
 4d2:	89 e6       	ldi	r24, 0x69	; 105
 4d4:	98 e1       	ldi	r25, 0x18	; 24
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	80 40       	sbci	r24, 0x00	; 0
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <main+0x4e>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <main+0x58>
 4e0:	00 00       	nop
 4e2:	d7 cf       	rjmp	.-82     	; 0x492 <main+0xa>

Disassembly of section .text.SPI_Init:

000005aa <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
	
	PORTB |= (1 << PORTB3);
 5aa:	85 b1       	in	r24, 0x05	; 5
 5ac:	88 60       	ori	r24, 0x08	; 8
 5ae:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PORTB5);
 5b0:	85 b1       	in	r24, 0x05	; 5
 5b2:	80 62       	ori	r24, 0x20	; 32
 5b4:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PORTB2);
 5b6:	85 b1       	in	r24, 0x05	; 5
 5b8:	84 60       	ori	r24, 0x04	; 4
 5ba:	85 b9       	out	0x05, r24	; 5
	
	// SS, MOSI and CLK as outputs
	DDRB |= (1 << DDB2) | (1 << DDB3) | (1 << DDB5);
 5bc:	84 b1       	in	r24, 0x04	; 4
 5be:	8c 62       	ori	r24, 0x2C	; 44
 5c0:	84 b9       	out	0x04, r24	; 4
	
	// MISO as input
	DDRB &= ~(1 << DDB4);
 5c2:	84 b1       	in	r24, 0x04	; 4
 5c4:	8f 7e       	andi	r24, 0xEF	; 239
 5c6:	84 b9       	out	0x04, r24	; 4

	// SPCR |= ~(1 << SPIE) | (1 << SPE) | (1 << DORD) | (1 << MSTR) | ~(1 << CPOL) | ~(1 << CPHA) | ~(1 << SPR1) | ~(1 << SPR0);
	
	PRR &= ~(1 << PRSPI);
 5c8:	e4 e6       	ldi	r30, 0x64	; 100
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	8b 7f       	andi	r24, 0xFB	; 251
 5d0:	80 83       	st	Z, r24
	
	SPSR &= ~(1 << SPI2X);
 5d2:	8d b5       	in	r24, 0x2d	; 45
 5d4:	8e 7f       	andi	r24, 0xFE	; 254
 5d6:	8d bd       	out	0x2d, r24	; 45
	// Enable SPI 4Mhz clock no interrupt enable. LSB. CPOL=1, CPHA=0
	SPCR = 0b01011000;
 5d8:	88 e5       	ldi	r24, 0x58	; 88
 5da:	8c bd       	out	0x2c, r24	; 44
 5dc:	08 95       	ret

Disassembly of section .text.SPI_Tranceiver:

0000064c <SPI_Tranceiver>:
	
}

uint8_t SPI_Tranceiver(uint8_t data)
{
	SPDR = (unsigned char)data;
 64c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
 64e:	0d b4       	in	r0, 0x2d	; 45
 650:	07 fe       	sbrs	r0, 7
 652:	fd cf       	rjmp	.-6      	; 0x64e <SPI_Tranceiver+0x2>
	
	return((uint8_t)SPDR);
 654:	8e b5       	in	r24, 0x2e	; 46
}
 656:	08 95       	ret

Disassembly of section .text.SPI_End_Transfer:

00000664 <SPI_End_Transfer>:

void SPI_End_Transfer(void)
{
	// Set SS pin high
	PORTB |= (1 << DDB2);
 664:	85 b1       	in	r24, 0x05	; 5
 666:	84 60       	ori	r24, 0x04	; 4
 668:	85 b9       	out	0x05, r24	; 5
 66a:	08 95       	ret

Disassembly of section .text.SPI_Start_Transfer:

0000066c <SPI_Start_Transfer>:
}

void SPI_Start_Transfer(void)
{
	// Set SS pin low
	PORTB &= ~(1 << DDB2);
 66c:	85 b1       	in	r24, 0x05	; 5
 66e:	8b 7f       	andi	r24, 0xFB	; 251
 670:	85 b9       	out	0x05, r24	; 5
 672:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000674 <__divsf3>:
 674:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
 678:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000000c2 <__divsf3x>:
  c2:	10 c0       	rjmp	.+32     	; 0xe4 <__divsf3x+0x22>
  c4:	0e 94 18 03 	call	0x630	; 0x630 <__fp_pscB>
  c8:	58 f0       	brcs	.+22     	; 0xe0 <__divsf3x+0x1e>
  ca:	0e 94 11 03 	call	0x622	; 0x622 <__fp_pscA>
  ce:	40 f0       	brcs	.+16     	; 0xe0 <__divsf3x+0x1e>
  d0:	29 f4       	brne	.+10     	; 0xdc <__divsf3x+0x1a>
  d2:	5f 3f       	cpi	r21, 0xFF	; 255
  d4:	29 f0       	breq	.+10     	; 0xe0 <__divsf3x+0x1e>
  d6:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_inf>
  da:	51 11       	cpse	r21, r1
  dc:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_szero>
  e0:	0c 94 42 03 	jmp	0x684	; 0x684 <__fp_nan>
  e4:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_split3>
  e8:	68 f3       	brcs	.-38     	; 0xc4 <__divsf3x+0x2>

000000ea <__divsf3_pse>:
  ea:	99 23       	and	r25, r25
  ec:	b1 f3       	breq	.-20     	; 0xda <__divsf3x+0x18>
  ee:	55 23       	and	r21, r21
  f0:	91 f3       	breq	.-28     	; 0xd6 <__divsf3x+0x14>
  f2:	95 1b       	sub	r25, r21
  f4:	55 0b       	sbc	r21, r21
  f6:	bb 27       	eor	r27, r27
  f8:	aa 27       	eor	r26, r26
  fa:	62 17       	cp	r22, r18
  fc:	73 07       	cpc	r23, r19
  fe:	84 07       	cpc	r24, r20
 100:	38 f0       	brcs	.+14     	; 0x110 <__divsf3_pse+0x26>
 102:	9f 5f       	subi	r25, 0xFF	; 255
 104:	5f 4f       	sbci	r21, 0xFF	; 255
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	44 1f       	adc	r20, r20
 10c:	aa 1f       	adc	r26, r26
 10e:	a9 f3       	breq	.-22     	; 0xfa <__divsf3_pse+0x10>
 110:	35 d0       	rcall	.+106    	; 0x17c <__divsf3_pse+0x92>
 112:	0e 2e       	mov	r0, r30
 114:	3a f0       	brmi	.+14     	; 0x124 <__divsf3_pse+0x3a>
 116:	e0 e8       	ldi	r30, 0x80	; 128
 118:	32 d0       	rcall	.+100    	; 0x17e <__divsf3_pse+0x94>
 11a:	91 50       	subi	r25, 0x01	; 1
 11c:	50 40       	sbci	r21, 0x00	; 0
 11e:	e6 95       	lsr	r30
 120:	00 1c       	adc	r0, r0
 122:	ca f7       	brpl	.-14     	; 0x116 <__divsf3_pse+0x2c>
 124:	2b d0       	rcall	.+86     	; 0x17c <__divsf3_pse+0x92>
 126:	fe 2f       	mov	r31, r30
 128:	29 d0       	rcall	.+82     	; 0x17c <__divsf3_pse+0x92>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	88 1f       	adc	r24, r24
 130:	bb 1f       	adc	r27, r27
 132:	26 17       	cp	r18, r22
 134:	37 07       	cpc	r19, r23
 136:	48 07       	cpc	r20, r24
 138:	ab 07       	cpc	r26, r27
 13a:	b0 e8       	ldi	r27, 0x80	; 128
 13c:	09 f0       	breq	.+2      	; 0x140 <__divsf3_pse+0x56>
 13e:	bb 0b       	sbc	r27, r27
 140:	80 2d       	mov	r24, r0
 142:	bf 01       	movw	r22, r30
 144:	ff 27       	eor	r31, r31
 146:	93 58       	subi	r25, 0x83	; 131
 148:	5f 4f       	sbci	r21, 0xFF	; 255
 14a:	3a f0       	brmi	.+14     	; 0x15a <__divsf3_pse+0x70>
 14c:	9e 3f       	cpi	r25, 0xFE	; 254
 14e:	51 05       	cpc	r21, r1
 150:	78 f0       	brcs	.+30     	; 0x170 <__divsf3_pse+0x86>
 152:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_inf>
 156:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_szero>
 15a:	5f 3f       	cpi	r21, 0xFF	; 255
 15c:	e4 f3       	brlt	.-8      	; 0x156 <__divsf3_pse+0x6c>
 15e:	98 3e       	cpi	r25, 0xE8	; 232
 160:	d4 f3       	brlt	.-12     	; 0x156 <__divsf3_pse+0x6c>
 162:	86 95       	lsr	r24
 164:	77 95       	ror	r23
 166:	67 95       	ror	r22
 168:	b7 95       	ror	r27
 16a:	f7 95       	ror	r31
 16c:	9f 5f       	subi	r25, 0xFF	; 255
 16e:	c9 f7       	brne	.-14     	; 0x162 <__divsf3_pse+0x78>
 170:	88 0f       	add	r24, r24
 172:	91 1d       	adc	r25, r1
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	97 f9       	bld	r25, 7
 17a:	08 95       	ret
 17c:	e1 e0       	ldi	r30, 0x01	; 1
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	88 1f       	adc	r24, r24
 184:	bb 1f       	adc	r27, r27
 186:	62 17       	cp	r22, r18
 188:	73 07       	cpc	r23, r19
 18a:	84 07       	cpc	r24, r20
 18c:	ba 07       	cpc	r27, r26
 18e:	20 f0       	brcs	.+8      	; 0x198 <__divsf3_pse+0xae>
 190:	62 1b       	sub	r22, r18
 192:	73 0b       	sbc	r23, r19
 194:	84 0b       	sbc	r24, r20
 196:	ba 0b       	sbc	r27, r26
 198:	ee 1f       	adc	r30, r30
 19a:	88 f7       	brcc	.-30     	; 0x17e <__divsf3_pse+0x94>
 19c:	e0 95       	com	r30
 19e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000042a <__fixunssfsi>:
 42a:	0e 94 9d 02 	call	0x53a	; 0x53a <__fp_splitA>
 42e:	88 f0       	brcs	.+34     	; 0x452 <__fixunssfsi+0x28>
 430:	9f 57       	subi	r25, 0x7F	; 127
 432:	98 f0       	brcs	.+38     	; 0x45a <__fixunssfsi+0x30>
 434:	b9 2f       	mov	r27, r25
 436:	99 27       	eor	r25, r25
 438:	b7 51       	subi	r27, 0x17	; 23
 43a:	b0 f0       	brcs	.+44     	; 0x468 <__fixunssfsi+0x3e>
 43c:	e1 f0       	breq	.+56     	; 0x476 <__fixunssfsi+0x4c>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	88 1f       	adc	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	1a f0       	brmi	.+6      	; 0x44e <__fixunssfsi+0x24>
 448:	ba 95       	dec	r27
 44a:	c9 f7       	brne	.-14     	; 0x43e <__fixunssfsi+0x14>
 44c:	14 c0       	rjmp	.+40     	; 0x476 <__fixunssfsi+0x4c>
 44e:	b1 30       	cpi	r27, 0x01	; 1
 450:	91 f0       	breq	.+36     	; 0x476 <__fixunssfsi+0x4c>
 452:	0e 94 1f 03 	call	0x63e	; 0x63e <__fp_zero>
 456:	b1 e0       	ldi	r27, 0x01	; 1
 458:	08 95       	ret
 45a:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_zero>
 45e:	67 2f       	mov	r22, r23
 460:	78 2f       	mov	r23, r24
 462:	88 27       	eor	r24, r24
 464:	b8 5f       	subi	r27, 0xF8	; 248
 466:	39 f0       	breq	.+14     	; 0x476 <__fixunssfsi+0x4c>
 468:	b9 3f       	cpi	r27, 0xF9	; 249
 46a:	cc f3       	brlt	.-14     	; 0x45e <__fixunssfsi+0x34>
 46c:	86 95       	lsr	r24
 46e:	77 95       	ror	r23
 470:	67 95       	ror	r22
 472:	b3 95       	inc	r27
 474:	d9 f7       	brne	.-10     	; 0x46c <__fixunssfsi+0x42>
 476:	3e f4       	brtc	.+14     	; 0x486 <__fixunssfsi+0x5c>
 478:	90 95       	com	r25
 47a:	80 95       	com	r24
 47c:	70 95       	com	r23
 47e:	61 95       	neg	r22
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000034e <__floatunsisf>:
 34e:	e8 94       	clt
 350:	09 c0       	rjmp	.+18     	; 0x364 <__floatsisf+0x12>

00000352 <__floatsisf>:
 352:	97 fb       	bst	r25, 7
 354:	3e f4       	brtc	.+14     	; 0x364 <__floatsisf+0x12>
 356:	90 95       	com	r25
 358:	80 95       	com	r24
 35a:	70 95       	com	r23
 35c:	61 95       	neg	r22
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	8f 4f       	sbci	r24, 0xFF	; 255
 362:	9f 4f       	sbci	r25, 0xFF	; 255
 364:	99 23       	and	r25, r25
 366:	a9 f0       	breq	.+42     	; 0x392 <__floatsisf+0x40>
 368:	f9 2f       	mov	r31, r25
 36a:	96 e9       	ldi	r25, 0x96	; 150
 36c:	bb 27       	eor	r27, r27
 36e:	93 95       	inc	r25
 370:	f6 95       	lsr	r31
 372:	87 95       	ror	r24
 374:	77 95       	ror	r23
 376:	67 95       	ror	r22
 378:	b7 95       	ror	r27
 37a:	f1 11       	cpse	r31, r1
 37c:	f8 cf       	rjmp	.-16     	; 0x36e <__floatsisf+0x1c>
 37e:	fa f4       	brpl	.+62     	; 0x3be <__floatsisf+0x6c>
 380:	bb 0f       	add	r27, r27
 382:	11 f4       	brne	.+4      	; 0x388 <__floatsisf+0x36>
 384:	60 ff       	sbrs	r22, 0
 386:	1b c0       	rjmp	.+54     	; 0x3be <__floatsisf+0x6c>
 388:	6f 5f       	subi	r22, 0xFF	; 255
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	8f 4f       	sbci	r24, 0xFF	; 255
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	16 c0       	rjmp	.+44     	; 0x3be <__floatsisf+0x6c>
 392:	88 23       	and	r24, r24
 394:	11 f0       	breq	.+4      	; 0x39a <__floatsisf+0x48>
 396:	96 e9       	ldi	r25, 0x96	; 150
 398:	11 c0       	rjmp	.+34     	; 0x3bc <__floatsisf+0x6a>
 39a:	77 23       	and	r23, r23
 39c:	21 f0       	breq	.+8      	; 0x3a6 <__floatsisf+0x54>
 39e:	9e e8       	ldi	r25, 0x8E	; 142
 3a0:	87 2f       	mov	r24, r23
 3a2:	76 2f       	mov	r23, r22
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <__floatsisf+0x5e>
 3a6:	66 23       	and	r22, r22
 3a8:	71 f0       	breq	.+28     	; 0x3c6 <__floatsisf+0x74>
 3aa:	96 e8       	ldi	r25, 0x86	; 134
 3ac:	86 2f       	mov	r24, r22
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	2a f0       	brmi	.+10     	; 0x3be <__floatsisf+0x6c>
 3b4:	9a 95       	dec	r25
 3b6:	66 0f       	add	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	88 1f       	adc	r24, r24
 3bc:	da f7       	brpl	.-10     	; 0x3b4 <__floatsisf+0x62>
 3be:	88 0f       	add	r24, r24
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	97 f9       	bld	r25, 7
 3c6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000658 <__fp_inf>:
 658:	97 f9       	bld	r25, 7
 65a:	9f 67       	ori	r25, 0x7F	; 127
 65c:	80 e8       	ldi	r24, 0x80	; 128
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000684 <__fp_nan>:
 684:	9f ef       	ldi	r25, 0xFF	; 255
 686:	80 ec       	ldi	r24, 0xC0	; 192
 688:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000622 <__fp_pscA>:
 622:	00 24       	eor	r0, r0
 624:	0a 94       	dec	r0
 626:	16 16       	cp	r1, r22
 628:	17 06       	cpc	r1, r23
 62a:	18 06       	cpc	r1, r24
 62c:	09 06       	cpc	r0, r25
 62e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000630 <__fp_pscB>:
 630:	00 24       	eor	r0, r0
 632:	0a 94       	dec	r0
 634:	12 16       	cp	r1, r18
 636:	13 06       	cpc	r1, r19
 638:	14 06       	cpc	r1, r20
 63a:	05 06       	cpc	r0, r21
 63c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000600 <__fp_round>:
 600:	09 2e       	mov	r0, r25
 602:	03 94       	inc	r0
 604:	00 0c       	add	r0, r0
 606:	11 f4       	brne	.+4      	; 0x60c <__fp_round+0xc>
 608:	88 23       	and	r24, r24
 60a:	52 f0       	brmi	.+20     	; 0x620 <__fp_round+0x20>
 60c:	bb 0f       	add	r27, r27
 60e:	40 f4       	brcc	.+16     	; 0x620 <__fp_round+0x20>
 610:	bf 2b       	or	r27, r31
 612:	11 f4       	brne	.+4      	; 0x618 <__fp_round+0x18>
 614:	60 ff       	sbrs	r22, 0
 616:	04 c0       	rjmp	.+8      	; 0x620 <__fp_round+0x20>
 618:	6f 5f       	subi	r22, 0xFF	; 255
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	8f 4f       	sbci	r24, 0xFF	; 255
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000052a <__fp_split3>:
 52a:	57 fd       	sbrc	r21, 7
 52c:	90 58       	subi	r25, 0x80	; 128
 52e:	44 0f       	add	r20, r20
 530:	55 1f       	adc	r21, r21
 532:	59 f0       	breq	.+22     	; 0x54a <__fp_splitA+0x10>
 534:	5f 3f       	cpi	r21, 0xFF	; 255
 536:	71 f0       	breq	.+28     	; 0x554 <__fp_splitA+0x1a>
 538:	47 95       	ror	r20

0000053a <__fp_splitA>:
 53a:	88 0f       	add	r24, r24
 53c:	97 fb       	bst	r25, 7
 53e:	99 1f       	adc	r25, r25
 540:	61 f0       	breq	.+24     	; 0x55a <__fp_splitA+0x20>
 542:	9f 3f       	cpi	r25, 0xFF	; 255
 544:	79 f0       	breq	.+30     	; 0x564 <__fp_splitA+0x2a>
 546:	87 95       	ror	r24
 548:	08 95       	ret
 54a:	12 16       	cp	r1, r18
 54c:	13 06       	cpc	r1, r19
 54e:	14 06       	cpc	r1, r20
 550:	55 1f       	adc	r21, r21
 552:	f2 cf       	rjmp	.-28     	; 0x538 <__fp_split3+0xe>
 554:	46 95       	lsr	r20
 556:	f1 df       	rcall	.-30     	; 0x53a <__fp_splitA>
 558:	08 c0       	rjmp	.+16     	; 0x56a <__fp_splitA+0x30>
 55a:	16 16       	cp	r1, r22
 55c:	17 06       	cpc	r1, r23
 55e:	18 06       	cpc	r1, r24
 560:	99 1f       	adc	r25, r25
 562:	f1 cf       	rjmp	.-30     	; 0x546 <__fp_splitA+0xc>
 564:	86 95       	lsr	r24
 566:	71 05       	cpc	r23, r1
 568:	61 05       	cpc	r22, r1
 56a:	08 94       	sec
 56c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000063e <__fp_zero>:
 63e:	e8 94       	clt

00000640 <__fp_szero>:
 640:	bb 27       	eor	r27, r27
 642:	66 27       	eor	r22, r22
 644:	77 27       	eor	r23, r23
 646:	cb 01       	movw	r24, r22
 648:	97 f9       	bld	r25, 7
 64a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000067c <__mulsf3>:
 67c:	0e 94 3d 01 	call	0x27a	; 0x27a <__mulsf3x>
 680:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000027a <__mulsf3x>:
 27a:	0f c0       	rjmp	.+30     	; 0x29a <__mulsf3x+0x20>
 27c:	0e 94 11 03 	call	0x622	; 0x622 <__fp_pscA>
 280:	38 f0       	brcs	.+14     	; 0x290 <__mulsf3x+0x16>
 282:	0e 94 18 03 	call	0x630	; 0x630 <__fp_pscB>
 286:	20 f0       	brcs	.+8      	; 0x290 <__mulsf3x+0x16>
 288:	95 23       	and	r25, r21
 28a:	11 f0       	breq	.+4      	; 0x290 <__mulsf3x+0x16>
 28c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_inf>
 290:	0c 94 42 03 	jmp	0x684	; 0x684 <__fp_nan>
 294:	11 24       	eor	r1, r1
 296:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_szero>
 29a:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_split3>
 29e:	70 f3       	brcs	.-36     	; 0x27c <__mulsf3x+0x2>

000002a0 <__mulsf3_pse>:
 2a0:	95 9f       	mul	r25, r21
 2a2:	c1 f3       	breq	.-16     	; 0x294 <__mulsf3x+0x1a>
 2a4:	95 0f       	add	r25, r21
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	55 1f       	adc	r21, r21
 2aa:	62 9f       	mul	r22, r18
 2ac:	f0 01       	movw	r30, r0
 2ae:	72 9f       	mul	r23, r18
 2b0:	bb 27       	eor	r27, r27
 2b2:	f0 0d       	add	r31, r0
 2b4:	b1 1d       	adc	r27, r1
 2b6:	63 9f       	mul	r22, r19
 2b8:	aa 27       	eor	r26, r26
 2ba:	f0 0d       	add	r31, r0
 2bc:	b1 1d       	adc	r27, r1
 2be:	aa 1f       	adc	r26, r26
 2c0:	64 9f       	mul	r22, r20
 2c2:	66 27       	eor	r22, r22
 2c4:	b0 0d       	add	r27, r0
 2c6:	a1 1d       	adc	r26, r1
 2c8:	66 1f       	adc	r22, r22
 2ca:	82 9f       	mul	r24, r18
 2cc:	22 27       	eor	r18, r18
 2ce:	b0 0d       	add	r27, r0
 2d0:	a1 1d       	adc	r26, r1
 2d2:	62 1f       	adc	r22, r18
 2d4:	73 9f       	mul	r23, r19
 2d6:	b0 0d       	add	r27, r0
 2d8:	a1 1d       	adc	r26, r1
 2da:	62 1f       	adc	r22, r18
 2dc:	83 9f       	mul	r24, r19
 2de:	a0 0d       	add	r26, r0
 2e0:	61 1d       	adc	r22, r1
 2e2:	22 1f       	adc	r18, r18
 2e4:	74 9f       	mul	r23, r20
 2e6:	33 27       	eor	r19, r19
 2e8:	a0 0d       	add	r26, r0
 2ea:	61 1d       	adc	r22, r1
 2ec:	23 1f       	adc	r18, r19
 2ee:	84 9f       	mul	r24, r20
 2f0:	60 0d       	add	r22, r0
 2f2:	21 1d       	adc	r18, r1
 2f4:	82 2f       	mov	r24, r18
 2f6:	76 2f       	mov	r23, r22
 2f8:	6a 2f       	mov	r22, r26
 2fa:	11 24       	eor	r1, r1
 2fc:	9f 57       	subi	r25, 0x7F	; 127
 2fe:	50 40       	sbci	r21, 0x00	; 0
 300:	9a f0       	brmi	.+38     	; 0x328 <__mulsf3_pse+0x88>
 302:	f1 f0       	breq	.+60     	; 0x340 <__mulsf3_pse+0xa0>
 304:	88 23       	and	r24, r24
 306:	4a f0       	brmi	.+18     	; 0x31a <__mulsf3_pse+0x7a>
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	bb 1f       	adc	r27, r27
 30e:	66 1f       	adc	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	88 1f       	adc	r24, r24
 314:	91 50       	subi	r25, 0x01	; 1
 316:	50 40       	sbci	r21, 0x00	; 0
 318:	a9 f7       	brne	.-22     	; 0x304 <__mulsf3_pse+0x64>
 31a:	9e 3f       	cpi	r25, 0xFE	; 254
 31c:	51 05       	cpc	r21, r1
 31e:	80 f0       	brcs	.+32     	; 0x340 <__mulsf3_pse+0xa0>
 320:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_inf>
 324:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_szero>
 328:	5f 3f       	cpi	r21, 0xFF	; 255
 32a:	e4 f3       	brlt	.-8      	; 0x324 <__mulsf3_pse+0x84>
 32c:	98 3e       	cpi	r25, 0xE8	; 232
 32e:	d4 f3       	brlt	.-12     	; 0x324 <__mulsf3_pse+0x84>
 330:	86 95       	lsr	r24
 332:	77 95       	ror	r23
 334:	67 95       	ror	r22
 336:	b7 95       	ror	r27
 338:	f7 95       	ror	r31
 33a:	e7 95       	ror	r30
 33c:	9f 5f       	subi	r25, 0xFF	; 255
 33e:	c1 f7       	brne	.-16     	; 0x330 <__mulsf3_pse+0x90>
 340:	fe 2b       	or	r31, r30
 342:	88 0f       	add	r24, r24
 344:	91 1d       	adc	r25, r1
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	97 f9       	bld	r25, 7
 34c:	08 95       	ret
